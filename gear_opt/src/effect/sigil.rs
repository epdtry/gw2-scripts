use crate::character::Vary;
use crate::effect::Effect;
use crate::stats::{Stats, Modifiers};

// BEGIN GENERATED CODE
// Generated by gen_gear_tables.py for GW2 build 142239 at 2023-03-07T15:52:56

/// No Sigil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct NoSigil;
#[allow(unused_variables)]
impl Effect for NoSigil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown (Absorption): steal 3 boons when interrupting a foe
        // unknown (Accuracy): +7% critical chance
        // unknown (Agility): gain 5 seconds of swiftness and 1 second of quickness when swapping to this weapon in combat. (cooldown: 9 seconds)
        // unknown (Air): unleash a lightning strike upon critically hitting a foe. <br>
        // unknown (Battle): gain 5 stacks of might for 12 seconds when swapping to this weapon in combat. (cooldown: 9 seconds)
        // unknown (Benevolence): ends on down.)</c><br>
        // unknown (Benevolence): gain a charge that grants a 0.5% increase in healing to other allies each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown (Blight): inflict nearby enemies with 2 stacks of poison for 4 seconds upon landing a critical hit. <br>
        // unknown (Blood): steal a foe's health upon landing a critical hit. <br>
        // unknown (Bloodlust): ends on down.)</c> <br>
        // unknown (Bloodlust): gain a charge of +10 power each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown (Bounty): ends on down.)</c> <br>
        // unknown (Bounty): gain a charge of +9 concentration each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown (Celerity): gain quickness for 5 seconds after disabling a foe. (cooldown: 20 seconds)
        // unimplemented (Chilling): condi_duration, chill, 20.0
        // unknown (Cleansing): remove 3 conditions when swapping to this weapon in combat
        // unknown (Corruption): ends on down.)</c> <br>
        // unknown (Corruption): gain a charge of +10 condition damage each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown (Cruelty): ends on down.)</c> <br>
        // unknown (Cruelty): gain a charge of +10 ferocity each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unimplemented (Debility): condi_duration, weakness, 20.0
        // unknown (Doom): your next attack will inflict 3 stacks of poison for 8 seconds after swapping to this weapon in combat. <br>
        // unknown (Draining): steal life when interrupting an enemy
        // unknown (Earth): inflict bleeding for 6 seconds upon critically hitting a foe. <br>
        // unknown (Energy): gain 50% of your endurance when you swap to this weapon while in combat
        // unknown (Fire): trigger a flame blast with a 240 radius upon critically hitting a foe. <br>
        // unknown (Frailty): inflict 2 stacks of vulnerability for 8 seconds after striking a foe from behind or the flank
        // unknown (Frenzy): recharge all equipped skills by 2 seconds upon killing an enemy
        // unknown (Generosity): transfer a condition upon critically hitting a foe. <br>
        // unknown (Geomancy): inflict nearby foes with bleeding for 8 seconds after swapping to this weapon in combat. <br>
        // unimplemented (Hobbling): condi_duration, cripple, 20.0
        // unknown (Hydromancy): damage nearby foes and chill them for 2 seconds when you swap to this weapon while in combat.<br>
        // unknown (Ice): chill a foe for 2 seconds after striking from its flank
        // unknown (Incapacitation): cripple a foe for 2 seconds after striking from its flank
        // unknown (Leeching): your next attack after swapping to this weapon while in combat steals some health
        // unknown (Life): ends on down.)</c> <br>
        // unknown (Life): gain a charge of +10 healing each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown (Luck): 75% chance to gain a random boon on killing an enemy
        // unknown (Mischief): launch up to 4 blinding snowballs at foes in front of you when you swap to this weapon in combat.<br>
        // unknown (Momentum): ends on down.)</c> <br>
        // unknown (Momentum): gain a charge of +5 toughness each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown (Night): outgoing damage is increased by 3% with an additional 7% at night
        // unknown (Nullification): remove a boon from a foe after striking from its flank. <br>
        // unimplemented (Paralyzation): condi_duration, stun, 30.0
        // unknown (Perception): ends on down.)</c> <br>
        // unknown (Perception): gain a charge of +10 precision each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unimplemented (Peril): condi_duration, vulnerability, 20.0
        // unknown (Purity): remove a condition after striking a foe from its flank. <br>
        // unknown (Rage): gain quickness for 3 seconds upon critically hitting a foe. <br>
        // unknown (Rending): inflict 5 stacks of vulnerability for 10 seconds when interrupting a foe
        // unknown (Renewal): heal nearby allies on weapon swap (360 radius) <br>
        // unknown (Restoration): gain health when interrupting a foe
        // unknown (Ruthlessness): gain 5 stacks of might for 10 seconds when interrupting a foe
        // unknown (Severance): upon interrupting an enemy, gain up to 250 precision and ferocity for 4 seconds, depending on level
        // unknown (Speed): gain swiftness (20 seconds) on killing a foe
        // unknown (Stamina): your endurance is refilled each time you kill a foe
        // unknown (Stars): ends on down.)</c> <br>
        // unknown (Stars): gain a charge of +2 to all stats each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown (Strength): gain might for 10 seconds upon critically hitting a foe. <br>
        // unknown (Torment): inflict 2 stacks of torment for 5 seconds to enemies around your target upon landing a critical hit. <br>
        // unknown (Transference): healing to other allies is increased by 10%
        // unknown (Vision): critically strike an enemy for 3 seconds after swapping to this weapon in combat
        // unknown (Water): heal allies within a 360 radius of your target upon landing a critical hit. <br>
    }
}
impl Vary for NoSigil {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl NoSigil {
    pub fn display_name(&self) -> &'static str {
        "No Sigil / Superior Sigil of Absorption / Superior Sigil of Accuracy / Superior Sigil of Agility / Superior Sigil of Air / Superior Sigil of Battle / Superior Sigil of Benevolence / Superior Sigil of Blight / Superior Sigil of Blood / Superior Sigil of Bloodlust / Superior Sigil of Bounty / Superior Sigil of Celerity / Superior Sigil of Chilling / Superior Sigil of Cleansing / Superior Sigil of Corruption / Superior Sigil of Cruelty / Superior Sigil of Debility / Superior Sigil of Doom / Superior Sigil of Draining / Superior Sigil of Earth / Superior Sigil of Energy / Superior Sigil of Fire / Superior Sigil of Frailty / Superior Sigil of Frenzy / Superior Sigil of Generosity / Superior Sigil of Geomancy / Superior Sigil of Hobbling / Superior Sigil of Hydromancy / Superior Sigil of Ice / Superior Sigil of Incapacitation / Superior Sigil of Leeching / Superior Sigil of Life / Superior Sigil of Luck / Superior Sigil of Mischief / Superior Sigil of Momentum / Superior Sigil of the Night / Superior Sigil of Nullification / Superior Sigil of Paralyzation / Superior Sigil of Perception / Superior Sigil of Peril / Superior Sigil of Purity / Superior Sigil of Rage / Superior Sigil of Rending / Superior Sigil of Renewal / Superior Sigil of Restoration / Superior Sigil of Ruthlessness / Superior Sigil of Severance / Superior Sigil of Speed / Superior Sigil of Stamina / Superior Sigil of the Stars / Superior Sigil of Strength / Superior Sigil of Torment / Superior Sigil of Transference / Superior Sigil of Vision / Superior Sigil of Water"
    }
}

/// Superior Sigil of Absorption
pub type Absorption = NoSigil;

/// Superior Sigil of Accuracy
pub type Accuracy = NoSigil;

/// Superior Sigil of Agility
pub type Agility = NoSigil;

/// Superior Sigil of Agony
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Agony;
#[allow(unused_variables)]
impl Effect for Agony {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.bleed += 20.0;
    }
}
impl Vary for Agony {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl Agony {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Agony"
    }
}

/// Superior Sigil of Air
pub type Air = NoSigil;

/// Superior Sigil of Battle
pub type Battle = NoSigil;

/// Superior Sigil of Benevolence
pub type Benevolence = NoSigil;

/// Superior Sigil of Blight
pub type Blight = NoSigil;

/// Superior Sigil of Blood
pub type Blood = NoSigil;

/// Superior Sigil of Bloodlust
pub type Bloodlust = NoSigil;

/// Superior Sigil of Bounty
pub type Bounty = NoSigil;

/// Superior Sigil of Bursting
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Bursting;
#[allow(unused_variables)]
impl Effect for Bursting {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_damage += 5.0;
    }
}
impl Vary for Bursting {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl Bursting {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Bursting"
    }
}

/// Superior Sigil of Celerity
pub type Celerity = NoSigil;

/// Superior Sigil of Centaur Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CentaurSlaying;
#[allow(unused_variables)]
impl Effect for CentaurSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.strike_damage += 3.0;
        // unknown (CentaurSlaying): +7% strike damage vs. centaurs
        // unknown (DemonSlaying): +7% strike damage vs. demons
        // unknown (DestroyerSlaying): +7% strike damage vs. destroyers
        // unknown (Dreams): +7% strike damage vs. nightmare court
        // unknown (ElementalSlaying): +7% strike damage vs. elementals
        // unknown (GhostSlaying): +7% strike damage vs. ghosts
        // unknown (GrawlSlaying): +7% strike damage vs. grawl
        // unknown (HologramSlaying): +17% strike damage vs. dragon bash holograms
        // unknown (IcebroodSlaying): +7% strike damage vs. icebrood
        // unknown (Impact): +7% strike damage vs. stunned or knocked-down foes
        // unknown (Justice): +7% strike damage vs. outlaws
        // unknown (KarkaSlaying): +7% strike damage vs. karka
        // unknown (MadScientists): +7% strike damage vs. inquest
        // unknown (OgreSlaying): +7% strike damage vs. ogres
        // unknown (SerpentSlaying): +7% strike damage vs. krait
        // unknown (Smothering): +7% strike damage vs. flame legion
        // unknown (Sorrow): +7% strike damage vs. dredge
        // unknown (UndeadSlaying): +7% strike damage vs. undead
        // unknown (Wrath): +7% strike damage vs. sons of svanir
    }
}
impl Vary for CentaurSlaying {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl CentaurSlaying {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Centaur Slaying / Superior Sigil of Demon Slaying / Superior Sigil of Destroyer Slaying / Superior Sigil of Dreams / Superior Sigil of Elemental Slaying / Superior Sigil of Ghost Slaying / Superior Sigil of Grawl Slaying / Superior Sigil of Hologram Slaying / Superior Sigil of Icebrood Slaying / Superior Sigil of Impact / Superior Sigil of Justice / Superior Sigil of Karka Slaying / Superior Sigil of Mad Scientists / Superior Sigil of Ogre Slaying / Superior Sigil of Serpent Slaying / Superior Sigil of Smothering / Superior Sigil of Sorrow / Superior Sigil of Undead Slaying / Superior Sigil of Wrath"
    }
}

/// Superior Sigil of Chilling
pub type Chilling = NoSigil;

/// Superior Sigil of Cleansing
pub type Cleansing = NoSigil;

/// Superior Sigil of Concentration
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Concentration;
#[allow(unused_variables)]
impl Effect for Concentration {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration += 10.0;
    }
}
impl Vary for Concentration {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl Concentration {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Concentration"
    }
}

/// Superior Sigil of Corruption
pub type Corruption = NoSigil;

/// Superior Sigil of Cruelty
pub type Cruelty = NoSigil;

/// Superior Sigil of Debility
pub type Debility = NoSigil;

/// Superior Sigil of Demon Slaying
pub type DemonSlaying = CentaurSlaying;

/// Superior Sigil of Demons
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Demons;
#[allow(unused_variables)]
impl Effect for Demons {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.torment += 20.0;
    }
}
impl Vary for Demons {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl Demons {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Demons"
    }
}

/// Superior Sigil of Destroyer Slaying
pub type DestroyerSlaying = CentaurSlaying;

/// Superior Sigil of Doom
pub type Doom = NoSigil;

/// Superior Sigil of Draining
pub type Draining = NoSigil;

/// Superior Sigil of Dreams
pub type Dreams = CentaurSlaying;

/// Superior Sigil of Earth
pub type Earth = NoSigil;

/// Superior Sigil of Elemental Slaying
pub type ElementalSlaying = CentaurSlaying;

/// Superior Sigil of Energy
pub type Energy = NoSigil;

/// Superior Sigil of Fire
pub type Fire = NoSigil;

/// Superior Sigil of Force
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Force;
#[allow(unused_variables)]
impl Effect for Force {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.strike_damage += 5.0;
    }
}
impl Vary for Force {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl Force {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Force"
    }
}

/// Superior Sigil of Frailty
pub type Frailty = NoSigil;

/// Superior Sigil of Frenzy
pub type Frenzy = NoSigil;

/// Superior Sigil of Generosity
pub type Generosity = NoSigil;

/// Superior Sigil of Geomancy
pub type Geomancy = NoSigil;

/// Superior Sigil of Ghost Slaying
pub type GhostSlaying = CentaurSlaying;

/// Superior Sigil of Grawl Slaying
pub type GrawlSlaying = CentaurSlaying;

/// Superior Sigil of Hobbling
pub type Hobbling = NoSigil;

/// Superior Sigil of Hologram Slaying
pub type HologramSlaying = CentaurSlaying;

/// Superior Sigil of Hydromancy
pub type Hydromancy = NoSigil;

/// Superior Sigil of Ice
pub type Ice = NoSigil;

/// Superior Sigil of Icebrood Slaying
pub type IcebroodSlaying = CentaurSlaying;

/// Superior Sigil of Impact
pub type Impact = CentaurSlaying;

/// Superior Sigil of Incapacitation
pub type Incapacitation = NoSigil;

/// Superior Sigil of Justice
pub type Justice = CentaurSlaying;

/// Superior Sigil of Karka Slaying
pub type KarkaSlaying = CentaurSlaying;

/// Superior Sigil of Leeching
pub type Leeching = NoSigil;

/// Superior Sigil of Life
pub type Life = NoSigil;

/// Superior Sigil of Luck
pub type Luck = NoSigil;

/// Superior Sigil of Mad Scientists
pub type MadScientists = CentaurSlaying;

/// Superior Sigil of Malice
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Malice;
#[allow(unused_variables)]
impl Effect for Malice {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration += 10.0;
    }
}
impl Vary for Malice {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl Malice {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Malice"
    }
}

/// Superior Sigil of Mischief
pub type Mischief = NoSigil;

/// Superior Sigil of Momentum
pub type Momentum = NoSigil;

/// Superior Sigil of the Night
pub type Night = NoSigil;

/// Superior Sigil of Nullification
pub type Nullification = NoSigil;

/// Superior Sigil of Ogre Slaying
pub type OgreSlaying = CentaurSlaying;

/// Superior Sigil of Paralyzation
pub type Paralyzation = NoSigil;

/// Superior Sigil of Perception
pub type Perception = NoSigil;

/// Superior Sigil of Peril
pub type Peril = NoSigil;

/// Superior Sigil of Purity
pub type Purity = NoSigil;

/// Superior Sigil of Rage
pub type Rage = NoSigil;

/// Superior Sigil of Rending
pub type Rending = NoSigil;

/// Superior Sigil of Renewal
pub type Renewal = NoSigil;

/// Superior Sigil of Restoration
pub type Restoration = NoSigil;

/// Superior Sigil of Ruthlessness
pub type Ruthlessness = NoSigil;

/// Superior Sigil of Serpent Slaying
pub type SerpentSlaying = CentaurSlaying;

/// Superior Sigil of Severance
pub type Severance = NoSigil;

/// Superior Sigil of Smoldering
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Smoldering;
#[allow(unused_variables)]
impl Effect for Smoldering {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.burn += 20.0;
    }
}
impl Vary for Smoldering {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl Smoldering {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Smoldering"
    }
}

/// Superior Sigil of Smothering
pub type Smothering = CentaurSlaying;

/// Superior Sigil of Sorrow
pub type Sorrow = CentaurSlaying;

/// Superior Sigil of Speed
pub type Speed = NoSigil;

/// Superior Sigil of Stamina
pub type Stamina = NoSigil;

/// Superior Sigil of the Stars
pub type Stars = NoSigil;

/// Superior Sigil of Strength
pub type Strength = NoSigil;

/// Superior Sigil of Torment
pub type Torment = NoSigil;

/// Superior Sigil of Transference
pub type Transference = NoSigil;

/// Superior Sigil of Undead Slaying
pub type UndeadSlaying = CentaurSlaying;

/// Superior Sigil of Venom
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Venom;
#[allow(unused_variables)]
impl Effect for Venom {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.poison += 20.0;
    }
}
impl Vary for Venom {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl Venom {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Venom"
    }
}

/// Superior Sigil of Vision
pub type Vision = NoSigil;

/// Superior Sigil of Water
pub type Water = NoSigil;

/// Superior Sigil of Wrath
pub type Wrath = CentaurSlaying;

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
pub enum Sigil {
    NoSigil(NoSigil),
    Agony(Agony),
    Bursting(Bursting),
    CentaurSlaying(CentaurSlaying),
    Concentration(Concentration),
    Demons(Demons),
    Force(Force),
    Malice(Malice),
    Smoldering(Smoldering),
    Venom(Venom),
}
impl Effect for Sigil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Sigil::NoSigil(x) => x.add_permanent(s, m),
            Sigil::Agony(x) => x.add_permanent(s, m),
            Sigil::Bursting(x) => x.add_permanent(s, m),
            Sigil::CentaurSlaying(x) => x.add_permanent(s, m),
            Sigil::Concentration(x) => x.add_permanent(s, m),
            Sigil::Demons(x) => x.add_permanent(s, m),
            Sigil::Force(x) => x.add_permanent(s, m),
            Sigil::Malice(x) => x.add_permanent(s, m),
            Sigil::Smoldering(x) => x.add_permanent(s, m),
            Sigil::Venom(x) => x.add_permanent(s, m),
        }
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Sigil::NoSigil(x) => x.distribute(s, m),
            Sigil::Agony(x) => x.distribute(s, m),
            Sigil::Bursting(x) => x.distribute(s, m),
            Sigil::CentaurSlaying(x) => x.distribute(s, m),
            Sigil::Concentration(x) => x.distribute(s, m),
            Sigil::Demons(x) => x.distribute(s, m),
            Sigil::Force(x) => x.distribute(s, m),
            Sigil::Malice(x) => x.distribute(s, m),
            Sigil::Smoldering(x) => x.distribute(s, m),
            Sigil::Venom(x) => x.distribute(s, m),
        }
    }
    fn add_temporary(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Sigil::NoSigil(x) => x.add_temporary(s, m),
            Sigil::Agony(x) => x.add_temporary(s, m),
            Sigil::Bursting(x) => x.add_temporary(s, m),
            Sigil::CentaurSlaying(x) => x.add_temporary(s, m),
            Sigil::Concentration(x) => x.add_temporary(s, m),
            Sigil::Demons(x) => x.add_temporary(s, m),
            Sigil::Force(x) => x.add_temporary(s, m),
            Sigil::Malice(x) => x.add_temporary(s, m),
            Sigil::Smoldering(x) => x.add_temporary(s, m),
            Sigil::Venom(x) => x.add_temporary(s, m),
        }
    }
}
impl Sigil {
    pub const COUNT: usize = 10;
    pub fn from_index(i: usize) -> Sigil {
        match i {
            0 => Sigil::NoSigil(NoSigil),
            1 => Sigil::Agony(Agony),
            2 => Sigil::Bursting(Bursting),
            3 => Sigil::CentaurSlaying(CentaurSlaying),
            4 => Sigil::Concentration(Concentration),
            5 => Sigil::Demons(Demons),
            6 => Sigil::Force(Force),
            7 => Sigil::Malice(Malice),
            8 => Sigil::Smoldering(Smoldering),
            9 => Sigil::Venom(Venom),
            _ => panic!("index {} out of range for Sigil", i),
        }
    }
    pub fn iter() -> impl Iterator<Item = Sigil> {
        (0 .. Sigil::COUNT).map(Sigil::from_index)
    }
    pub fn display_name(self) -> &'static str {
        match self {
            Sigil::NoSigil(x) => x.display_name(),
            Sigil::Agony(x) => x.display_name(),
            Sigil::Bursting(x) => x.display_name(),
            Sigil::CentaurSlaying(x) => x.display_name(),
            Sigil::Concentration(x) => x.display_name(),
            Sigil::Demons(x) => x.display_name(),
            Sigil::Force(x) => x.display_name(),
            Sigil::Malice(x) => x.display_name(),
            Sigil::Smoldering(x) => x.display_name(),
            Sigil::Venom(x) => x.display_name(),
        }
    }
}
impl From<NoSigil> for Sigil {
    fn from(x: NoSigil) -> Sigil { Sigil::NoSigil(x) }
}
impl From<Agony> for Sigil {
    fn from(x: Agony) -> Sigil { Sigil::Agony(x) }
}
impl From<Bursting> for Sigil {
    fn from(x: Bursting) -> Sigil { Sigil::Bursting(x) }
}
impl From<CentaurSlaying> for Sigil {
    fn from(x: CentaurSlaying) -> Sigil { Sigil::CentaurSlaying(x) }
}
impl From<Concentration> for Sigil {
    fn from(x: Concentration) -> Sigil { Sigil::Concentration(x) }
}
impl From<Demons> for Sigil {
    fn from(x: Demons) -> Sigil { Sigil::Demons(x) }
}
impl From<Force> for Sigil {
    fn from(x: Force) -> Sigil { Sigil::Force(x) }
}
impl From<Malice> for Sigil {
    fn from(x: Malice) -> Sigil { Sigil::Malice(x) }
}
impl From<Smoldering> for Sigil {
    fn from(x: Smoldering) -> Sigil { Sigil::Smoldering(x) }
}
impl From<Venom> for Sigil {
    fn from(x: Venom) -> Sigil { Sigil::Venom(x) }
}
impl Default for Sigil {
    fn default() -> Sigil { Sigil::NoSigil(NoSigil) }
}
impl Vary for Sigil {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        mut proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        let old = *proj(base);
        *proj(base) = Sigil::NoSigil(NoSigil);
        f(base);
        *proj(base) = Sigil::Agony(Agony);
        f(base);
        *proj(base) = Sigil::Bursting(Bursting);
        f(base);
        *proj(base) = Sigil::CentaurSlaying(CentaurSlaying);
        f(base);
        *proj(base) = Sigil::Concentration(Concentration);
        f(base);
        *proj(base) = Sigil::Demons(Demons);
        f(base);
        *proj(base) = Sigil::Force(Force);
        f(base);
        *proj(base) = Sigil::Malice(Malice);
        f(base);
        *proj(base) = Sigil::Smoldering(Smoldering);
        f(base);
        *proj(base) = Sigil::Venom(Venom);
        f(base);
        *proj(base) = old;
    }
}

// END GENERATED CODE
