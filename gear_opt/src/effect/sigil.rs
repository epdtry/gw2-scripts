use crate::character::Vary;
use crate::effect::Effect;
use crate::stats::{Stats, Modifiers};

// BEGIN GENERATED CODE
// Generated by gen_gear_tables.py for GW2 build 142239 at 2023-03-10T02:34:11

/// No Sigil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct NoSigil;
#[allow(unused_variables)]
impl Effect for NoSigil {
}
impl Vary for NoSigil {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl NoSigil {
    pub fn display_name(&self) -> &'static str {
        "No Sigil"
    }
}

/// Superior Sigil of Absorption
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Absorption;
#[allow(unused_variables)]
impl Effect for Absorption {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: steal 3 boons when interrupting a foe
    }
}
impl Vary for Absorption {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Absorption {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Absorption"
    }
}

/// Superior Sigil of Accuracy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Accuracy;
#[allow(unused_variables)]
impl Effect for Accuracy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% critical chance
    }
}
impl Vary for Accuracy {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Accuracy {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Accuracy"
    }
}

/// Superior Sigil of Agility
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Agility;
#[allow(unused_variables)]
impl Effect for Agility {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain 5 seconds of swiftness and 1 second of quickness when swapping to this weapon in combat. (cooldown: 9 seconds)
    }
}
impl Vary for Agility {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Agility {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Agility"
    }
}

/// Superior Sigil of Agony
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Agony;
#[allow(unused_variables)]
impl Effect for Agony {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.bleed += 20.0;
    }
}
impl Vary for Agony {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Agony {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Agony"
    }
}

/// Superior Sigil of Air
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Air;
#[allow(unused_variables)]
impl Effect for Air {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: unleash a lightning strike upon critically hitting a foe. <br>
    }
}
impl Vary for Air {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Air {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Air"
    }
}

/// Superior Sigil of Battle
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Battle;
#[allow(unused_variables)]
impl Effect for Battle {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain 5 stacks of might for 12 seconds when swapping to this weapon in combat. (cooldown: 9 seconds)
    }
}
impl Vary for Battle {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Battle {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Battle"
    }
}

/// Superior Sigil of Benevolence
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Benevolence;
#[allow(unused_variables)]
impl Effect for Benevolence {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain a charge that grants a 0.5% increase in healing to other allies each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown: ends on down.)</c><br>
    }
}
impl Vary for Benevolence {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Benevolence {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Benevolence"
    }
}

/// Superior Sigil of Blight
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Blight;
#[allow(unused_variables)]
impl Effect for Blight {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: inflict nearby enemies with 2 stacks of poison for 4 seconds upon landing a critical hit. <br>
    }
}
impl Vary for Blight {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Blight {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Blight"
    }
}

/// Superior Sigil of Blood
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Blood;
#[allow(unused_variables)]
impl Effect for Blood {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: steal a foe's health upon landing a critical hit. <br>
    }
}
impl Vary for Blood {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Blood {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Blood"
    }
}

/// Superior Sigil of Bloodlust
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Bloodlust;
#[allow(unused_variables)]
impl Effect for Bloodlust {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain a charge of +10 power each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown: ends on down.)</c> <br>
    }
}
impl Vary for Bloodlust {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Bloodlust {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Bloodlust"
    }
}

/// Superior Sigil of Bounty
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Bounty;
#[allow(unused_variables)]
impl Effect for Bounty {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain a charge of +9 concentration each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown: ends on down.)</c> <br>
    }
}
impl Vary for Bounty {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Bounty {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Bounty"
    }
}

/// Superior Sigil of Bursting
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Bursting;
#[allow(unused_variables)]
impl Effect for Bursting {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_damage += 5.0;
    }
}
impl Vary for Bursting {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Bursting {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Bursting"
    }
}

/// Superior Sigil of Celerity
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Celerity;
#[allow(unused_variables)]
impl Effect for Celerity {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain quickness for 5 seconds after disabling a foe. (cooldown: 20 seconds)
    }
}
impl Vary for Celerity {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Celerity {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Celerity"
    }
}

/// Superior Sigil of Centaur Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CentaurSlaying;
#[allow(unused_variables)]
impl Effect for CentaurSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. centaurs
        m.strike_damage += 3.0;
    }
}
impl Vary for CentaurSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl CentaurSlaying {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Centaur Slaying"
    }
}

/// Superior Sigil of Chilling
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Chilling;
#[allow(unused_variables)]
impl Effect for Chilling {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (20x): ('unimplemented', 'condi_duration', 'chill')
    }
}
impl Vary for Chilling {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Chilling {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Chilling"
    }
}

/// Superior Sigil of Cleansing
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Cleansing;
#[allow(unused_variables)]
impl Effect for Cleansing {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: remove 3 conditions when swapping to this weapon in combat
    }
}
impl Vary for Cleansing {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Cleansing {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Cleansing"
    }
}

/// Superior Sigil of Concentration
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Concentration;
#[allow(unused_variables)]
impl Effect for Concentration {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration += 10.0;
    }
}
impl Vary for Concentration {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Concentration {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Concentration"
    }
}

/// Superior Sigil of Corruption
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Corruption;
#[allow(unused_variables)]
impl Effect for Corruption {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain a charge of +10 condition damage each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown: ends on down.)</c> <br>
    }
}
impl Vary for Corruption {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Corruption {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Corruption"
    }
}

/// Superior Sigil of Cruelty
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Cruelty;
#[allow(unused_variables)]
impl Effect for Cruelty {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain a charge of +10 ferocity each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown: ends on down.)</c> <br>
    }
}
impl Vary for Cruelty {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Cruelty {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Cruelty"
    }
}

/// Superior Sigil of Debility
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Debility;
#[allow(unused_variables)]
impl Effect for Debility {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (20x): ('unimplemented', 'condi_duration', 'weakness')
    }
}
impl Vary for Debility {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Debility {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Debility"
    }
}

/// Superior Sigil of Demon Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DemonSlaying;
#[allow(unused_variables)]
impl Effect for DemonSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. demons
        m.strike_damage += 3.0;
    }
}
impl Vary for DemonSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl DemonSlaying {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Demon Slaying"
    }
}

/// Superior Sigil of Demons
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Demons;
#[allow(unused_variables)]
impl Effect for Demons {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.torment += 20.0;
    }
}
impl Vary for Demons {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Demons {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Demons"
    }
}

/// Superior Sigil of Destroyer Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DestroyerSlaying;
#[allow(unused_variables)]
impl Effect for DestroyerSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. destroyers
        m.strike_damage += 3.0;
    }
}
impl Vary for DestroyerSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl DestroyerSlaying {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Destroyer Slaying"
    }
}

/// Superior Sigil of Doom
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Doom;
#[allow(unused_variables)]
impl Effect for Doom {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: your next attack will inflict 3 stacks of poison for 8 seconds after swapping to this weapon in combat. <br>
    }
}
impl Vary for Doom {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Doom {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Doom"
    }
}

/// Superior Sigil of Draining
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Draining;
#[allow(unused_variables)]
impl Effect for Draining {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: steal life when interrupting an enemy
    }
}
impl Vary for Draining {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Draining {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Draining"
    }
}

/// Superior Sigil of Dreams
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Dreams;
#[allow(unused_variables)]
impl Effect for Dreams {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. nightmare court
        m.strike_damage += 3.0;
    }
}
impl Vary for Dreams {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Dreams {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Dreams"
    }
}

/// Superior Sigil of Earth
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Earth;
#[allow(unused_variables)]
impl Effect for Earth {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: inflict bleeding for 6 seconds upon critically hitting a foe. <br>
    }
}
impl Vary for Earth {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Earth {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Earth"
    }
}

/// Superior Sigil of Elemental Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ElementalSlaying;
#[allow(unused_variables)]
impl Effect for ElementalSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. elementals
        m.strike_damage += 3.0;
    }
}
impl Vary for ElementalSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ElementalSlaying {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Elemental Slaying"
    }
}

/// Superior Sigil of Energy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Energy;
#[allow(unused_variables)]
impl Effect for Energy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain 50% of your endurance when you swap to this weapon while in combat
    }
}
impl Vary for Energy {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Energy {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Energy"
    }
}

/// Superior Sigil of Fire
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Fire;
#[allow(unused_variables)]
impl Effect for Fire {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: trigger a flame blast with a 240 radius upon critically hitting a foe. <br>
    }
}
impl Vary for Fire {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Fire {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Fire"
    }
}

/// Superior Sigil of Force
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Force;
#[allow(unused_variables)]
impl Effect for Force {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.strike_damage += 5.0;
    }
}
impl Vary for Force {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Force {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Force"
    }
}

/// Superior Sigil of Frailty
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Frailty;
#[allow(unused_variables)]
impl Effect for Frailty {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: inflict 2 stacks of vulnerability for 8 seconds after striking a foe from behind or the flank
    }
}
impl Vary for Frailty {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Frailty {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Frailty"
    }
}

/// Superior Sigil of Frenzy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Frenzy;
#[allow(unused_variables)]
impl Effect for Frenzy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: recharge all equipped skills by 2 seconds upon killing an enemy
    }
}
impl Vary for Frenzy {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Frenzy {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Frenzy"
    }
}

/// Superior Sigil of Generosity
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Generosity;
#[allow(unused_variables)]
impl Effect for Generosity {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: transfer a condition upon critically hitting a foe. <br>
    }
}
impl Vary for Generosity {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Generosity {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Generosity"
    }
}

/// Superior Sigil of Geomancy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Geomancy;
#[allow(unused_variables)]
impl Effect for Geomancy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: inflict nearby foes with bleeding for 8 seconds after swapping to this weapon in combat. <br>
    }
}
impl Vary for Geomancy {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Geomancy {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Geomancy"
    }
}

/// Superior Sigil of Ghost Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct GhostSlaying;
#[allow(unused_variables)]
impl Effect for GhostSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. ghosts
        m.strike_damage += 3.0;
    }
}
impl Vary for GhostSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl GhostSlaying {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Ghost Slaying"
    }
}

/// Superior Sigil of Grawl Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct GrawlSlaying;
#[allow(unused_variables)]
impl Effect for GrawlSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. grawl
        m.strike_damage += 3.0;
    }
}
impl Vary for GrawlSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl GrawlSlaying {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Grawl Slaying"
    }
}

/// Superior Sigil of Hobbling
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Hobbling;
#[allow(unused_variables)]
impl Effect for Hobbling {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (20x): ('unimplemented', 'condi_duration', 'cripple')
    }
}
impl Vary for Hobbling {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Hobbling {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Hobbling"
    }
}

/// Superior Sigil of Hologram Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HologramSlaying;
#[allow(unused_variables)]
impl Effect for HologramSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +17% strike damage vs. dragon bash holograms
        m.strike_damage += 3.0;
    }
}
impl Vary for HologramSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl HologramSlaying {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Hologram Slaying"
    }
}

/// Superior Sigil of Hydromancy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Hydromancy;
#[allow(unused_variables)]
impl Effect for Hydromancy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: damage nearby foes and chill them for 2 seconds when you swap to this weapon while in combat.<br>
    }
}
impl Vary for Hydromancy {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Hydromancy {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Hydromancy"
    }
}

/// Superior Sigil of Ice
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Ice;
#[allow(unused_variables)]
impl Effect for Ice {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: chill a foe for 2 seconds after striking from its flank
    }
}
impl Vary for Ice {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Ice {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Ice"
    }
}

/// Superior Sigil of Icebrood Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct IcebroodSlaying;
#[allow(unused_variables)]
impl Effect for IcebroodSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. icebrood
        m.strike_damage += 3.0;
    }
}
impl Vary for IcebroodSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl IcebroodSlaying {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Icebrood Slaying"
    }
}

/// Superior Sigil of Impact
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Impact;
#[allow(unused_variables)]
impl Effect for Impact {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. stunned or knocked-down foes
        m.strike_damage += 3.0;
    }
}
impl Vary for Impact {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Impact {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Impact"
    }
}

/// Superior Sigil of Incapacitation
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Incapacitation;
#[allow(unused_variables)]
impl Effect for Incapacitation {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: cripple a foe for 2 seconds after striking from its flank
    }
}
impl Vary for Incapacitation {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Incapacitation {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Incapacitation"
    }
}

/// Superior Sigil of Justice
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Justice;
#[allow(unused_variables)]
impl Effect for Justice {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. outlaws
        m.strike_damage += 3.0;
    }
}
impl Vary for Justice {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Justice {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Justice"
    }
}

/// Superior Sigil of Karka Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct KarkaSlaying;
#[allow(unused_variables)]
impl Effect for KarkaSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. karka
        m.strike_damage += 3.0;
    }
}
impl Vary for KarkaSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl KarkaSlaying {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Karka Slaying"
    }
}

/// Superior Sigil of Leeching
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Leeching;
#[allow(unused_variables)]
impl Effect for Leeching {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: your next attack after swapping to this weapon while in combat steals some health
    }
}
impl Vary for Leeching {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Leeching {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Leeching"
    }
}

/// Superior Sigil of Life
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Life;
#[allow(unused_variables)]
impl Effect for Life {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain a charge of +10 healing each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown: ends on down.)</c> <br>
    }
}
impl Vary for Life {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Life {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Life"
    }
}

/// Superior Sigil of Luck
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Luck;
#[allow(unused_variables)]
impl Effect for Luck {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 75% chance to gain a random boon on killing an enemy
    }
}
impl Vary for Luck {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Luck {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Luck"
    }
}

/// Superior Sigil of Mad Scientists
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MadScientists;
#[allow(unused_variables)]
impl Effect for MadScientists {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. inquest
        m.strike_damage += 3.0;
    }
}
impl Vary for MadScientists {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MadScientists {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Mad Scientists"
    }
}

/// Superior Sigil of Malice
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Malice;
#[allow(unused_variables)]
impl Effect for Malice {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration += 10.0;
    }
}
impl Vary for Malice {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Malice {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Malice"
    }
}

/// Superior Sigil of Mischief
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Mischief;
#[allow(unused_variables)]
impl Effect for Mischief {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: launch up to 4 blinding snowballs at foes in front of you when you swap to this weapon in combat.<br>
    }
}
impl Vary for Mischief {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Mischief {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Mischief"
    }
}

/// Superior Sigil of Momentum
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Momentum;
#[allow(unused_variables)]
impl Effect for Momentum {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain a charge of +5 toughness each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown: ends on down.)</c> <br>
    }
}
impl Vary for Momentum {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Momentum {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Momentum"
    }
}

/// Superior Sigil of the Night
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Night;
#[allow(unused_variables)]
impl Effect for Night {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: outgoing damage is increased by 3% with an additional 7% at night
    }
}
impl Vary for Night {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Night {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of the Night"
    }
}

/// Superior Sigil of Nullification
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Nullification;
#[allow(unused_variables)]
impl Effect for Nullification {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: remove a boon from a foe after striking from its flank. <br>
    }
}
impl Vary for Nullification {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Nullification {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Nullification"
    }
}

/// Superior Sigil of Ogre Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OgreSlaying;
#[allow(unused_variables)]
impl Effect for OgreSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. ogres
        m.strike_damage += 3.0;
    }
}
impl Vary for OgreSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OgreSlaying {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Ogre Slaying"
    }
}

/// Superior Sigil of Paralyzation
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Paralyzation;
#[allow(unused_variables)]
impl Effect for Paralyzation {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (30x): ('unimplemented', 'condi_duration', 'stun')
    }
}
impl Vary for Paralyzation {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Paralyzation {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Paralyzation"
    }
}

/// Superior Sigil of Perception
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Perception;
#[allow(unused_variables)]
impl Effect for Perception {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain a charge of +10 precision each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown: ends on down.)</c> <br>
    }
}
impl Vary for Perception {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Perception {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Perception"
    }
}

/// Superior Sigil of Peril
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Peril;
#[allow(unused_variables)]
impl Effect for Peril {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (20x): ('unimplemented', 'condi_duration', 'vulnerability')
    }
}
impl Vary for Peril {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Peril {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Peril"
    }
}

/// Superior Sigil of Purity
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Purity;
#[allow(unused_variables)]
impl Effect for Purity {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: remove a condition after striking a foe from its flank. <br>
    }
}
impl Vary for Purity {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Purity {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Purity"
    }
}

/// Superior Sigil of Rage
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Rage;
#[allow(unused_variables)]
impl Effect for Rage {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain quickness for 3 seconds upon critically hitting a foe. <br>
    }
}
impl Vary for Rage {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Rage {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Rage"
    }
}

/// Superior Sigil of Rending
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Rending;
#[allow(unused_variables)]
impl Effect for Rending {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: inflict 5 stacks of vulnerability for 10 seconds when interrupting a foe
    }
}
impl Vary for Rending {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Rending {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Rending"
    }
}

/// Superior Sigil of Renewal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Renewal;
#[allow(unused_variables)]
impl Effect for Renewal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: heal nearby allies on weapon swap (360 radius) <br>
    }
}
impl Vary for Renewal {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Renewal {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Renewal"
    }
}

/// Superior Sigil of Restoration
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Restoration;
#[allow(unused_variables)]
impl Effect for Restoration {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain health when interrupting a foe
    }
}
impl Vary for Restoration {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Restoration {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Restoration"
    }
}

/// Superior Sigil of Ruthlessness
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Ruthlessness;
#[allow(unused_variables)]
impl Effect for Ruthlessness {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain 5 stacks of might for 10 seconds when interrupting a foe
    }
}
impl Vary for Ruthlessness {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Ruthlessness {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Ruthlessness"
    }
}

/// Superior Sigil of Serpent Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SerpentSlaying;
#[allow(unused_variables)]
impl Effect for SerpentSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. krait
        m.strike_damage += 3.0;
    }
}
impl Vary for SerpentSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SerpentSlaying {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Serpent Slaying"
    }
}

/// Superior Sigil of Severance
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Severance;
#[allow(unused_variables)]
impl Effect for Severance {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: upon interrupting an enemy, gain up to 250 precision and ferocity for 4 seconds, depending on level
    }
}
impl Vary for Severance {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Severance {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Severance"
    }
}

/// Superior Sigil of Smoldering
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Smoldering;
#[allow(unused_variables)]
impl Effect for Smoldering {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.burn += 20.0;
    }
}
impl Vary for Smoldering {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Smoldering {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Smoldering"
    }
}

/// Superior Sigil of Smothering
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Smothering;
#[allow(unused_variables)]
impl Effect for Smothering {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. flame legion
        m.strike_damage += 3.0;
    }
}
impl Vary for Smothering {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Smothering {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Smothering"
    }
}

/// Superior Sigil of Sorrow
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Sorrow;
#[allow(unused_variables)]
impl Effect for Sorrow {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. dredge
        m.strike_damage += 3.0;
    }
}
impl Vary for Sorrow {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Sorrow {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Sorrow"
    }
}

/// Superior Sigil of Speed
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Speed;
#[allow(unused_variables)]
impl Effect for Speed {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain swiftness (20 seconds) on killing a foe
    }
}
impl Vary for Speed {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Speed {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Speed"
    }
}

/// Superior Sigil of Stamina
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Stamina;
#[allow(unused_variables)]
impl Effect for Stamina {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: your endurance is refilled each time you kill a foe
    }
}
impl Vary for Stamina {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Stamina {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Stamina"
    }
}

/// Superior Sigil of the Stars
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Stars;
#[allow(unused_variables)]
impl Effect for Stars {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain a charge of +2 to all stats each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks
        // unknown: ends on down.)</c> <br>
    }
}
impl Vary for Stars {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Stars {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of the Stars"
    }
}

/// Superior Sigil of Strength
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Strength;
#[allow(unused_variables)]
impl Effect for Strength {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain might for 10 seconds upon critically hitting a foe. <br>
    }
}
impl Vary for Strength {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Strength {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Strength"
    }
}

/// Superior Sigil of Torment
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Torment;
#[allow(unused_variables)]
impl Effect for Torment {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: inflict 2 stacks of torment for 5 seconds to enemies around your target upon landing a critical hit. <br>
    }
}
impl Vary for Torment {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Torment {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Torment"
    }
}

/// Superior Sigil of Transference
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Transference;
#[allow(unused_variables)]
impl Effect for Transference {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: healing to other allies is increased by 10%
    }
}
impl Vary for Transference {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Transference {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Transference"
    }
}

/// Superior Sigil of Undead Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct UndeadSlaying;
#[allow(unused_variables)]
impl Effect for UndeadSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. undead
        m.strike_damage += 3.0;
    }
}
impl Vary for UndeadSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl UndeadSlaying {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Undead Slaying"
    }
}

/// Superior Sigil of Venom
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Venom;
#[allow(unused_variables)]
impl Effect for Venom {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.poison += 20.0;
    }
}
impl Vary for Venom {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Venom {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Venom"
    }
}

/// Superior Sigil of Vision
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Vision;
#[allow(unused_variables)]
impl Effect for Vision {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: critically strike an enemy for 3 seconds after swapping to this weapon in combat
    }
}
impl Vary for Vision {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Vision {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Vision"
    }
}

/// Superior Sigil of Water
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Water;
#[allow(unused_variables)]
impl Effect for Water {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: heal allies within a 360 radius of your target upon landing a critical hit. <br>
    }
}
impl Vary for Water {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Water {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Water"
    }
}

/// Superior Sigil of Wrath
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Wrath;
#[allow(unused_variables)]
impl Effect for Wrath {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +7% strike damage vs. sons of svanir
        m.strike_damage += 3.0;
    }
}
impl Vary for Wrath {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Wrath {
    pub fn display_name(&self) -> &'static str {
        "Superior Sigil of Wrath"
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
pub enum Sigil {
    NoSigil(NoSigil),
    Absorption(Absorption),
    Accuracy(Accuracy),
    Agility(Agility),
    Agony(Agony),
    Air(Air),
    Battle(Battle),
    Benevolence(Benevolence),
    Blight(Blight),
    Blood(Blood),
    Bloodlust(Bloodlust),
    Bounty(Bounty),
    Bursting(Bursting),
    Celerity(Celerity),
    CentaurSlaying(CentaurSlaying),
    Chilling(Chilling),
    Cleansing(Cleansing),
    Concentration(Concentration),
    Corruption(Corruption),
    Cruelty(Cruelty),
    Debility(Debility),
    DemonSlaying(DemonSlaying),
    Demons(Demons),
    DestroyerSlaying(DestroyerSlaying),
    Doom(Doom),
    Draining(Draining),
    Dreams(Dreams),
    Earth(Earth),
    ElementalSlaying(ElementalSlaying),
    Energy(Energy),
    Fire(Fire),
    Force(Force),
    Frailty(Frailty),
    Frenzy(Frenzy),
    Generosity(Generosity),
    Geomancy(Geomancy),
    GhostSlaying(GhostSlaying),
    GrawlSlaying(GrawlSlaying),
    Hobbling(Hobbling),
    HologramSlaying(HologramSlaying),
    Hydromancy(Hydromancy),
    Ice(Ice),
    IcebroodSlaying(IcebroodSlaying),
    Impact(Impact),
    Incapacitation(Incapacitation),
    Justice(Justice),
    KarkaSlaying(KarkaSlaying),
    Leeching(Leeching),
    Life(Life),
    Luck(Luck),
    MadScientists(MadScientists),
    Malice(Malice),
    Mischief(Mischief),
    Momentum(Momentum),
    Night(Night),
    Nullification(Nullification),
    OgreSlaying(OgreSlaying),
    Paralyzation(Paralyzation),
    Perception(Perception),
    Peril(Peril),
    Purity(Purity),
    Rage(Rage),
    Rending(Rending),
    Renewal(Renewal),
    Restoration(Restoration),
    Ruthlessness(Ruthlessness),
    SerpentSlaying(SerpentSlaying),
    Severance(Severance),
    Smoldering(Smoldering),
    Smothering(Smothering),
    Sorrow(Sorrow),
    Speed(Speed),
    Stamina(Stamina),
    Stars(Stars),
    Strength(Strength),
    Torment(Torment),
    Transference(Transference),
    UndeadSlaying(UndeadSlaying),
    Venom(Venom),
    Vision(Vision),
    Water(Water),
    Wrath(Wrath),
}
impl Default for Sigil {
    fn default() -> Sigil { Sigil::NoSigil(NoSigil) }
}
impl Sigil {
    pub const COUNT: usize = 82;
    pub fn index(self) -> usize {
        match self {
            Sigil::NoSigil(NoSigil) => 0,
            Sigil::Absorption(Absorption) => 1,
            Sigil::Accuracy(Accuracy) => 2,
            Sigil::Agility(Agility) => 3,
            Sigil::Agony(Agony) => 4,
            Sigil::Air(Air) => 5,
            Sigil::Battle(Battle) => 6,
            Sigil::Benevolence(Benevolence) => 7,
            Sigil::Blight(Blight) => 8,
            Sigil::Blood(Blood) => 9,
            Sigil::Bloodlust(Bloodlust) => 10,
            Sigil::Bounty(Bounty) => 11,
            Sigil::Bursting(Bursting) => 12,
            Sigil::Celerity(Celerity) => 13,
            Sigil::CentaurSlaying(CentaurSlaying) => 14,
            Sigil::Chilling(Chilling) => 15,
            Sigil::Cleansing(Cleansing) => 16,
            Sigil::Concentration(Concentration) => 17,
            Sigil::Corruption(Corruption) => 18,
            Sigil::Cruelty(Cruelty) => 19,
            Sigil::Debility(Debility) => 20,
            Sigil::DemonSlaying(DemonSlaying) => 21,
            Sigil::Demons(Demons) => 22,
            Sigil::DestroyerSlaying(DestroyerSlaying) => 23,
            Sigil::Doom(Doom) => 24,
            Sigil::Draining(Draining) => 25,
            Sigil::Dreams(Dreams) => 26,
            Sigil::Earth(Earth) => 27,
            Sigil::ElementalSlaying(ElementalSlaying) => 28,
            Sigil::Energy(Energy) => 29,
            Sigil::Fire(Fire) => 30,
            Sigil::Force(Force) => 31,
            Sigil::Frailty(Frailty) => 32,
            Sigil::Frenzy(Frenzy) => 33,
            Sigil::Generosity(Generosity) => 34,
            Sigil::Geomancy(Geomancy) => 35,
            Sigil::GhostSlaying(GhostSlaying) => 36,
            Sigil::GrawlSlaying(GrawlSlaying) => 37,
            Sigil::Hobbling(Hobbling) => 38,
            Sigil::HologramSlaying(HologramSlaying) => 39,
            Sigil::Hydromancy(Hydromancy) => 40,
            Sigil::Ice(Ice) => 41,
            Sigil::IcebroodSlaying(IcebroodSlaying) => 42,
            Sigil::Impact(Impact) => 43,
            Sigil::Incapacitation(Incapacitation) => 44,
            Sigil::Justice(Justice) => 45,
            Sigil::KarkaSlaying(KarkaSlaying) => 46,
            Sigil::Leeching(Leeching) => 47,
            Sigil::Life(Life) => 48,
            Sigil::Luck(Luck) => 49,
            Sigil::MadScientists(MadScientists) => 50,
            Sigil::Malice(Malice) => 51,
            Sigil::Mischief(Mischief) => 52,
            Sigil::Momentum(Momentum) => 53,
            Sigil::Night(Night) => 54,
            Sigil::Nullification(Nullification) => 55,
            Sigil::OgreSlaying(OgreSlaying) => 56,
            Sigil::Paralyzation(Paralyzation) => 57,
            Sigil::Perception(Perception) => 58,
            Sigil::Peril(Peril) => 59,
            Sigil::Purity(Purity) => 60,
            Sigil::Rage(Rage) => 61,
            Sigil::Rending(Rending) => 62,
            Sigil::Renewal(Renewal) => 63,
            Sigil::Restoration(Restoration) => 64,
            Sigil::Ruthlessness(Ruthlessness) => 65,
            Sigil::SerpentSlaying(SerpentSlaying) => 66,
            Sigil::Severance(Severance) => 67,
            Sigil::Smoldering(Smoldering) => 68,
            Sigil::Smothering(Smothering) => 69,
            Sigil::Sorrow(Sorrow) => 70,
            Sigil::Speed(Speed) => 71,
            Sigil::Stamina(Stamina) => 72,
            Sigil::Stars(Stars) => 73,
            Sigil::Strength(Strength) => 74,
            Sigil::Torment(Torment) => 75,
            Sigil::Transference(Transference) => 76,
            Sigil::UndeadSlaying(UndeadSlaying) => 77,
            Sigil::Venom(Venom) => 78,
            Sigil::Vision(Vision) => 79,
            Sigil::Water(Water) => 80,
            Sigil::Wrath(Wrath) => 81,
        }
    }
    pub fn from_index(i: usize) -> Sigil {
        match i {
            0 => Sigil::NoSigil(NoSigil),
            1 => Sigil::Absorption(Absorption),
            2 => Sigil::Accuracy(Accuracy),
            3 => Sigil::Agility(Agility),
            4 => Sigil::Agony(Agony),
            5 => Sigil::Air(Air),
            6 => Sigil::Battle(Battle),
            7 => Sigil::Benevolence(Benevolence),
            8 => Sigil::Blight(Blight),
            9 => Sigil::Blood(Blood),
            10 => Sigil::Bloodlust(Bloodlust),
            11 => Sigil::Bounty(Bounty),
            12 => Sigil::Bursting(Bursting),
            13 => Sigil::Celerity(Celerity),
            14 => Sigil::CentaurSlaying(CentaurSlaying),
            15 => Sigil::Chilling(Chilling),
            16 => Sigil::Cleansing(Cleansing),
            17 => Sigil::Concentration(Concentration),
            18 => Sigil::Corruption(Corruption),
            19 => Sigil::Cruelty(Cruelty),
            20 => Sigil::Debility(Debility),
            21 => Sigil::DemonSlaying(DemonSlaying),
            22 => Sigil::Demons(Demons),
            23 => Sigil::DestroyerSlaying(DestroyerSlaying),
            24 => Sigil::Doom(Doom),
            25 => Sigil::Draining(Draining),
            26 => Sigil::Dreams(Dreams),
            27 => Sigil::Earth(Earth),
            28 => Sigil::ElementalSlaying(ElementalSlaying),
            29 => Sigil::Energy(Energy),
            30 => Sigil::Fire(Fire),
            31 => Sigil::Force(Force),
            32 => Sigil::Frailty(Frailty),
            33 => Sigil::Frenzy(Frenzy),
            34 => Sigil::Generosity(Generosity),
            35 => Sigil::Geomancy(Geomancy),
            36 => Sigil::GhostSlaying(GhostSlaying),
            37 => Sigil::GrawlSlaying(GrawlSlaying),
            38 => Sigil::Hobbling(Hobbling),
            39 => Sigil::HologramSlaying(HologramSlaying),
            40 => Sigil::Hydromancy(Hydromancy),
            41 => Sigil::Ice(Ice),
            42 => Sigil::IcebroodSlaying(IcebroodSlaying),
            43 => Sigil::Impact(Impact),
            44 => Sigil::Incapacitation(Incapacitation),
            45 => Sigil::Justice(Justice),
            46 => Sigil::KarkaSlaying(KarkaSlaying),
            47 => Sigil::Leeching(Leeching),
            48 => Sigil::Life(Life),
            49 => Sigil::Luck(Luck),
            50 => Sigil::MadScientists(MadScientists),
            51 => Sigil::Malice(Malice),
            52 => Sigil::Mischief(Mischief),
            53 => Sigil::Momentum(Momentum),
            54 => Sigil::Night(Night),
            55 => Sigil::Nullification(Nullification),
            56 => Sigil::OgreSlaying(OgreSlaying),
            57 => Sigil::Paralyzation(Paralyzation),
            58 => Sigil::Perception(Perception),
            59 => Sigil::Peril(Peril),
            60 => Sigil::Purity(Purity),
            61 => Sigil::Rage(Rage),
            62 => Sigil::Rending(Rending),
            63 => Sigil::Renewal(Renewal),
            64 => Sigil::Restoration(Restoration),
            65 => Sigil::Ruthlessness(Ruthlessness),
            66 => Sigil::SerpentSlaying(SerpentSlaying),
            67 => Sigil::Severance(Severance),
            68 => Sigil::Smoldering(Smoldering),
            69 => Sigil::Smothering(Smothering),
            70 => Sigil::Sorrow(Sorrow),
            71 => Sigil::Speed(Speed),
            72 => Sigil::Stamina(Stamina),
            73 => Sigil::Stars(Stars),
            74 => Sigil::Strength(Strength),
            75 => Sigil::Torment(Torment),
            76 => Sigil::Transference(Transference),
            77 => Sigil::UndeadSlaying(UndeadSlaying),
            78 => Sigil::Venom(Venom),
            79 => Sigil::Vision(Vision),
            80 => Sigil::Water(Water),
            81 => Sigil::Wrath(Wrath),
            _ => panic!("index {} out of range for Sigil", i),
        }
    }
    pub fn iter() -> impl Iterator<Item = Sigil> {
        (0 .. Sigil::COUNT).map(Sigil::from_index)
    }
    pub fn display_name(self) -> &'static str {
        match self {
            Sigil::NoSigil(x) => x.display_name(),
            Sigil::Absorption(x) => x.display_name(),
            Sigil::Accuracy(x) => x.display_name(),
            Sigil::Agility(x) => x.display_name(),
            Sigil::Agony(x) => x.display_name(),
            Sigil::Air(x) => x.display_name(),
            Sigil::Battle(x) => x.display_name(),
            Sigil::Benevolence(x) => x.display_name(),
            Sigil::Blight(x) => x.display_name(),
            Sigil::Blood(x) => x.display_name(),
            Sigil::Bloodlust(x) => x.display_name(),
            Sigil::Bounty(x) => x.display_name(),
            Sigil::Bursting(x) => x.display_name(),
            Sigil::Celerity(x) => x.display_name(),
            Sigil::CentaurSlaying(x) => x.display_name(),
            Sigil::Chilling(x) => x.display_name(),
            Sigil::Cleansing(x) => x.display_name(),
            Sigil::Concentration(x) => x.display_name(),
            Sigil::Corruption(x) => x.display_name(),
            Sigil::Cruelty(x) => x.display_name(),
            Sigil::Debility(x) => x.display_name(),
            Sigil::DemonSlaying(x) => x.display_name(),
            Sigil::Demons(x) => x.display_name(),
            Sigil::DestroyerSlaying(x) => x.display_name(),
            Sigil::Doom(x) => x.display_name(),
            Sigil::Draining(x) => x.display_name(),
            Sigil::Dreams(x) => x.display_name(),
            Sigil::Earth(x) => x.display_name(),
            Sigil::ElementalSlaying(x) => x.display_name(),
            Sigil::Energy(x) => x.display_name(),
            Sigil::Fire(x) => x.display_name(),
            Sigil::Force(x) => x.display_name(),
            Sigil::Frailty(x) => x.display_name(),
            Sigil::Frenzy(x) => x.display_name(),
            Sigil::Generosity(x) => x.display_name(),
            Sigil::Geomancy(x) => x.display_name(),
            Sigil::GhostSlaying(x) => x.display_name(),
            Sigil::GrawlSlaying(x) => x.display_name(),
            Sigil::Hobbling(x) => x.display_name(),
            Sigil::HologramSlaying(x) => x.display_name(),
            Sigil::Hydromancy(x) => x.display_name(),
            Sigil::Ice(x) => x.display_name(),
            Sigil::IcebroodSlaying(x) => x.display_name(),
            Sigil::Impact(x) => x.display_name(),
            Sigil::Incapacitation(x) => x.display_name(),
            Sigil::Justice(x) => x.display_name(),
            Sigil::KarkaSlaying(x) => x.display_name(),
            Sigil::Leeching(x) => x.display_name(),
            Sigil::Life(x) => x.display_name(),
            Sigil::Luck(x) => x.display_name(),
            Sigil::MadScientists(x) => x.display_name(),
            Sigil::Malice(x) => x.display_name(),
            Sigil::Mischief(x) => x.display_name(),
            Sigil::Momentum(x) => x.display_name(),
            Sigil::Night(x) => x.display_name(),
            Sigil::Nullification(x) => x.display_name(),
            Sigil::OgreSlaying(x) => x.display_name(),
            Sigil::Paralyzation(x) => x.display_name(),
            Sigil::Perception(x) => x.display_name(),
            Sigil::Peril(x) => x.display_name(),
            Sigil::Purity(x) => x.display_name(),
            Sigil::Rage(x) => x.display_name(),
            Sigil::Rending(x) => x.display_name(),
            Sigil::Renewal(x) => x.display_name(),
            Sigil::Restoration(x) => x.display_name(),
            Sigil::Ruthlessness(x) => x.display_name(),
            Sigil::SerpentSlaying(x) => x.display_name(),
            Sigil::Severance(x) => x.display_name(),
            Sigil::Smoldering(x) => x.display_name(),
            Sigil::Smothering(x) => x.display_name(),
            Sigil::Sorrow(x) => x.display_name(),
            Sigil::Speed(x) => x.display_name(),
            Sigil::Stamina(x) => x.display_name(),
            Sigil::Stars(x) => x.display_name(),
            Sigil::Strength(x) => x.display_name(),
            Sigil::Torment(x) => x.display_name(),
            Sigil::Transference(x) => x.display_name(),
            Sigil::UndeadSlaying(x) => x.display_name(),
            Sigil::Venom(x) => x.display_name(),
            Sigil::Vision(x) => x.display_name(),
            Sigil::Water(x) => x.display_name(),
            Sigil::Wrath(x) => x.display_name(),
        }
    }
}
impl Effect for Sigil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Sigil::NoSigil(x) => x.add_permanent(s, m),
            Sigil::Absorption(x) => x.add_permanent(s, m),
            Sigil::Accuracy(x) => x.add_permanent(s, m),
            Sigil::Agility(x) => x.add_permanent(s, m),
            Sigil::Agony(x) => x.add_permanent(s, m),
            Sigil::Air(x) => x.add_permanent(s, m),
            Sigil::Battle(x) => x.add_permanent(s, m),
            Sigil::Benevolence(x) => x.add_permanent(s, m),
            Sigil::Blight(x) => x.add_permanent(s, m),
            Sigil::Blood(x) => x.add_permanent(s, m),
            Sigil::Bloodlust(x) => x.add_permanent(s, m),
            Sigil::Bounty(x) => x.add_permanent(s, m),
            Sigil::Bursting(x) => x.add_permanent(s, m),
            Sigil::Celerity(x) => x.add_permanent(s, m),
            Sigil::CentaurSlaying(x) => x.add_permanent(s, m),
            Sigil::Chilling(x) => x.add_permanent(s, m),
            Sigil::Cleansing(x) => x.add_permanent(s, m),
            Sigil::Concentration(x) => x.add_permanent(s, m),
            Sigil::Corruption(x) => x.add_permanent(s, m),
            Sigil::Cruelty(x) => x.add_permanent(s, m),
            Sigil::Debility(x) => x.add_permanent(s, m),
            Sigil::DemonSlaying(x) => x.add_permanent(s, m),
            Sigil::Demons(x) => x.add_permanent(s, m),
            Sigil::DestroyerSlaying(x) => x.add_permanent(s, m),
            Sigil::Doom(x) => x.add_permanent(s, m),
            Sigil::Draining(x) => x.add_permanent(s, m),
            Sigil::Dreams(x) => x.add_permanent(s, m),
            Sigil::Earth(x) => x.add_permanent(s, m),
            Sigil::ElementalSlaying(x) => x.add_permanent(s, m),
            Sigil::Energy(x) => x.add_permanent(s, m),
            Sigil::Fire(x) => x.add_permanent(s, m),
            Sigil::Force(x) => x.add_permanent(s, m),
            Sigil::Frailty(x) => x.add_permanent(s, m),
            Sigil::Frenzy(x) => x.add_permanent(s, m),
            Sigil::Generosity(x) => x.add_permanent(s, m),
            Sigil::Geomancy(x) => x.add_permanent(s, m),
            Sigil::GhostSlaying(x) => x.add_permanent(s, m),
            Sigil::GrawlSlaying(x) => x.add_permanent(s, m),
            Sigil::Hobbling(x) => x.add_permanent(s, m),
            Sigil::HologramSlaying(x) => x.add_permanent(s, m),
            Sigil::Hydromancy(x) => x.add_permanent(s, m),
            Sigil::Ice(x) => x.add_permanent(s, m),
            Sigil::IcebroodSlaying(x) => x.add_permanent(s, m),
            Sigil::Impact(x) => x.add_permanent(s, m),
            Sigil::Incapacitation(x) => x.add_permanent(s, m),
            Sigil::Justice(x) => x.add_permanent(s, m),
            Sigil::KarkaSlaying(x) => x.add_permanent(s, m),
            Sigil::Leeching(x) => x.add_permanent(s, m),
            Sigil::Life(x) => x.add_permanent(s, m),
            Sigil::Luck(x) => x.add_permanent(s, m),
            Sigil::MadScientists(x) => x.add_permanent(s, m),
            Sigil::Malice(x) => x.add_permanent(s, m),
            Sigil::Mischief(x) => x.add_permanent(s, m),
            Sigil::Momentum(x) => x.add_permanent(s, m),
            Sigil::Night(x) => x.add_permanent(s, m),
            Sigil::Nullification(x) => x.add_permanent(s, m),
            Sigil::OgreSlaying(x) => x.add_permanent(s, m),
            Sigil::Paralyzation(x) => x.add_permanent(s, m),
            Sigil::Perception(x) => x.add_permanent(s, m),
            Sigil::Peril(x) => x.add_permanent(s, m),
            Sigil::Purity(x) => x.add_permanent(s, m),
            Sigil::Rage(x) => x.add_permanent(s, m),
            Sigil::Rending(x) => x.add_permanent(s, m),
            Sigil::Renewal(x) => x.add_permanent(s, m),
            Sigil::Restoration(x) => x.add_permanent(s, m),
            Sigil::Ruthlessness(x) => x.add_permanent(s, m),
            Sigil::SerpentSlaying(x) => x.add_permanent(s, m),
            Sigil::Severance(x) => x.add_permanent(s, m),
            Sigil::Smoldering(x) => x.add_permanent(s, m),
            Sigil::Smothering(x) => x.add_permanent(s, m),
            Sigil::Sorrow(x) => x.add_permanent(s, m),
            Sigil::Speed(x) => x.add_permanent(s, m),
            Sigil::Stamina(x) => x.add_permanent(s, m),
            Sigil::Stars(x) => x.add_permanent(s, m),
            Sigil::Strength(x) => x.add_permanent(s, m),
            Sigil::Torment(x) => x.add_permanent(s, m),
            Sigil::Transference(x) => x.add_permanent(s, m),
            Sigil::UndeadSlaying(x) => x.add_permanent(s, m),
            Sigil::Venom(x) => x.add_permanent(s, m),
            Sigil::Vision(x) => x.add_permanent(s, m),
            Sigil::Water(x) => x.add_permanent(s, m),
            Sigil::Wrath(x) => x.add_permanent(s, m),
        }
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Sigil::NoSigil(x) => x.distribute(s, m),
            Sigil::Absorption(x) => x.distribute(s, m),
            Sigil::Accuracy(x) => x.distribute(s, m),
            Sigil::Agility(x) => x.distribute(s, m),
            Sigil::Agony(x) => x.distribute(s, m),
            Sigil::Air(x) => x.distribute(s, m),
            Sigil::Battle(x) => x.distribute(s, m),
            Sigil::Benevolence(x) => x.distribute(s, m),
            Sigil::Blight(x) => x.distribute(s, m),
            Sigil::Blood(x) => x.distribute(s, m),
            Sigil::Bloodlust(x) => x.distribute(s, m),
            Sigil::Bounty(x) => x.distribute(s, m),
            Sigil::Bursting(x) => x.distribute(s, m),
            Sigil::Celerity(x) => x.distribute(s, m),
            Sigil::CentaurSlaying(x) => x.distribute(s, m),
            Sigil::Chilling(x) => x.distribute(s, m),
            Sigil::Cleansing(x) => x.distribute(s, m),
            Sigil::Concentration(x) => x.distribute(s, m),
            Sigil::Corruption(x) => x.distribute(s, m),
            Sigil::Cruelty(x) => x.distribute(s, m),
            Sigil::Debility(x) => x.distribute(s, m),
            Sigil::DemonSlaying(x) => x.distribute(s, m),
            Sigil::Demons(x) => x.distribute(s, m),
            Sigil::DestroyerSlaying(x) => x.distribute(s, m),
            Sigil::Doom(x) => x.distribute(s, m),
            Sigil::Draining(x) => x.distribute(s, m),
            Sigil::Dreams(x) => x.distribute(s, m),
            Sigil::Earth(x) => x.distribute(s, m),
            Sigil::ElementalSlaying(x) => x.distribute(s, m),
            Sigil::Energy(x) => x.distribute(s, m),
            Sigil::Fire(x) => x.distribute(s, m),
            Sigil::Force(x) => x.distribute(s, m),
            Sigil::Frailty(x) => x.distribute(s, m),
            Sigil::Frenzy(x) => x.distribute(s, m),
            Sigil::Generosity(x) => x.distribute(s, m),
            Sigil::Geomancy(x) => x.distribute(s, m),
            Sigil::GhostSlaying(x) => x.distribute(s, m),
            Sigil::GrawlSlaying(x) => x.distribute(s, m),
            Sigil::Hobbling(x) => x.distribute(s, m),
            Sigil::HologramSlaying(x) => x.distribute(s, m),
            Sigil::Hydromancy(x) => x.distribute(s, m),
            Sigil::Ice(x) => x.distribute(s, m),
            Sigil::IcebroodSlaying(x) => x.distribute(s, m),
            Sigil::Impact(x) => x.distribute(s, m),
            Sigil::Incapacitation(x) => x.distribute(s, m),
            Sigil::Justice(x) => x.distribute(s, m),
            Sigil::KarkaSlaying(x) => x.distribute(s, m),
            Sigil::Leeching(x) => x.distribute(s, m),
            Sigil::Life(x) => x.distribute(s, m),
            Sigil::Luck(x) => x.distribute(s, m),
            Sigil::MadScientists(x) => x.distribute(s, m),
            Sigil::Malice(x) => x.distribute(s, m),
            Sigil::Mischief(x) => x.distribute(s, m),
            Sigil::Momentum(x) => x.distribute(s, m),
            Sigil::Night(x) => x.distribute(s, m),
            Sigil::Nullification(x) => x.distribute(s, m),
            Sigil::OgreSlaying(x) => x.distribute(s, m),
            Sigil::Paralyzation(x) => x.distribute(s, m),
            Sigil::Perception(x) => x.distribute(s, m),
            Sigil::Peril(x) => x.distribute(s, m),
            Sigil::Purity(x) => x.distribute(s, m),
            Sigil::Rage(x) => x.distribute(s, m),
            Sigil::Rending(x) => x.distribute(s, m),
            Sigil::Renewal(x) => x.distribute(s, m),
            Sigil::Restoration(x) => x.distribute(s, m),
            Sigil::Ruthlessness(x) => x.distribute(s, m),
            Sigil::SerpentSlaying(x) => x.distribute(s, m),
            Sigil::Severance(x) => x.distribute(s, m),
            Sigil::Smoldering(x) => x.distribute(s, m),
            Sigil::Smothering(x) => x.distribute(s, m),
            Sigil::Sorrow(x) => x.distribute(s, m),
            Sigil::Speed(x) => x.distribute(s, m),
            Sigil::Stamina(x) => x.distribute(s, m),
            Sigil::Stars(x) => x.distribute(s, m),
            Sigil::Strength(x) => x.distribute(s, m),
            Sigil::Torment(x) => x.distribute(s, m),
            Sigil::Transference(x) => x.distribute(s, m),
            Sigil::UndeadSlaying(x) => x.distribute(s, m),
            Sigil::Venom(x) => x.distribute(s, m),
            Sigil::Vision(x) => x.distribute(s, m),
            Sigil::Water(x) => x.distribute(s, m),
            Sigil::Wrath(x) => x.distribute(s, m),
        }
    }
    fn add_temporary(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Sigil::NoSigil(x) => x.add_temporary(s, m),
            Sigil::Absorption(x) => x.add_temporary(s, m),
            Sigil::Accuracy(x) => x.add_temporary(s, m),
            Sigil::Agility(x) => x.add_temporary(s, m),
            Sigil::Agony(x) => x.add_temporary(s, m),
            Sigil::Air(x) => x.add_temporary(s, m),
            Sigil::Battle(x) => x.add_temporary(s, m),
            Sigil::Benevolence(x) => x.add_temporary(s, m),
            Sigil::Blight(x) => x.add_temporary(s, m),
            Sigil::Blood(x) => x.add_temporary(s, m),
            Sigil::Bloodlust(x) => x.add_temporary(s, m),
            Sigil::Bounty(x) => x.add_temporary(s, m),
            Sigil::Bursting(x) => x.add_temporary(s, m),
            Sigil::Celerity(x) => x.add_temporary(s, m),
            Sigil::CentaurSlaying(x) => x.add_temporary(s, m),
            Sigil::Chilling(x) => x.add_temporary(s, m),
            Sigil::Cleansing(x) => x.add_temporary(s, m),
            Sigil::Concentration(x) => x.add_temporary(s, m),
            Sigil::Corruption(x) => x.add_temporary(s, m),
            Sigil::Cruelty(x) => x.add_temporary(s, m),
            Sigil::Debility(x) => x.add_temporary(s, m),
            Sigil::DemonSlaying(x) => x.add_temporary(s, m),
            Sigil::Demons(x) => x.add_temporary(s, m),
            Sigil::DestroyerSlaying(x) => x.add_temporary(s, m),
            Sigil::Doom(x) => x.add_temporary(s, m),
            Sigil::Draining(x) => x.add_temporary(s, m),
            Sigil::Dreams(x) => x.add_temporary(s, m),
            Sigil::Earth(x) => x.add_temporary(s, m),
            Sigil::ElementalSlaying(x) => x.add_temporary(s, m),
            Sigil::Energy(x) => x.add_temporary(s, m),
            Sigil::Fire(x) => x.add_temporary(s, m),
            Sigil::Force(x) => x.add_temporary(s, m),
            Sigil::Frailty(x) => x.add_temporary(s, m),
            Sigil::Frenzy(x) => x.add_temporary(s, m),
            Sigil::Generosity(x) => x.add_temporary(s, m),
            Sigil::Geomancy(x) => x.add_temporary(s, m),
            Sigil::GhostSlaying(x) => x.add_temporary(s, m),
            Sigil::GrawlSlaying(x) => x.add_temporary(s, m),
            Sigil::Hobbling(x) => x.add_temporary(s, m),
            Sigil::HologramSlaying(x) => x.add_temporary(s, m),
            Sigil::Hydromancy(x) => x.add_temporary(s, m),
            Sigil::Ice(x) => x.add_temporary(s, m),
            Sigil::IcebroodSlaying(x) => x.add_temporary(s, m),
            Sigil::Impact(x) => x.add_temporary(s, m),
            Sigil::Incapacitation(x) => x.add_temporary(s, m),
            Sigil::Justice(x) => x.add_temporary(s, m),
            Sigil::KarkaSlaying(x) => x.add_temporary(s, m),
            Sigil::Leeching(x) => x.add_temporary(s, m),
            Sigil::Life(x) => x.add_temporary(s, m),
            Sigil::Luck(x) => x.add_temporary(s, m),
            Sigil::MadScientists(x) => x.add_temporary(s, m),
            Sigil::Malice(x) => x.add_temporary(s, m),
            Sigil::Mischief(x) => x.add_temporary(s, m),
            Sigil::Momentum(x) => x.add_temporary(s, m),
            Sigil::Night(x) => x.add_temporary(s, m),
            Sigil::Nullification(x) => x.add_temporary(s, m),
            Sigil::OgreSlaying(x) => x.add_temporary(s, m),
            Sigil::Paralyzation(x) => x.add_temporary(s, m),
            Sigil::Perception(x) => x.add_temporary(s, m),
            Sigil::Peril(x) => x.add_temporary(s, m),
            Sigil::Purity(x) => x.add_temporary(s, m),
            Sigil::Rage(x) => x.add_temporary(s, m),
            Sigil::Rending(x) => x.add_temporary(s, m),
            Sigil::Renewal(x) => x.add_temporary(s, m),
            Sigil::Restoration(x) => x.add_temporary(s, m),
            Sigil::Ruthlessness(x) => x.add_temporary(s, m),
            Sigil::SerpentSlaying(x) => x.add_temporary(s, m),
            Sigil::Severance(x) => x.add_temporary(s, m),
            Sigil::Smoldering(x) => x.add_temporary(s, m),
            Sigil::Smothering(x) => x.add_temporary(s, m),
            Sigil::Sorrow(x) => x.add_temporary(s, m),
            Sigil::Speed(x) => x.add_temporary(s, m),
            Sigil::Stamina(x) => x.add_temporary(s, m),
            Sigil::Stars(x) => x.add_temporary(s, m),
            Sigil::Strength(x) => x.add_temporary(s, m),
            Sigil::Torment(x) => x.add_temporary(s, m),
            Sigil::Transference(x) => x.add_temporary(s, m),
            Sigil::UndeadSlaying(x) => x.add_temporary(s, m),
            Sigil::Venom(x) => x.add_temporary(s, m),
            Sigil::Vision(x) => x.add_temporary(s, m),
            Sigil::Water(x) => x.add_temporary(s, m),
            Sigil::Wrath(x) => x.add_temporary(s, m),
        }
    }
}
impl From<NoSigil> for Sigil {
    fn from(x: NoSigil) -> Sigil { Sigil::NoSigil(x) }
}
impl From<Absorption> for Sigil {
    fn from(x: Absorption) -> Sigil { Sigil::Absorption(x) }
}
impl From<Accuracy> for Sigil {
    fn from(x: Accuracy) -> Sigil { Sigil::Accuracy(x) }
}
impl From<Agility> for Sigil {
    fn from(x: Agility) -> Sigil { Sigil::Agility(x) }
}
impl From<Agony> for Sigil {
    fn from(x: Agony) -> Sigil { Sigil::Agony(x) }
}
impl From<Air> for Sigil {
    fn from(x: Air) -> Sigil { Sigil::Air(x) }
}
impl From<Battle> for Sigil {
    fn from(x: Battle) -> Sigil { Sigil::Battle(x) }
}
impl From<Benevolence> for Sigil {
    fn from(x: Benevolence) -> Sigil { Sigil::Benevolence(x) }
}
impl From<Blight> for Sigil {
    fn from(x: Blight) -> Sigil { Sigil::Blight(x) }
}
impl From<Blood> for Sigil {
    fn from(x: Blood) -> Sigil { Sigil::Blood(x) }
}
impl From<Bloodlust> for Sigil {
    fn from(x: Bloodlust) -> Sigil { Sigil::Bloodlust(x) }
}
impl From<Bounty> for Sigil {
    fn from(x: Bounty) -> Sigil { Sigil::Bounty(x) }
}
impl From<Bursting> for Sigil {
    fn from(x: Bursting) -> Sigil { Sigil::Bursting(x) }
}
impl From<Celerity> for Sigil {
    fn from(x: Celerity) -> Sigil { Sigil::Celerity(x) }
}
impl From<CentaurSlaying> for Sigil {
    fn from(x: CentaurSlaying) -> Sigil { Sigil::CentaurSlaying(x) }
}
impl From<Chilling> for Sigil {
    fn from(x: Chilling) -> Sigil { Sigil::Chilling(x) }
}
impl From<Cleansing> for Sigil {
    fn from(x: Cleansing) -> Sigil { Sigil::Cleansing(x) }
}
impl From<Concentration> for Sigil {
    fn from(x: Concentration) -> Sigil { Sigil::Concentration(x) }
}
impl From<Corruption> for Sigil {
    fn from(x: Corruption) -> Sigil { Sigil::Corruption(x) }
}
impl From<Cruelty> for Sigil {
    fn from(x: Cruelty) -> Sigil { Sigil::Cruelty(x) }
}
impl From<Debility> for Sigil {
    fn from(x: Debility) -> Sigil { Sigil::Debility(x) }
}
impl From<DemonSlaying> for Sigil {
    fn from(x: DemonSlaying) -> Sigil { Sigil::DemonSlaying(x) }
}
impl From<Demons> for Sigil {
    fn from(x: Demons) -> Sigil { Sigil::Demons(x) }
}
impl From<DestroyerSlaying> for Sigil {
    fn from(x: DestroyerSlaying) -> Sigil { Sigil::DestroyerSlaying(x) }
}
impl From<Doom> for Sigil {
    fn from(x: Doom) -> Sigil { Sigil::Doom(x) }
}
impl From<Draining> for Sigil {
    fn from(x: Draining) -> Sigil { Sigil::Draining(x) }
}
impl From<Dreams> for Sigil {
    fn from(x: Dreams) -> Sigil { Sigil::Dreams(x) }
}
impl From<Earth> for Sigil {
    fn from(x: Earth) -> Sigil { Sigil::Earth(x) }
}
impl From<ElementalSlaying> for Sigil {
    fn from(x: ElementalSlaying) -> Sigil { Sigil::ElementalSlaying(x) }
}
impl From<Energy> for Sigil {
    fn from(x: Energy) -> Sigil { Sigil::Energy(x) }
}
impl From<Fire> for Sigil {
    fn from(x: Fire) -> Sigil { Sigil::Fire(x) }
}
impl From<Force> for Sigil {
    fn from(x: Force) -> Sigil { Sigil::Force(x) }
}
impl From<Frailty> for Sigil {
    fn from(x: Frailty) -> Sigil { Sigil::Frailty(x) }
}
impl From<Frenzy> for Sigil {
    fn from(x: Frenzy) -> Sigil { Sigil::Frenzy(x) }
}
impl From<Generosity> for Sigil {
    fn from(x: Generosity) -> Sigil { Sigil::Generosity(x) }
}
impl From<Geomancy> for Sigil {
    fn from(x: Geomancy) -> Sigil { Sigil::Geomancy(x) }
}
impl From<GhostSlaying> for Sigil {
    fn from(x: GhostSlaying) -> Sigil { Sigil::GhostSlaying(x) }
}
impl From<GrawlSlaying> for Sigil {
    fn from(x: GrawlSlaying) -> Sigil { Sigil::GrawlSlaying(x) }
}
impl From<Hobbling> for Sigil {
    fn from(x: Hobbling) -> Sigil { Sigil::Hobbling(x) }
}
impl From<HologramSlaying> for Sigil {
    fn from(x: HologramSlaying) -> Sigil { Sigil::HologramSlaying(x) }
}
impl From<Hydromancy> for Sigil {
    fn from(x: Hydromancy) -> Sigil { Sigil::Hydromancy(x) }
}
impl From<Ice> for Sigil {
    fn from(x: Ice) -> Sigil { Sigil::Ice(x) }
}
impl From<IcebroodSlaying> for Sigil {
    fn from(x: IcebroodSlaying) -> Sigil { Sigil::IcebroodSlaying(x) }
}
impl From<Impact> for Sigil {
    fn from(x: Impact) -> Sigil { Sigil::Impact(x) }
}
impl From<Incapacitation> for Sigil {
    fn from(x: Incapacitation) -> Sigil { Sigil::Incapacitation(x) }
}
impl From<Justice> for Sigil {
    fn from(x: Justice) -> Sigil { Sigil::Justice(x) }
}
impl From<KarkaSlaying> for Sigil {
    fn from(x: KarkaSlaying) -> Sigil { Sigil::KarkaSlaying(x) }
}
impl From<Leeching> for Sigil {
    fn from(x: Leeching) -> Sigil { Sigil::Leeching(x) }
}
impl From<Life> for Sigil {
    fn from(x: Life) -> Sigil { Sigil::Life(x) }
}
impl From<Luck> for Sigil {
    fn from(x: Luck) -> Sigil { Sigil::Luck(x) }
}
impl From<MadScientists> for Sigil {
    fn from(x: MadScientists) -> Sigil { Sigil::MadScientists(x) }
}
impl From<Malice> for Sigil {
    fn from(x: Malice) -> Sigil { Sigil::Malice(x) }
}
impl From<Mischief> for Sigil {
    fn from(x: Mischief) -> Sigil { Sigil::Mischief(x) }
}
impl From<Momentum> for Sigil {
    fn from(x: Momentum) -> Sigil { Sigil::Momentum(x) }
}
impl From<Night> for Sigil {
    fn from(x: Night) -> Sigil { Sigil::Night(x) }
}
impl From<Nullification> for Sigil {
    fn from(x: Nullification) -> Sigil { Sigil::Nullification(x) }
}
impl From<OgreSlaying> for Sigil {
    fn from(x: OgreSlaying) -> Sigil { Sigil::OgreSlaying(x) }
}
impl From<Paralyzation> for Sigil {
    fn from(x: Paralyzation) -> Sigil { Sigil::Paralyzation(x) }
}
impl From<Perception> for Sigil {
    fn from(x: Perception) -> Sigil { Sigil::Perception(x) }
}
impl From<Peril> for Sigil {
    fn from(x: Peril) -> Sigil { Sigil::Peril(x) }
}
impl From<Purity> for Sigil {
    fn from(x: Purity) -> Sigil { Sigil::Purity(x) }
}
impl From<Rage> for Sigil {
    fn from(x: Rage) -> Sigil { Sigil::Rage(x) }
}
impl From<Rending> for Sigil {
    fn from(x: Rending) -> Sigil { Sigil::Rending(x) }
}
impl From<Renewal> for Sigil {
    fn from(x: Renewal) -> Sigil { Sigil::Renewal(x) }
}
impl From<Restoration> for Sigil {
    fn from(x: Restoration) -> Sigil { Sigil::Restoration(x) }
}
impl From<Ruthlessness> for Sigil {
    fn from(x: Ruthlessness) -> Sigil { Sigil::Ruthlessness(x) }
}
impl From<SerpentSlaying> for Sigil {
    fn from(x: SerpentSlaying) -> Sigil { Sigil::SerpentSlaying(x) }
}
impl From<Severance> for Sigil {
    fn from(x: Severance) -> Sigil { Sigil::Severance(x) }
}
impl From<Smoldering> for Sigil {
    fn from(x: Smoldering) -> Sigil { Sigil::Smoldering(x) }
}
impl From<Smothering> for Sigil {
    fn from(x: Smothering) -> Sigil { Sigil::Smothering(x) }
}
impl From<Sorrow> for Sigil {
    fn from(x: Sorrow) -> Sigil { Sigil::Sorrow(x) }
}
impl From<Speed> for Sigil {
    fn from(x: Speed) -> Sigil { Sigil::Speed(x) }
}
impl From<Stamina> for Sigil {
    fn from(x: Stamina) -> Sigil { Sigil::Stamina(x) }
}
impl From<Stars> for Sigil {
    fn from(x: Stars) -> Sigil { Sigil::Stars(x) }
}
impl From<Strength> for Sigil {
    fn from(x: Strength) -> Sigil { Sigil::Strength(x) }
}
impl From<Torment> for Sigil {
    fn from(x: Torment) -> Sigil { Sigil::Torment(x) }
}
impl From<Transference> for Sigil {
    fn from(x: Transference) -> Sigil { Sigil::Transference(x) }
}
impl From<UndeadSlaying> for Sigil {
    fn from(x: UndeadSlaying) -> Sigil { Sigil::UndeadSlaying(x) }
}
impl From<Venom> for Sigil {
    fn from(x: Venom) -> Sigil { Sigil::Venom(x) }
}
impl From<Vision> for Sigil {
    fn from(x: Vision) -> Sigil { Sigil::Vision(x) }
}
impl From<Water> for Sigil {
    fn from(x: Water) -> Sigil { Sigil::Water(x) }
}
impl From<Wrath> for Sigil {
    fn from(x: Wrath) -> Sigil { Sigil::Wrath(x) }
}
impl Vary for Sigil {
    fn num_fields(&self) -> usize { 1 }
    fn num_field_values(&self, _field: usize) -> u16 { 82 }
    fn get_field(&self, _field: usize) -> u16 {
        self.index() as u16
    }
    fn set_field(&mut self, _field: usize, value: u16) {
        *self = Sigil::from_index(value as usize);
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
pub enum KnownSigil {
    NoSigil(NoSigil),
    Agony(Agony),
    Bursting(Bursting),
    CentaurSlaying(CentaurSlaying),
    Concentration(Concentration),
    Demons(Demons),
    Force(Force),
    Malice(Malice),
    Smoldering(Smoldering),
    Venom(Venom),
}
impl Default for KnownSigil {
    fn default() -> KnownSigil { KnownSigil::NoSigil(NoSigil) }
}
impl KnownSigil {
    pub const COUNT: usize = 10;
    pub fn index(self) -> usize {
        match self {
            KnownSigil::NoSigil(NoSigil) => 0,
            KnownSigil::Agony(Agony) => 1,
            KnownSigil::Bursting(Bursting) => 2,
            KnownSigil::CentaurSlaying(CentaurSlaying) => 3,
            KnownSigil::Concentration(Concentration) => 4,
            KnownSigil::Demons(Demons) => 5,
            KnownSigil::Force(Force) => 6,
            KnownSigil::Malice(Malice) => 7,
            KnownSigil::Smoldering(Smoldering) => 8,
            KnownSigil::Venom(Venom) => 9,
        }
    }
    pub fn from_index(i: usize) -> KnownSigil {
        match i {
            0 => KnownSigil::NoSigil(NoSigil),
            1 => KnownSigil::Agony(Agony),
            2 => KnownSigil::Bursting(Bursting),
            3 => KnownSigil::CentaurSlaying(CentaurSlaying),
            4 => KnownSigil::Concentration(Concentration),
            5 => KnownSigil::Demons(Demons),
            6 => KnownSigil::Force(Force),
            7 => KnownSigil::Malice(Malice),
            8 => KnownSigil::Smoldering(Smoldering),
            9 => KnownSigil::Venom(Venom),
            _ => panic!("index {} out of range for KnownSigil", i),
        }
    }
    pub fn iter() -> impl Iterator<Item = KnownSigil> {
        (0 .. KnownSigil::COUNT).map(KnownSigil::from_index)
    }
    pub fn display_name(self) -> &'static str {
        match self {
            KnownSigil::NoSigil(x) => x.display_name(),
            KnownSigil::Agony(x) => x.display_name(),
            KnownSigil::Bursting(x) => x.display_name(),
            KnownSigil::CentaurSlaying(x) => x.display_name(),
            KnownSigil::Concentration(x) => x.display_name(),
            KnownSigil::Demons(x) => x.display_name(),
            KnownSigil::Force(x) => x.display_name(),
            KnownSigil::Malice(x) => x.display_name(),
            KnownSigil::Smoldering(x) => x.display_name(),
            KnownSigil::Venom(x) => x.display_name(),
        }
    }
}
impl Effect for KnownSigil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            KnownSigil::NoSigil(x) => x.add_permanent(s, m),
            KnownSigil::Agony(x) => x.add_permanent(s, m),
            KnownSigil::Bursting(x) => x.add_permanent(s, m),
            KnownSigil::CentaurSlaying(x) => x.add_permanent(s, m),
            KnownSigil::Concentration(x) => x.add_permanent(s, m),
            KnownSigil::Demons(x) => x.add_permanent(s, m),
            KnownSigil::Force(x) => x.add_permanent(s, m),
            KnownSigil::Malice(x) => x.add_permanent(s, m),
            KnownSigil::Smoldering(x) => x.add_permanent(s, m),
            KnownSigil::Venom(x) => x.add_permanent(s, m),
        }
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            KnownSigil::NoSigil(x) => x.distribute(s, m),
            KnownSigil::Agony(x) => x.distribute(s, m),
            KnownSigil::Bursting(x) => x.distribute(s, m),
            KnownSigil::CentaurSlaying(x) => x.distribute(s, m),
            KnownSigil::Concentration(x) => x.distribute(s, m),
            KnownSigil::Demons(x) => x.distribute(s, m),
            KnownSigil::Force(x) => x.distribute(s, m),
            KnownSigil::Malice(x) => x.distribute(s, m),
            KnownSigil::Smoldering(x) => x.distribute(s, m),
            KnownSigil::Venom(x) => x.distribute(s, m),
        }
    }
    fn add_temporary(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            KnownSigil::NoSigil(x) => x.add_temporary(s, m),
            KnownSigil::Agony(x) => x.add_temporary(s, m),
            KnownSigil::Bursting(x) => x.add_temporary(s, m),
            KnownSigil::CentaurSlaying(x) => x.add_temporary(s, m),
            KnownSigil::Concentration(x) => x.add_temporary(s, m),
            KnownSigil::Demons(x) => x.add_temporary(s, m),
            KnownSigil::Force(x) => x.add_temporary(s, m),
            KnownSigil::Malice(x) => x.add_temporary(s, m),
            KnownSigil::Smoldering(x) => x.add_temporary(s, m),
            KnownSigil::Venom(x) => x.add_temporary(s, m),
        }
    }
}
impl From<NoSigil> for KnownSigil {
    fn from(x: NoSigil) -> KnownSigil { KnownSigil::NoSigil(x) }
}
impl From<Agony> for KnownSigil {
    fn from(x: Agony) -> KnownSigil { KnownSigil::Agony(x) }
}
impl From<Bursting> for KnownSigil {
    fn from(x: Bursting) -> KnownSigil { KnownSigil::Bursting(x) }
}
impl From<CentaurSlaying> for KnownSigil {
    fn from(x: CentaurSlaying) -> KnownSigil { KnownSigil::CentaurSlaying(x) }
}
impl From<Concentration> for KnownSigil {
    fn from(x: Concentration) -> KnownSigil { KnownSigil::Concentration(x) }
}
impl From<Demons> for KnownSigil {
    fn from(x: Demons) -> KnownSigil { KnownSigil::Demons(x) }
}
impl From<Force> for KnownSigil {
    fn from(x: Force) -> KnownSigil { KnownSigil::Force(x) }
}
impl From<Malice> for KnownSigil {
    fn from(x: Malice) -> KnownSigil { KnownSigil::Malice(x) }
}
impl From<Smoldering> for KnownSigil {
    fn from(x: Smoldering) -> KnownSigil { KnownSigil::Smoldering(x) }
}
impl From<Venom> for KnownSigil {
    fn from(x: Venom) -> KnownSigil { KnownSigil::Venom(x) }
}
impl Vary for KnownSigil {
    fn num_fields(&self) -> usize { 1 }
    fn num_field_values(&self, _field: usize) -> u16 { 10 }
    fn get_field(&self, _field: usize) -> u16 {
        self.index() as u16
    }
    fn set_field(&mut self, _field: usize, value: u16) {
        *self = KnownSigil::from_index(value as usize);
    }
}

impl Sigil {
    pub fn is_known(self) -> bool {
        match self {
            Sigil::NoSigil(_) => true,
            Sigil::Agony(_) => true,
            Sigil::Bursting(_) => true,
            Sigil::CentaurSlaying(_) => true,
            Sigil::Concentration(_) => true,
            Sigil::Demons(_) => true,
            Sigil::Force(_) => true,
            Sigil::Malice(_) => true,
            Sigil::Smoldering(_) => true,
            Sigil::Venom(_) => true,
            _ => false,
        }
    }
    pub fn as_known(self) -> KnownSigil {
        match self {
            Sigil::NoSigil(NoSigil) => KnownSigil::NoSigil(NoSigil),
            Sigil::Absorption(Absorption) => KnownSigil::NoSigil(NoSigil),
            Sigil::Accuracy(Accuracy) => KnownSigil::NoSigil(NoSigil),
            Sigil::Agility(Agility) => KnownSigil::NoSigil(NoSigil),
            Sigil::Agony(Agony) => KnownSigil::Agony(Agony),
            Sigil::Air(Air) => KnownSigil::NoSigil(NoSigil),
            Sigil::Battle(Battle) => KnownSigil::NoSigil(NoSigil),
            Sigil::Benevolence(Benevolence) => KnownSigil::NoSigil(NoSigil),
            Sigil::Blight(Blight) => KnownSigil::NoSigil(NoSigil),
            Sigil::Blood(Blood) => KnownSigil::NoSigil(NoSigil),
            Sigil::Bloodlust(Bloodlust) => KnownSigil::NoSigil(NoSigil),
            Sigil::Bounty(Bounty) => KnownSigil::NoSigil(NoSigil),
            Sigil::Bursting(Bursting) => KnownSigil::Bursting(Bursting),
            Sigil::Celerity(Celerity) => KnownSigil::NoSigil(NoSigil),
            Sigil::CentaurSlaying(CentaurSlaying) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Chilling(Chilling) => KnownSigil::NoSigil(NoSigil),
            Sigil::Cleansing(Cleansing) => KnownSigil::NoSigil(NoSigil),
            Sigil::Concentration(Concentration) => KnownSigil::Concentration(Concentration),
            Sigil::Corruption(Corruption) => KnownSigil::NoSigil(NoSigil),
            Sigil::Cruelty(Cruelty) => KnownSigil::NoSigil(NoSigil),
            Sigil::Debility(Debility) => KnownSigil::NoSigil(NoSigil),
            Sigil::DemonSlaying(DemonSlaying) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Demons(Demons) => KnownSigil::Demons(Demons),
            Sigil::DestroyerSlaying(DestroyerSlaying) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Doom(Doom) => KnownSigil::NoSigil(NoSigil),
            Sigil::Draining(Draining) => KnownSigil::NoSigil(NoSigil),
            Sigil::Dreams(Dreams) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Earth(Earth) => KnownSigil::NoSigil(NoSigil),
            Sigil::ElementalSlaying(ElementalSlaying) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Energy(Energy) => KnownSigil::NoSigil(NoSigil),
            Sigil::Fire(Fire) => KnownSigil::NoSigil(NoSigil),
            Sigil::Force(Force) => KnownSigil::Force(Force),
            Sigil::Frailty(Frailty) => KnownSigil::NoSigil(NoSigil),
            Sigil::Frenzy(Frenzy) => KnownSigil::NoSigil(NoSigil),
            Sigil::Generosity(Generosity) => KnownSigil::NoSigil(NoSigil),
            Sigil::Geomancy(Geomancy) => KnownSigil::NoSigil(NoSigil),
            Sigil::GhostSlaying(GhostSlaying) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::GrawlSlaying(GrawlSlaying) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Hobbling(Hobbling) => KnownSigil::NoSigil(NoSigil),
            Sigil::HologramSlaying(HologramSlaying) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Hydromancy(Hydromancy) => KnownSigil::NoSigil(NoSigil),
            Sigil::Ice(Ice) => KnownSigil::NoSigil(NoSigil),
            Sigil::IcebroodSlaying(IcebroodSlaying) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Impact(Impact) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Incapacitation(Incapacitation) => KnownSigil::NoSigil(NoSigil),
            Sigil::Justice(Justice) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::KarkaSlaying(KarkaSlaying) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Leeching(Leeching) => KnownSigil::NoSigil(NoSigil),
            Sigil::Life(Life) => KnownSigil::NoSigil(NoSigil),
            Sigil::Luck(Luck) => KnownSigil::NoSigil(NoSigil),
            Sigil::MadScientists(MadScientists) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Malice(Malice) => KnownSigil::Malice(Malice),
            Sigil::Mischief(Mischief) => KnownSigil::NoSigil(NoSigil),
            Sigil::Momentum(Momentum) => KnownSigil::NoSigil(NoSigil),
            Sigil::Night(Night) => KnownSigil::NoSigil(NoSigil),
            Sigil::Nullification(Nullification) => KnownSigil::NoSigil(NoSigil),
            Sigil::OgreSlaying(OgreSlaying) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Paralyzation(Paralyzation) => KnownSigil::NoSigil(NoSigil),
            Sigil::Perception(Perception) => KnownSigil::NoSigil(NoSigil),
            Sigil::Peril(Peril) => KnownSigil::NoSigil(NoSigil),
            Sigil::Purity(Purity) => KnownSigil::NoSigil(NoSigil),
            Sigil::Rage(Rage) => KnownSigil::NoSigil(NoSigil),
            Sigil::Rending(Rending) => KnownSigil::NoSigil(NoSigil),
            Sigil::Renewal(Renewal) => KnownSigil::NoSigil(NoSigil),
            Sigil::Restoration(Restoration) => KnownSigil::NoSigil(NoSigil),
            Sigil::Ruthlessness(Ruthlessness) => KnownSigil::NoSigil(NoSigil),
            Sigil::SerpentSlaying(SerpentSlaying) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Severance(Severance) => KnownSigil::NoSigil(NoSigil),
            Sigil::Smoldering(Smoldering) => KnownSigil::Smoldering(Smoldering),
            Sigil::Smothering(Smothering) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Sorrow(Sorrow) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Speed(Speed) => KnownSigil::NoSigil(NoSigil),
            Sigil::Stamina(Stamina) => KnownSigil::NoSigil(NoSigil),
            Sigil::Stars(Stars) => KnownSigil::NoSigil(NoSigil),
            Sigil::Strength(Strength) => KnownSigil::NoSigil(NoSigil),
            Sigil::Torment(Torment) => KnownSigil::NoSigil(NoSigil),
            Sigil::Transference(Transference) => KnownSigil::NoSigil(NoSigil),
            Sigil::UndeadSlaying(UndeadSlaying) => KnownSigil::CentaurSlaying(CentaurSlaying),
            Sigil::Venom(Venom) => KnownSigil::Venom(Venom),
            Sigil::Vision(Vision) => KnownSigil::NoSigil(NoSigil),
            Sigil::Water(Water) => KnownSigil::NoSigil(NoSigil),
            Sigil::Wrath(Wrath) => KnownSigil::CentaurSlaying(CentaurSlaying),
        }
    }
}
impl NoSigil {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Absorption {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Accuracy {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Agility {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Agony {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::Agony(Agony)
    }
}
impl Air {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Battle {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Benevolence {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Blight {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Blood {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Bloodlust {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Bounty {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Bursting {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::Bursting(Bursting)
    }
}
impl Celerity {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl CentaurSlaying {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Chilling {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Cleansing {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Concentration {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::Concentration(Concentration)
    }
}
impl Corruption {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Cruelty {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Debility {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl DemonSlaying {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Demons {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::Demons(Demons)
    }
}
impl DestroyerSlaying {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Doom {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Draining {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Dreams {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Earth {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl ElementalSlaying {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Energy {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Fire {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Force {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::Force(Force)
    }
}
impl Frailty {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Frenzy {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Generosity {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Geomancy {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl GhostSlaying {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl GrawlSlaying {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Hobbling {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl HologramSlaying {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Hydromancy {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Ice {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl IcebroodSlaying {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Impact {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Incapacitation {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Justice {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl KarkaSlaying {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Leeching {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Life {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Luck {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl MadScientists {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Malice {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::Malice(Malice)
    }
}
impl Mischief {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Momentum {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Night {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Nullification {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl OgreSlaying {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Paralyzation {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Perception {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Peril {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Purity {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Rage {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Rending {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Renewal {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Restoration {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Ruthlessness {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl SerpentSlaying {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Severance {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Smoldering {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::Smoldering(Smoldering)
    }
}
impl Smothering {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Sorrow {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Speed {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Stamina {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Stars {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Strength {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Torment {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Transference {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl UndeadSlaying {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl Venom {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::Venom(Venom)
    }
}
impl Vision {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Water {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::NoSigil(NoSigil)
    }
}
impl Wrath {
    pub fn as_known(self) -> KnownSigil {
        KnownSigil::CentaurSlaying(CentaurSlaying)
    }
}
impl From<KnownSigil> for Sigil {
    fn from(x: KnownSigil) -> Sigil {
        match x {
            KnownSigil::NoSigil(y) => Sigil::NoSigil(y),
            KnownSigil::Agony(y) => Sigil::Agony(y),
            KnownSigil::Bursting(y) => Sigil::Bursting(y),
            KnownSigil::CentaurSlaying(y) => Sigil::CentaurSlaying(y),
            KnownSigil::Concentration(y) => Sigil::Concentration(y),
            KnownSigil::Demons(y) => Sigil::Demons(y),
            KnownSigil::Force(y) => Sigil::Force(y),
            KnownSigil::Malice(y) => Sigil::Malice(y),
            KnownSigil::Smoldering(y) => Sigil::Smoldering(y),
            KnownSigil::Venom(y) => Sigil::Venom(y),
        }
    }
}

// END GENERATED CODE
