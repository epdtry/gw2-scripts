use crate::effect::Effect;
use crate::stats::{Stats, Modifiers};

// BEGIN GENERATED CODE
// Generated by gen_gear_tables.py for GW2 build 142239 at 2023-03-06T03:41:52

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Absorption;
#[allow(unused_variables)]
impl Effect for Absorption {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'steal 3 boons when interrupting a foe'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Accuracy;
#[allow(unused_variables)]
impl Effect for Accuracy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% critical chance'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Agility;
#[allow(unused_variables)]
impl Effect for Agility {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain 5 seconds of swiftness and 1 second of quickness when swapping to this weapon in combat. (cooldown: 9 seconds)'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Agony;
#[allow(unused_variables)]
impl Effect for Agony {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.bleed += 20.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Air;
#[allow(unused_variables)]
impl Effect for Air {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'unleash a lightning strike upon critically hitting a foe. <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Battle;
#[allow(unused_variables)]
impl Effect for Battle {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain 5 stacks of might for 12 seconds when swapping to this weapon in combat. (cooldown: 9 seconds)'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Benevolence;
#[allow(unused_variables)]
impl Effect for Benevolence {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain a charge that grants a 0.5% increase in healing to other allies each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks'
        // unknown effect: 'ends on down.)</c><br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Blight;
#[allow(unused_variables)]
impl Effect for Blight {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'inflict nearby enemies with 2 stacks of poison for 4 seconds upon landing a critical hit. <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Blood;
#[allow(unused_variables)]
impl Effect for Blood {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: "steal a foe's health upon landing a critical hit. <br>"
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Bloodlust;
#[allow(unused_variables)]
impl Effect for Bloodlust {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain a charge of +10 power each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks'
        // unknown effect: 'ends on down.)</c> <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Bounty;
#[allow(unused_variables)]
impl Effect for Bounty {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain a charge of +9 concentration each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks'
        // unknown effect: 'ends on down.)</c> <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Bursting;
#[allow(unused_variables)]
impl Effect for Bursting {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_damage += 5.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Celerity;
#[allow(unused_variables)]
impl Effect for Celerity {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain quickness for 5 seconds after disabling a foe. (cooldown: 20 seconds)'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CentaurSlaying;
#[allow(unused_variables)]
impl Effect for CentaurSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. centaurs'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Chilling;
#[allow(unused_variables)]
impl Effect for Chilling {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        //m.condition_duration.<chill> += 20.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Cleansing;
#[allow(unused_variables)]
impl Effect for Cleansing {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'remove 3 conditions when swapping to this weapon in combat'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Concentration;
#[allow(unused_variables)]
impl Effect for Concentration {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration += 10.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Corruption;
#[allow(unused_variables)]
impl Effect for Corruption {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain a charge of +10 condition damage each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks'
        // unknown effect: 'ends on down.)</c> <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Cruelty;
#[allow(unused_variables)]
impl Effect for Cruelty {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain a charge of +10 ferocity each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks'
        // unknown effect: 'ends on down.)</c> <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Debility;
#[allow(unused_variables)]
impl Effect for Debility {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        //m.condition_duration.<weakness> += 20.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DemonSlaying;
#[allow(unused_variables)]
impl Effect for DemonSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. demons'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Demons;
#[allow(unused_variables)]
impl Effect for Demons {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.torment += 20.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DestroyerSlaying;
#[allow(unused_variables)]
impl Effect for DestroyerSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. destroyers'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Doom;
#[allow(unused_variables)]
impl Effect for Doom {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'your next attack will inflict 3 stacks of poison for 8 seconds after swapping to this weapon in combat. <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Draining;
#[allow(unused_variables)]
impl Effect for Draining {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'steal life when interrupting an enemy'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Dreams;
#[allow(unused_variables)]
impl Effect for Dreams {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. nightmare court'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Earth;
#[allow(unused_variables)]
impl Effect for Earth {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'inflict bleeding for 6 seconds upon critically hitting a foe. <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ElementalSlaying;
#[allow(unused_variables)]
impl Effect for ElementalSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. elementals'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Energy;
#[allow(unused_variables)]
impl Effect for Energy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain 50% of your endurance when you swap to this weapon while in combat'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Fire;
#[allow(unused_variables)]
impl Effect for Fire {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'trigger a flame blast with a 240 radius upon critically hitting a foe. <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Force;
#[allow(unused_variables)]
impl Effect for Force {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.strike_damage += 5.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Frailty;
#[allow(unused_variables)]
impl Effect for Frailty {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'inflict 2 stacks of vulnerability for 8 seconds after striking a foe from behind or the flank'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Frenzy;
#[allow(unused_variables)]
impl Effect for Frenzy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'recharge all equipped skills by 2 seconds upon killing an enemy'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Generosity;
#[allow(unused_variables)]
impl Effect for Generosity {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'transfer a condition upon critically hitting a foe. <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Geomancy;
#[allow(unused_variables)]
impl Effect for Geomancy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'inflict nearby foes with bleeding for 8 seconds after swapping to this weapon in combat. <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct GhostSlaying;
#[allow(unused_variables)]
impl Effect for GhostSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. ghosts'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct GrawlSlaying;
#[allow(unused_variables)]
impl Effect for GrawlSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. grawl'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Hobbling;
#[allow(unused_variables)]
impl Effect for Hobbling {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        //m.condition_duration.<cripple> += 20.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HologramSlaying;
#[allow(unused_variables)]
impl Effect for HologramSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+17% strike damage vs. dragon bash holograms'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Hydromancy;
#[allow(unused_variables)]
impl Effect for Hydromancy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'damage nearby foes and chill them for 2 seconds when you swap to this weapon while in combat.<br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Ice;
#[allow(unused_variables)]
impl Effect for Ice {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'chill a foe for 2 seconds after striking from its flank'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct IcebroodSlaying;
#[allow(unused_variables)]
impl Effect for IcebroodSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. icebrood'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Impact;
#[allow(unused_variables)]
impl Effect for Impact {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. stunned or knocked-down foes'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Incapacitation;
#[allow(unused_variables)]
impl Effect for Incapacitation {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'cripple a foe for 2 seconds after striking from its flank'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Justice;
#[allow(unused_variables)]
impl Effect for Justice {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. outlaws'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct KarkaSlaying;
#[allow(unused_variables)]
impl Effect for KarkaSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. karka'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Leeching;
#[allow(unused_variables)]
impl Effect for Leeching {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'your next attack after swapping to this weapon while in combat steals some health'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Life;
#[allow(unused_variables)]
impl Effect for Life {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain a charge of +10 healing each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks'
        // unknown effect: 'ends on down.)</c> <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Luck;
#[allow(unused_variables)]
impl Effect for Luck {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '75% chance to gain a random boon on killing an enemy'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MadScientists;
#[allow(unused_variables)]
impl Effect for MadScientists {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. inquest'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Malice;
#[allow(unused_variables)]
impl Effect for Malice {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration += 10.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Mischief;
#[allow(unused_variables)]
impl Effect for Mischief {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'launch up to 4 blinding snowballs at foes in front of you when you swap to this weapon in combat.<br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Momentum;
#[allow(unused_variables)]
impl Effect for Momentum {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain a charge of +5 toughness each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks'
        // unknown effect: 'ends on down.)</c> <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Nullification;
#[allow(unused_variables)]
impl Effect for Nullification {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'remove a boon from a foe after striking from its flank. <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OgreSlaying;
#[allow(unused_variables)]
impl Effect for OgreSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. ogres'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Paralyzation;
#[allow(unused_variables)]
impl Effect for Paralyzation {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        //m.condition_duration.<stun> += 30.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Perception;
#[allow(unused_variables)]
impl Effect for Perception {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain a charge of +10 precision each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks'
        // unknown effect: 'ends on down.)</c> <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Peril;
#[allow(unused_variables)]
impl Effect for Peril {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        //m.condition_duration.<vulnerability> += 20.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Purity;
#[allow(unused_variables)]
impl Effect for Purity {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'remove a condition after striking a foe from its flank. <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Rage;
#[allow(unused_variables)]
impl Effect for Rage {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain quickness for 3 seconds upon critically hitting a foe. <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Rending;
#[allow(unused_variables)]
impl Effect for Rending {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'inflict 5 stacks of vulnerability for 10 seconds when interrupting a foe'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Renewal;
#[allow(unused_variables)]
impl Effect for Renewal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'heal nearby allies on weapon swap (360 radius) <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Restoration;
#[allow(unused_variables)]
impl Effect for Restoration {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain health when interrupting a foe'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Ruthlessness;
#[allow(unused_variables)]
impl Effect for Ruthlessness {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain 5 stacks of might for 10 seconds when interrupting a foe'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SerpentSlaying;
#[allow(unused_variables)]
impl Effect for SerpentSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. krait'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Severance;
#[allow(unused_variables)]
impl Effect for Severance {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'upon interrupting an enemy, gain up to 250 precision and ferocity for 4 seconds, depending on level'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Smoldering;
#[allow(unused_variables)]
impl Effect for Smoldering {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.burn += 20.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Smothering;
#[allow(unused_variables)]
impl Effect for Smothering {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. flame legion'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Sorrow;
#[allow(unused_variables)]
impl Effect for Sorrow {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. dredge'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Speed;
#[allow(unused_variables)]
impl Effect for Speed {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain swiftness (20 seconds) on killing a foe'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Stamina;
#[allow(unused_variables)]
impl Effect for Stamina {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'your endurance is refilled each time you kill a foe'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Strength;
#[allow(unused_variables)]
impl Effect for Strength {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain might for 10 seconds upon critically hitting a foe. <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Torment;
#[allow(unused_variables)]
impl Effect for Torment {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'inflict 2 stacks of torment for 5 seconds to enemies around your target upon landing a critical hit. <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Transference;
#[allow(unused_variables)]
impl Effect for Transference {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'healing to other allies is increased by 10%'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct UndeadSlaying;
#[allow(unused_variables)]
impl Effect for UndeadSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. undead'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Venom;
#[allow(unused_variables)]
impl Effect for Venom {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.poison += 20.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Vision;
#[allow(unused_variables)]
impl Effect for Vision {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'critically strike an enemy for 3 seconds after swapping to this weapon in combat'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Water;
#[allow(unused_variables)]
impl Effect for Water {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'heal allies within a 360 radius of your target upon landing a critical hit. <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Wrath;
#[allow(unused_variables)]
impl Effect for Wrath {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+7% strike damage vs. sons of svanir'
        m.strike_damage += 3.0;
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Night;
#[allow(unused_variables)]
impl Effect for Night {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'outgoing damage is increased by 3% with an additional 7% at night'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Stars;
#[allow(unused_variables)]
impl Effect for Stars {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain a charge of +2 to all stats each time you kill a foe, five charges if you kill an enemy player. <c=@reminder>(max 25 stacks'
        // unknown effect: 'ends on down.)</c> <br>'
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
pub enum Sigil {
    Absorption(Absorption),
    Accuracy(Accuracy),
    Agility(Agility),
    Agony(Agony),
    Air(Air),
    Battle(Battle),
    Benevolence(Benevolence),
    Blight(Blight),
    Blood(Blood),
    Bloodlust(Bloodlust),
    Bounty(Bounty),
    Bursting(Bursting),
    Celerity(Celerity),
    CentaurSlaying(CentaurSlaying),
    Chilling(Chilling),
    Cleansing(Cleansing),
    Concentration(Concentration),
    Corruption(Corruption),
    Cruelty(Cruelty),
    Debility(Debility),
    DemonSlaying(DemonSlaying),
    Demons(Demons),
    DestroyerSlaying(DestroyerSlaying),
    Doom(Doom),
    Draining(Draining),
    Dreams(Dreams),
    Earth(Earth),
    ElementalSlaying(ElementalSlaying),
    Energy(Energy),
    Fire(Fire),
    Force(Force),
    Frailty(Frailty),
    Frenzy(Frenzy),
    Generosity(Generosity),
    Geomancy(Geomancy),
    GhostSlaying(GhostSlaying),
    GrawlSlaying(GrawlSlaying),
    Hobbling(Hobbling),
    HologramSlaying(HologramSlaying),
    Hydromancy(Hydromancy),
    Ice(Ice),
    IcebroodSlaying(IcebroodSlaying),
    Impact(Impact),
    Incapacitation(Incapacitation),
    Justice(Justice),
    KarkaSlaying(KarkaSlaying),
    Leeching(Leeching),
    Life(Life),
    Luck(Luck),
    MadScientists(MadScientists),
    Malice(Malice),
    Mischief(Mischief),
    Momentum(Momentum),
    Nullification(Nullification),
    OgreSlaying(OgreSlaying),
    Paralyzation(Paralyzation),
    Perception(Perception),
    Peril(Peril),
    Purity(Purity),
    Rage(Rage),
    Rending(Rending),
    Renewal(Renewal),
    Restoration(Restoration),
    Ruthlessness(Ruthlessness),
    SerpentSlaying(SerpentSlaying),
    Severance(Severance),
    Smoldering(Smoldering),
    Smothering(Smothering),
    Sorrow(Sorrow),
    Speed(Speed),
    Stamina(Stamina),
    Strength(Strength),
    Torment(Torment),
    Transference(Transference),
    UndeadSlaying(UndeadSlaying),
    Venom(Venom),
    Vision(Vision),
    Water(Water),
    Wrath(Wrath),
    Night(Night),
    Stars(Stars),
}
impl Effect for Sigil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Sigil::Absorption(x) => x.add_permanent(s, m),
            Sigil::Accuracy(x) => x.add_permanent(s, m),
            Sigil::Agility(x) => x.add_permanent(s, m),
            Sigil::Agony(x) => x.add_permanent(s, m),
            Sigil::Air(x) => x.add_permanent(s, m),
            Sigil::Battle(x) => x.add_permanent(s, m),
            Sigil::Benevolence(x) => x.add_permanent(s, m),
            Sigil::Blight(x) => x.add_permanent(s, m),
            Sigil::Blood(x) => x.add_permanent(s, m),
            Sigil::Bloodlust(x) => x.add_permanent(s, m),
            Sigil::Bounty(x) => x.add_permanent(s, m),
            Sigil::Bursting(x) => x.add_permanent(s, m),
            Sigil::Celerity(x) => x.add_permanent(s, m),
            Sigil::CentaurSlaying(x) => x.add_permanent(s, m),
            Sigil::Chilling(x) => x.add_permanent(s, m),
            Sigil::Cleansing(x) => x.add_permanent(s, m),
            Sigil::Concentration(x) => x.add_permanent(s, m),
            Sigil::Corruption(x) => x.add_permanent(s, m),
            Sigil::Cruelty(x) => x.add_permanent(s, m),
            Sigil::Debility(x) => x.add_permanent(s, m),
            Sigil::DemonSlaying(x) => x.add_permanent(s, m),
            Sigil::Demons(x) => x.add_permanent(s, m),
            Sigil::DestroyerSlaying(x) => x.add_permanent(s, m),
            Sigil::Doom(x) => x.add_permanent(s, m),
            Sigil::Draining(x) => x.add_permanent(s, m),
            Sigil::Dreams(x) => x.add_permanent(s, m),
            Sigil::Earth(x) => x.add_permanent(s, m),
            Sigil::ElementalSlaying(x) => x.add_permanent(s, m),
            Sigil::Energy(x) => x.add_permanent(s, m),
            Sigil::Fire(x) => x.add_permanent(s, m),
            Sigil::Force(x) => x.add_permanent(s, m),
            Sigil::Frailty(x) => x.add_permanent(s, m),
            Sigil::Frenzy(x) => x.add_permanent(s, m),
            Sigil::Generosity(x) => x.add_permanent(s, m),
            Sigil::Geomancy(x) => x.add_permanent(s, m),
            Sigil::GhostSlaying(x) => x.add_permanent(s, m),
            Sigil::GrawlSlaying(x) => x.add_permanent(s, m),
            Sigil::Hobbling(x) => x.add_permanent(s, m),
            Sigil::HologramSlaying(x) => x.add_permanent(s, m),
            Sigil::Hydromancy(x) => x.add_permanent(s, m),
            Sigil::Ice(x) => x.add_permanent(s, m),
            Sigil::IcebroodSlaying(x) => x.add_permanent(s, m),
            Sigil::Impact(x) => x.add_permanent(s, m),
            Sigil::Incapacitation(x) => x.add_permanent(s, m),
            Sigil::Justice(x) => x.add_permanent(s, m),
            Sigil::KarkaSlaying(x) => x.add_permanent(s, m),
            Sigil::Leeching(x) => x.add_permanent(s, m),
            Sigil::Life(x) => x.add_permanent(s, m),
            Sigil::Luck(x) => x.add_permanent(s, m),
            Sigil::MadScientists(x) => x.add_permanent(s, m),
            Sigil::Malice(x) => x.add_permanent(s, m),
            Sigil::Mischief(x) => x.add_permanent(s, m),
            Sigil::Momentum(x) => x.add_permanent(s, m),
            Sigil::Nullification(x) => x.add_permanent(s, m),
            Sigil::OgreSlaying(x) => x.add_permanent(s, m),
            Sigil::Paralyzation(x) => x.add_permanent(s, m),
            Sigil::Perception(x) => x.add_permanent(s, m),
            Sigil::Peril(x) => x.add_permanent(s, m),
            Sigil::Purity(x) => x.add_permanent(s, m),
            Sigil::Rage(x) => x.add_permanent(s, m),
            Sigil::Rending(x) => x.add_permanent(s, m),
            Sigil::Renewal(x) => x.add_permanent(s, m),
            Sigil::Restoration(x) => x.add_permanent(s, m),
            Sigil::Ruthlessness(x) => x.add_permanent(s, m),
            Sigil::SerpentSlaying(x) => x.add_permanent(s, m),
            Sigil::Severance(x) => x.add_permanent(s, m),
            Sigil::Smoldering(x) => x.add_permanent(s, m),
            Sigil::Smothering(x) => x.add_permanent(s, m),
            Sigil::Sorrow(x) => x.add_permanent(s, m),
            Sigil::Speed(x) => x.add_permanent(s, m),
            Sigil::Stamina(x) => x.add_permanent(s, m),
            Sigil::Strength(x) => x.add_permanent(s, m),
            Sigil::Torment(x) => x.add_permanent(s, m),
            Sigil::Transference(x) => x.add_permanent(s, m),
            Sigil::UndeadSlaying(x) => x.add_permanent(s, m),
            Sigil::Venom(x) => x.add_permanent(s, m),
            Sigil::Vision(x) => x.add_permanent(s, m),
            Sigil::Water(x) => x.add_permanent(s, m),
            Sigil::Wrath(x) => x.add_permanent(s, m),
            Sigil::Night(x) => x.add_permanent(s, m),
            Sigil::Stars(x) => x.add_permanent(s, m),
        }
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Sigil::Absorption(x) => x.distribute(s, m),
            Sigil::Accuracy(x) => x.distribute(s, m),
            Sigil::Agility(x) => x.distribute(s, m),
            Sigil::Agony(x) => x.distribute(s, m),
            Sigil::Air(x) => x.distribute(s, m),
            Sigil::Battle(x) => x.distribute(s, m),
            Sigil::Benevolence(x) => x.distribute(s, m),
            Sigil::Blight(x) => x.distribute(s, m),
            Sigil::Blood(x) => x.distribute(s, m),
            Sigil::Bloodlust(x) => x.distribute(s, m),
            Sigil::Bounty(x) => x.distribute(s, m),
            Sigil::Bursting(x) => x.distribute(s, m),
            Sigil::Celerity(x) => x.distribute(s, m),
            Sigil::CentaurSlaying(x) => x.distribute(s, m),
            Sigil::Chilling(x) => x.distribute(s, m),
            Sigil::Cleansing(x) => x.distribute(s, m),
            Sigil::Concentration(x) => x.distribute(s, m),
            Sigil::Corruption(x) => x.distribute(s, m),
            Sigil::Cruelty(x) => x.distribute(s, m),
            Sigil::Debility(x) => x.distribute(s, m),
            Sigil::DemonSlaying(x) => x.distribute(s, m),
            Sigil::Demons(x) => x.distribute(s, m),
            Sigil::DestroyerSlaying(x) => x.distribute(s, m),
            Sigil::Doom(x) => x.distribute(s, m),
            Sigil::Draining(x) => x.distribute(s, m),
            Sigil::Dreams(x) => x.distribute(s, m),
            Sigil::Earth(x) => x.distribute(s, m),
            Sigil::ElementalSlaying(x) => x.distribute(s, m),
            Sigil::Energy(x) => x.distribute(s, m),
            Sigil::Fire(x) => x.distribute(s, m),
            Sigil::Force(x) => x.distribute(s, m),
            Sigil::Frailty(x) => x.distribute(s, m),
            Sigil::Frenzy(x) => x.distribute(s, m),
            Sigil::Generosity(x) => x.distribute(s, m),
            Sigil::Geomancy(x) => x.distribute(s, m),
            Sigil::GhostSlaying(x) => x.distribute(s, m),
            Sigil::GrawlSlaying(x) => x.distribute(s, m),
            Sigil::Hobbling(x) => x.distribute(s, m),
            Sigil::HologramSlaying(x) => x.distribute(s, m),
            Sigil::Hydromancy(x) => x.distribute(s, m),
            Sigil::Ice(x) => x.distribute(s, m),
            Sigil::IcebroodSlaying(x) => x.distribute(s, m),
            Sigil::Impact(x) => x.distribute(s, m),
            Sigil::Incapacitation(x) => x.distribute(s, m),
            Sigil::Justice(x) => x.distribute(s, m),
            Sigil::KarkaSlaying(x) => x.distribute(s, m),
            Sigil::Leeching(x) => x.distribute(s, m),
            Sigil::Life(x) => x.distribute(s, m),
            Sigil::Luck(x) => x.distribute(s, m),
            Sigil::MadScientists(x) => x.distribute(s, m),
            Sigil::Malice(x) => x.distribute(s, m),
            Sigil::Mischief(x) => x.distribute(s, m),
            Sigil::Momentum(x) => x.distribute(s, m),
            Sigil::Nullification(x) => x.distribute(s, m),
            Sigil::OgreSlaying(x) => x.distribute(s, m),
            Sigil::Paralyzation(x) => x.distribute(s, m),
            Sigil::Perception(x) => x.distribute(s, m),
            Sigil::Peril(x) => x.distribute(s, m),
            Sigil::Purity(x) => x.distribute(s, m),
            Sigil::Rage(x) => x.distribute(s, m),
            Sigil::Rending(x) => x.distribute(s, m),
            Sigil::Renewal(x) => x.distribute(s, m),
            Sigil::Restoration(x) => x.distribute(s, m),
            Sigil::Ruthlessness(x) => x.distribute(s, m),
            Sigil::SerpentSlaying(x) => x.distribute(s, m),
            Sigil::Severance(x) => x.distribute(s, m),
            Sigil::Smoldering(x) => x.distribute(s, m),
            Sigil::Smothering(x) => x.distribute(s, m),
            Sigil::Sorrow(x) => x.distribute(s, m),
            Sigil::Speed(x) => x.distribute(s, m),
            Sigil::Stamina(x) => x.distribute(s, m),
            Sigil::Strength(x) => x.distribute(s, m),
            Sigil::Torment(x) => x.distribute(s, m),
            Sigil::Transference(x) => x.distribute(s, m),
            Sigil::UndeadSlaying(x) => x.distribute(s, m),
            Sigil::Venom(x) => x.distribute(s, m),
            Sigil::Vision(x) => x.distribute(s, m),
            Sigil::Water(x) => x.distribute(s, m),
            Sigil::Wrath(x) => x.distribute(s, m),
            Sigil::Night(x) => x.distribute(s, m),
            Sigil::Stars(x) => x.distribute(s, m),
        }
    }
    fn add_temporary(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Sigil::Absorption(x) => x.add_temporary(s, m),
            Sigil::Accuracy(x) => x.add_temporary(s, m),
            Sigil::Agility(x) => x.add_temporary(s, m),
            Sigil::Agony(x) => x.add_temporary(s, m),
            Sigil::Air(x) => x.add_temporary(s, m),
            Sigil::Battle(x) => x.add_temporary(s, m),
            Sigil::Benevolence(x) => x.add_temporary(s, m),
            Sigil::Blight(x) => x.add_temporary(s, m),
            Sigil::Blood(x) => x.add_temporary(s, m),
            Sigil::Bloodlust(x) => x.add_temporary(s, m),
            Sigil::Bounty(x) => x.add_temporary(s, m),
            Sigil::Bursting(x) => x.add_temporary(s, m),
            Sigil::Celerity(x) => x.add_temporary(s, m),
            Sigil::CentaurSlaying(x) => x.add_temporary(s, m),
            Sigil::Chilling(x) => x.add_temporary(s, m),
            Sigil::Cleansing(x) => x.add_temporary(s, m),
            Sigil::Concentration(x) => x.add_temporary(s, m),
            Sigil::Corruption(x) => x.add_temporary(s, m),
            Sigil::Cruelty(x) => x.add_temporary(s, m),
            Sigil::Debility(x) => x.add_temporary(s, m),
            Sigil::DemonSlaying(x) => x.add_temporary(s, m),
            Sigil::Demons(x) => x.add_temporary(s, m),
            Sigil::DestroyerSlaying(x) => x.add_temporary(s, m),
            Sigil::Doom(x) => x.add_temporary(s, m),
            Sigil::Draining(x) => x.add_temporary(s, m),
            Sigil::Dreams(x) => x.add_temporary(s, m),
            Sigil::Earth(x) => x.add_temporary(s, m),
            Sigil::ElementalSlaying(x) => x.add_temporary(s, m),
            Sigil::Energy(x) => x.add_temporary(s, m),
            Sigil::Fire(x) => x.add_temporary(s, m),
            Sigil::Force(x) => x.add_temporary(s, m),
            Sigil::Frailty(x) => x.add_temporary(s, m),
            Sigil::Frenzy(x) => x.add_temporary(s, m),
            Sigil::Generosity(x) => x.add_temporary(s, m),
            Sigil::Geomancy(x) => x.add_temporary(s, m),
            Sigil::GhostSlaying(x) => x.add_temporary(s, m),
            Sigil::GrawlSlaying(x) => x.add_temporary(s, m),
            Sigil::Hobbling(x) => x.add_temporary(s, m),
            Sigil::HologramSlaying(x) => x.add_temporary(s, m),
            Sigil::Hydromancy(x) => x.add_temporary(s, m),
            Sigil::Ice(x) => x.add_temporary(s, m),
            Sigil::IcebroodSlaying(x) => x.add_temporary(s, m),
            Sigil::Impact(x) => x.add_temporary(s, m),
            Sigil::Incapacitation(x) => x.add_temporary(s, m),
            Sigil::Justice(x) => x.add_temporary(s, m),
            Sigil::KarkaSlaying(x) => x.add_temporary(s, m),
            Sigil::Leeching(x) => x.add_temporary(s, m),
            Sigil::Life(x) => x.add_temporary(s, m),
            Sigil::Luck(x) => x.add_temporary(s, m),
            Sigil::MadScientists(x) => x.add_temporary(s, m),
            Sigil::Malice(x) => x.add_temporary(s, m),
            Sigil::Mischief(x) => x.add_temporary(s, m),
            Sigil::Momentum(x) => x.add_temporary(s, m),
            Sigil::Nullification(x) => x.add_temporary(s, m),
            Sigil::OgreSlaying(x) => x.add_temporary(s, m),
            Sigil::Paralyzation(x) => x.add_temporary(s, m),
            Sigil::Perception(x) => x.add_temporary(s, m),
            Sigil::Peril(x) => x.add_temporary(s, m),
            Sigil::Purity(x) => x.add_temporary(s, m),
            Sigil::Rage(x) => x.add_temporary(s, m),
            Sigil::Rending(x) => x.add_temporary(s, m),
            Sigil::Renewal(x) => x.add_temporary(s, m),
            Sigil::Restoration(x) => x.add_temporary(s, m),
            Sigil::Ruthlessness(x) => x.add_temporary(s, m),
            Sigil::SerpentSlaying(x) => x.add_temporary(s, m),
            Sigil::Severance(x) => x.add_temporary(s, m),
            Sigil::Smoldering(x) => x.add_temporary(s, m),
            Sigil::Smothering(x) => x.add_temporary(s, m),
            Sigil::Sorrow(x) => x.add_temporary(s, m),
            Sigil::Speed(x) => x.add_temporary(s, m),
            Sigil::Stamina(x) => x.add_temporary(s, m),
            Sigil::Strength(x) => x.add_temporary(s, m),
            Sigil::Torment(x) => x.add_temporary(s, m),
            Sigil::Transference(x) => x.add_temporary(s, m),
            Sigil::UndeadSlaying(x) => x.add_temporary(s, m),
            Sigil::Venom(x) => x.add_temporary(s, m),
            Sigil::Vision(x) => x.add_temporary(s, m),
            Sigil::Water(x) => x.add_temporary(s, m),
            Sigil::Wrath(x) => x.add_temporary(s, m),
            Sigil::Night(x) => x.add_temporary(s, m),
            Sigil::Stars(x) => x.add_temporary(s, m),
        }
    }
}
impl Sigil {
    pub const COUNT: usize = 81;
    pub fn from_index(i: usize) -> Sigil {
        match i {
            0 => Sigil::Absorption(Absorption),
            1 => Sigil::Accuracy(Accuracy),
            2 => Sigil::Agility(Agility),
            3 => Sigil::Agony(Agony),
            4 => Sigil::Air(Air),
            5 => Sigil::Battle(Battle),
            6 => Sigil::Benevolence(Benevolence),
            7 => Sigil::Blight(Blight),
            8 => Sigil::Blood(Blood),
            9 => Sigil::Bloodlust(Bloodlust),
            10 => Sigil::Bounty(Bounty),
            11 => Sigil::Bursting(Bursting),
            12 => Sigil::Celerity(Celerity),
            13 => Sigil::CentaurSlaying(CentaurSlaying),
            14 => Sigil::Chilling(Chilling),
            15 => Sigil::Cleansing(Cleansing),
            16 => Sigil::Concentration(Concentration),
            17 => Sigil::Corruption(Corruption),
            18 => Sigil::Cruelty(Cruelty),
            19 => Sigil::Debility(Debility),
            20 => Sigil::DemonSlaying(DemonSlaying),
            21 => Sigil::Demons(Demons),
            22 => Sigil::DestroyerSlaying(DestroyerSlaying),
            23 => Sigil::Doom(Doom),
            24 => Sigil::Draining(Draining),
            25 => Sigil::Dreams(Dreams),
            26 => Sigil::Earth(Earth),
            27 => Sigil::ElementalSlaying(ElementalSlaying),
            28 => Sigil::Energy(Energy),
            29 => Sigil::Fire(Fire),
            30 => Sigil::Force(Force),
            31 => Sigil::Frailty(Frailty),
            32 => Sigil::Frenzy(Frenzy),
            33 => Sigil::Generosity(Generosity),
            34 => Sigil::Geomancy(Geomancy),
            35 => Sigil::GhostSlaying(GhostSlaying),
            36 => Sigil::GrawlSlaying(GrawlSlaying),
            37 => Sigil::Hobbling(Hobbling),
            38 => Sigil::HologramSlaying(HologramSlaying),
            39 => Sigil::Hydromancy(Hydromancy),
            40 => Sigil::Ice(Ice),
            41 => Sigil::IcebroodSlaying(IcebroodSlaying),
            42 => Sigil::Impact(Impact),
            43 => Sigil::Incapacitation(Incapacitation),
            44 => Sigil::Justice(Justice),
            45 => Sigil::KarkaSlaying(KarkaSlaying),
            46 => Sigil::Leeching(Leeching),
            47 => Sigil::Life(Life),
            48 => Sigil::Luck(Luck),
            49 => Sigil::MadScientists(MadScientists),
            50 => Sigil::Malice(Malice),
            51 => Sigil::Mischief(Mischief),
            52 => Sigil::Momentum(Momentum),
            53 => Sigil::Nullification(Nullification),
            54 => Sigil::OgreSlaying(OgreSlaying),
            55 => Sigil::Paralyzation(Paralyzation),
            56 => Sigil::Perception(Perception),
            57 => Sigil::Peril(Peril),
            58 => Sigil::Purity(Purity),
            59 => Sigil::Rage(Rage),
            60 => Sigil::Rending(Rending),
            61 => Sigil::Renewal(Renewal),
            62 => Sigil::Restoration(Restoration),
            63 => Sigil::Ruthlessness(Ruthlessness),
            64 => Sigil::SerpentSlaying(SerpentSlaying),
            65 => Sigil::Severance(Severance),
            66 => Sigil::Smoldering(Smoldering),
            67 => Sigil::Smothering(Smothering),
            68 => Sigil::Sorrow(Sorrow),
            69 => Sigil::Speed(Speed),
            70 => Sigil::Stamina(Stamina),
            71 => Sigil::Strength(Strength),
            72 => Sigil::Torment(Torment),
            73 => Sigil::Transference(Transference),
            74 => Sigil::UndeadSlaying(UndeadSlaying),
            75 => Sigil::Venom(Venom),
            76 => Sigil::Vision(Vision),
            77 => Sigil::Water(Water),
            78 => Sigil::Wrath(Wrath),
            79 => Sigil::Night(Night),
            80 => Sigil::Stars(Stars),
            _ => panic!("index {} out of range for Sigil", i),
        }
    }
    pub fn iter() -> impl Iterator<Item = Sigil> {
        (0 .. Sigil::COUNT).map(Sigil::from_index)
    }
}
impl From<Absorption> for Sigil {
    fn from(x: Absorption) -> Sigil { Sigil::Absorption(x) }
}
impl From<Accuracy> for Sigil {
    fn from(x: Accuracy) -> Sigil { Sigil::Accuracy(x) }
}
impl From<Agility> for Sigil {
    fn from(x: Agility) -> Sigil { Sigil::Agility(x) }
}
impl From<Agony> for Sigil {
    fn from(x: Agony) -> Sigil { Sigil::Agony(x) }
}
impl From<Air> for Sigil {
    fn from(x: Air) -> Sigil { Sigil::Air(x) }
}
impl From<Battle> for Sigil {
    fn from(x: Battle) -> Sigil { Sigil::Battle(x) }
}
impl From<Benevolence> for Sigil {
    fn from(x: Benevolence) -> Sigil { Sigil::Benevolence(x) }
}
impl From<Blight> for Sigil {
    fn from(x: Blight) -> Sigil { Sigil::Blight(x) }
}
impl From<Blood> for Sigil {
    fn from(x: Blood) -> Sigil { Sigil::Blood(x) }
}
impl From<Bloodlust> for Sigil {
    fn from(x: Bloodlust) -> Sigil { Sigil::Bloodlust(x) }
}
impl From<Bounty> for Sigil {
    fn from(x: Bounty) -> Sigil { Sigil::Bounty(x) }
}
impl From<Bursting> for Sigil {
    fn from(x: Bursting) -> Sigil { Sigil::Bursting(x) }
}
impl From<Celerity> for Sigil {
    fn from(x: Celerity) -> Sigil { Sigil::Celerity(x) }
}
impl From<CentaurSlaying> for Sigil {
    fn from(x: CentaurSlaying) -> Sigil { Sigil::CentaurSlaying(x) }
}
impl From<Chilling> for Sigil {
    fn from(x: Chilling) -> Sigil { Sigil::Chilling(x) }
}
impl From<Cleansing> for Sigil {
    fn from(x: Cleansing) -> Sigil { Sigil::Cleansing(x) }
}
impl From<Concentration> for Sigil {
    fn from(x: Concentration) -> Sigil { Sigil::Concentration(x) }
}
impl From<Corruption> for Sigil {
    fn from(x: Corruption) -> Sigil { Sigil::Corruption(x) }
}
impl From<Cruelty> for Sigil {
    fn from(x: Cruelty) -> Sigil { Sigil::Cruelty(x) }
}
impl From<Debility> for Sigil {
    fn from(x: Debility) -> Sigil { Sigil::Debility(x) }
}
impl From<DemonSlaying> for Sigil {
    fn from(x: DemonSlaying) -> Sigil { Sigil::DemonSlaying(x) }
}
impl From<Demons> for Sigil {
    fn from(x: Demons) -> Sigil { Sigil::Demons(x) }
}
impl From<DestroyerSlaying> for Sigil {
    fn from(x: DestroyerSlaying) -> Sigil { Sigil::DestroyerSlaying(x) }
}
impl From<Doom> for Sigil {
    fn from(x: Doom) -> Sigil { Sigil::Doom(x) }
}
impl From<Draining> for Sigil {
    fn from(x: Draining) -> Sigil { Sigil::Draining(x) }
}
impl From<Dreams> for Sigil {
    fn from(x: Dreams) -> Sigil { Sigil::Dreams(x) }
}
impl From<Earth> for Sigil {
    fn from(x: Earth) -> Sigil { Sigil::Earth(x) }
}
impl From<ElementalSlaying> for Sigil {
    fn from(x: ElementalSlaying) -> Sigil { Sigil::ElementalSlaying(x) }
}
impl From<Energy> for Sigil {
    fn from(x: Energy) -> Sigil { Sigil::Energy(x) }
}
impl From<Fire> for Sigil {
    fn from(x: Fire) -> Sigil { Sigil::Fire(x) }
}
impl From<Force> for Sigil {
    fn from(x: Force) -> Sigil { Sigil::Force(x) }
}
impl From<Frailty> for Sigil {
    fn from(x: Frailty) -> Sigil { Sigil::Frailty(x) }
}
impl From<Frenzy> for Sigil {
    fn from(x: Frenzy) -> Sigil { Sigil::Frenzy(x) }
}
impl From<Generosity> for Sigil {
    fn from(x: Generosity) -> Sigil { Sigil::Generosity(x) }
}
impl From<Geomancy> for Sigil {
    fn from(x: Geomancy) -> Sigil { Sigil::Geomancy(x) }
}
impl From<GhostSlaying> for Sigil {
    fn from(x: GhostSlaying) -> Sigil { Sigil::GhostSlaying(x) }
}
impl From<GrawlSlaying> for Sigil {
    fn from(x: GrawlSlaying) -> Sigil { Sigil::GrawlSlaying(x) }
}
impl From<Hobbling> for Sigil {
    fn from(x: Hobbling) -> Sigil { Sigil::Hobbling(x) }
}
impl From<HologramSlaying> for Sigil {
    fn from(x: HologramSlaying) -> Sigil { Sigil::HologramSlaying(x) }
}
impl From<Hydromancy> for Sigil {
    fn from(x: Hydromancy) -> Sigil { Sigil::Hydromancy(x) }
}
impl From<Ice> for Sigil {
    fn from(x: Ice) -> Sigil { Sigil::Ice(x) }
}
impl From<IcebroodSlaying> for Sigil {
    fn from(x: IcebroodSlaying) -> Sigil { Sigil::IcebroodSlaying(x) }
}
impl From<Impact> for Sigil {
    fn from(x: Impact) -> Sigil { Sigil::Impact(x) }
}
impl From<Incapacitation> for Sigil {
    fn from(x: Incapacitation) -> Sigil { Sigil::Incapacitation(x) }
}
impl From<Justice> for Sigil {
    fn from(x: Justice) -> Sigil { Sigil::Justice(x) }
}
impl From<KarkaSlaying> for Sigil {
    fn from(x: KarkaSlaying) -> Sigil { Sigil::KarkaSlaying(x) }
}
impl From<Leeching> for Sigil {
    fn from(x: Leeching) -> Sigil { Sigil::Leeching(x) }
}
impl From<Life> for Sigil {
    fn from(x: Life) -> Sigil { Sigil::Life(x) }
}
impl From<Luck> for Sigil {
    fn from(x: Luck) -> Sigil { Sigil::Luck(x) }
}
impl From<MadScientists> for Sigil {
    fn from(x: MadScientists) -> Sigil { Sigil::MadScientists(x) }
}
impl From<Malice> for Sigil {
    fn from(x: Malice) -> Sigil { Sigil::Malice(x) }
}
impl From<Mischief> for Sigil {
    fn from(x: Mischief) -> Sigil { Sigil::Mischief(x) }
}
impl From<Momentum> for Sigil {
    fn from(x: Momentum) -> Sigil { Sigil::Momentum(x) }
}
impl From<Nullification> for Sigil {
    fn from(x: Nullification) -> Sigil { Sigil::Nullification(x) }
}
impl From<OgreSlaying> for Sigil {
    fn from(x: OgreSlaying) -> Sigil { Sigil::OgreSlaying(x) }
}
impl From<Paralyzation> for Sigil {
    fn from(x: Paralyzation) -> Sigil { Sigil::Paralyzation(x) }
}
impl From<Perception> for Sigil {
    fn from(x: Perception) -> Sigil { Sigil::Perception(x) }
}
impl From<Peril> for Sigil {
    fn from(x: Peril) -> Sigil { Sigil::Peril(x) }
}
impl From<Purity> for Sigil {
    fn from(x: Purity) -> Sigil { Sigil::Purity(x) }
}
impl From<Rage> for Sigil {
    fn from(x: Rage) -> Sigil { Sigil::Rage(x) }
}
impl From<Rending> for Sigil {
    fn from(x: Rending) -> Sigil { Sigil::Rending(x) }
}
impl From<Renewal> for Sigil {
    fn from(x: Renewal) -> Sigil { Sigil::Renewal(x) }
}
impl From<Restoration> for Sigil {
    fn from(x: Restoration) -> Sigil { Sigil::Restoration(x) }
}
impl From<Ruthlessness> for Sigil {
    fn from(x: Ruthlessness) -> Sigil { Sigil::Ruthlessness(x) }
}
impl From<SerpentSlaying> for Sigil {
    fn from(x: SerpentSlaying) -> Sigil { Sigil::SerpentSlaying(x) }
}
impl From<Severance> for Sigil {
    fn from(x: Severance) -> Sigil { Sigil::Severance(x) }
}
impl From<Smoldering> for Sigil {
    fn from(x: Smoldering) -> Sigil { Sigil::Smoldering(x) }
}
impl From<Smothering> for Sigil {
    fn from(x: Smothering) -> Sigil { Sigil::Smothering(x) }
}
impl From<Sorrow> for Sigil {
    fn from(x: Sorrow) -> Sigil { Sigil::Sorrow(x) }
}
impl From<Speed> for Sigil {
    fn from(x: Speed) -> Sigil { Sigil::Speed(x) }
}
impl From<Stamina> for Sigil {
    fn from(x: Stamina) -> Sigil { Sigil::Stamina(x) }
}
impl From<Strength> for Sigil {
    fn from(x: Strength) -> Sigil { Sigil::Strength(x) }
}
impl From<Torment> for Sigil {
    fn from(x: Torment) -> Sigil { Sigil::Torment(x) }
}
impl From<Transference> for Sigil {
    fn from(x: Transference) -> Sigil { Sigil::Transference(x) }
}
impl From<UndeadSlaying> for Sigil {
    fn from(x: UndeadSlaying) -> Sigil { Sigil::UndeadSlaying(x) }
}
impl From<Venom> for Sigil {
    fn from(x: Venom) -> Sigil { Sigil::Venom(x) }
}
impl From<Vision> for Sigil {
    fn from(x: Vision) -> Sigil { Sigil::Vision(x) }
}
impl From<Water> for Sigil {
    fn from(x: Water) -> Sigil { Sigil::Water(x) }
}
impl From<Wrath> for Sigil {
    fn from(x: Wrath) -> Sigil { Sigil::Wrath(x) }
}
impl From<Night> for Sigil {
    fn from(x: Night) -> Sigil { Sigil::Night(x) }
}
impl From<Stars> for Sigil {
    fn from(x: Stars) -> Sigil { Sigil::Stars(x) }
}

// END GENERATED CODE
