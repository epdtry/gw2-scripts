use crate::character::Vary;
use crate::effect::Effect;
use crate::stats::{Stats, Modifiers};

// BEGIN GENERATED CODE
// Generated by gen_gear_tables.py for GW2 build 142239 at 2023-03-10T02:34:08

/// No Rune
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct NoRune;
#[allow(unused_variables)]
impl Effect for NoRune {
}
impl Vary for NoRune {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl NoRune {
    pub fn display_name(&self) -> &'static str {
        "No Rune"
    }
}

/// Superior Rune of the Adventurer
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Adventurer;
#[allow(unused_variables)]
impl Effect for Adventurer {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        s.power += 225.0;
        // unknown: gain 50% endurance after using a healing skill
    }
}
impl Vary for Adventurer {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Adventurer {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Adventurer"
    }
}

/// Superior Rune of the Afflicted
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Afflicted;
#[allow(unused_variables)]
impl Effect for Afflicted {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        m.condition_duration.poison += 10.0;
        m.condition_duration.bleed += 20.0;
        m.condition_duration += 10.0;
        // unknown: create a death nova at a foe's location upon their defeat. (cooldown: 15 seconds)
    }
}
impl Vary for Afflicted {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Afflicted {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Afflicted"
    }
}

/// Superior Rune of the Air
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Air;
#[allow(unused_variables)]
impl Effect for Air {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 175.0;
        m.boon_duration.swiftness += 50.0;
        // unknown: gain shocking aura for 4 seconds after using a healing skill
    }
}
impl Vary for Air {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Air {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Air"
    }
}

/// Superior Rune of Altruism
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Altruism;
#[allow(unused_variables)]
impl Effect for Altruism {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 300.0;
        m.boon_duration += 15.0;
        // unknown: transfer 1 condition from 5 allies within a 600 radius to yourself after using an elite skill
    }
}
impl Vary for Altruism {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Altruism {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Altruism"
    }
}

/// Superior Rune of Antitoxin
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Antitoxin;
#[allow(unused_variables)]
impl Effect for Antitoxin {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        // unimplemented (-25x): ('unimplemented', 'incoming_condi_duration', 'condition')
        // unknown: incoming condition cleanses remove an additional condition
    }
}
impl Vary for Antitoxin {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Antitoxin {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Antitoxin"
    }
}

/// Superior Rune of the Aristocracy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Aristocracy;
#[allow(unused_variables)]
impl Effect for Aristocracy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        m.boon_duration.might += 50.0;
        // unknown: gain 5 stacks of might for 4 seconds after inflicting weakness on a foe. (cooldown: 1 second)
    }
}
impl Vary for Aristocracy {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Aristocracy {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Aristocracy"
    }
}

/// Superior Rune of the Baelfire
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Baelfire;
#[allow(unused_variables)]
impl Effect for Baelfire {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        m.condition_duration.burn += 30.0;
        m.condition_duration += 10.0;
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += s.power * 0.07;
    }
}
impl Vary for Baelfire {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Baelfire {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Baelfire"
    }
}

/// Superior Rune of Balthazar
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Balthazar;
#[allow(unused_variables)]
impl Effect for Balthazar {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        m.condition_duration.burn += 50.0;
        m.max_health += 10.0;
    }
}
impl Vary for Balthazar {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Balthazar {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Balthazar"
    }
}

/// Superior Rune of the Berserker
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Berserker;
#[allow(unused_variables)]
impl Effect for Berserker {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        s.power += 100.0;
        m.strike_damage += 5.0;
        m.condition_damage += 5.0;
    }
}
impl Vary for Berserker {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Berserker {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Berserker"
    }
}

/// Superior Rune of the Brawler
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Brawler;
#[allow(unused_variables)]
impl Effect for Brawler {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.toughness += 225.0;
        // unknown: gain 5 stacks of might for 10 seconds after using a healing skill
    }
}
impl Vary for Brawler {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Brawler {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Brawler"
    }
}

/// Superior Rune of the Cavalier
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Cavalier;
#[allow(unused_variables)]
impl Effect for Cavalier {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.toughness += 100.0;
        // unknown: using an <c=@abilitytype>engage</c> ability grants quickness and bonus damage for 5 seconds
    }
}
impl Vary for Cavalier {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Cavalier {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Cavalier"
    }
}

/// Superior Rune of the Centaur
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Centaur;
#[allow(unused_variables)]
impl Effect for Centaur {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        m.boon_duration.swiftness += 50.0;
        // unknown: grant swiftness to nearby allies for 10 seconds after using a healing skill
    }
}
impl Vary for Centaur {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Centaur {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Centaur"
    }
}

/// Superior Rune of the Chronomancer
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Chronomancer;
#[allow(unused_variables)]
impl Effect for Chronomancer {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.precision += 100.0;
        // unknown: apply 2 seconds of quickness when you cast a well
    }
}
impl Vary for Chronomancer {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Chronomancer {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Chronomancer"
    }
}

/// Superior Rune of the Citadel
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Citadel;
#[allow(unused_variables)]
impl Effect for Citadel {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        m.boon_duration.fury += 50.0;
        // unknown: call in an artillery strike at your position after using an elite skill
    }
}
impl Vary for Citadel {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Citadel {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Citadel"
    }
}

/// Superior Rune of the Daredevil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Daredevil;
#[allow(unused_variables)]
impl Effect for Daredevil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.toughness += 100.0;
        // unknown: next attack is guaranteed to crit after completing a dodge roll while in combat
    }
}
impl Vary for Daredevil {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Daredevil {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Daredevil"
    }
}

/// Superior Rune of the Deadeye
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Deadeye;
#[allow(unused_variables)]
impl Effect for Deadeye {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.ferocity += 100.0;
        // unknown: apply 2 stacks of might for 15 seconds when you use a cantrip
    }
}
impl Vary for Deadeye {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Deadeye {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Deadeye"
    }
}

/// Superior Rune of the Defender
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Defender;
#[allow(unused_variables)]
impl Effect for Defender {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 175.0;
        s.healing_power += 100.0;
        m.max_health += 10.0;
        // unknown: heal for 5% of your maximum health after blocking an attack. (cooldown: 1 second)
    }
}
impl Vary for Defender {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Defender {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Defender"
    }
}

/// Superior Rune of Divinity
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Divinity;
#[allow(unused_variables)]
impl Effect for Divinity {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        *s += 60.0;
        // unknown: +18 to all stats, +10% maximum health
    }
}
impl Vary for Divinity {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Divinity {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Divinity"
    }
}

/// Superior Rune of the Dolyak
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Dolyak;
#[allow(unused_variables)]
impl Effect for Dolyak {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 300.0;
        s.vitality += 100.0;
        // unknown: regenerate health every second
    }
}
impl Vary for Dolyak {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Dolyak {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Dolyak"
    }
}

/// Superior Rune of the Dragonhunter
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Dragonhunter;
#[allow(unused_variables)]
impl Effect for Dragonhunter {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 175.0;
        s.power += 100.0;
        // unknown: apply 5 stacks of might for 8 seconds when you place a trap
    }
}
impl Vary for Dragonhunter {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Dragonhunter {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Dragonhunter"
    }
}

/// Superior Rune of the Druid
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Druid;
#[allow(unused_variables)]
impl Effect for Druid {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 175.0;
        s.vitality += 100.0;
        // unknown: gain +500 healing power for 3 seconds after casting a glyph
    }
}
impl Vary for Druid {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Druid {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Druid"
    }
}

/// Superior Rune of Durability
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Durability;
#[allow(unused_variables)]
impl Effect for Durability {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 175.0;
        m.boon_duration += 15.0;
        m.max_health += 10.0;
        // unknown: grant nearby allies protection and regeneration for 3 seconds, and resistance for 1 second when struck
    }
}
impl Vary for Durability {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Durability {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Durability"
    }
}

/// Superior Rune of Dwayna
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Dwayna;
#[allow(unused_variables)]
impl Effect for Dwayna {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 175.0;
        m.boon_duration.regeneration += 30.0;
        m.max_health += 10.0;
        // unknown: regeneration you apply is 20% more effective
    }
}
impl Vary for Dwayna {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Dwayna {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Dwayna"
    }
}

/// Superior Rune of the Eagle
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Eagle;
#[allow(unused_variables)]
impl Effect for Eagle {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 175.0;
        s.ferocity += 225.0;
        // unknown: deal 10% increased strike damage to targets with less than 50% health
    }
}
impl Vary for Eagle {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Eagle {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Eagle"
    }
}

/// Superior Rune of the Earth
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Earth;
#[allow(unused_variables)]
impl Effect for Earth {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 175.0;
        m.boon_duration.protection += 30.0;
        // unimplemented (10x): ('unimplemented', 'incoming_heal')
        // unknown: gain protection and magnetic aura when struck by a foe
    }
}
impl Vary for Earth {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Earth {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Earth"
    }
}

/// Superior Rune of the Elementalist
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Elementalist;
#[allow(unused_variables)]
impl Effect for Elementalist {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.condition_damage += 225.0;
        m.condition_duration += 10.0;
    }
}
impl Vary for Elementalist {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Elementalist {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Elementalist"
    }
}

/// Superior Rune of the Engineer
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Engineer;
#[allow(unused_variables)]
impl Effect for Engineer {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 175.0;
        s.condition_damage += 225.0;
        // unknown: increase strike damage dealt by 7% while wielding conjured weapons, environmental weapons, kits, and banners
    }
}
impl Vary for Engineer {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Engineer {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Engineer"
    }
}

/// Superior Rune of Evasion
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Evasion;
#[allow(unused_variables)]
impl Effect for Evasion {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 300.0;
        m.boon_duration.swiftness += 30.0;
        // unknown: gain swiftness for 6 seconds after evading an attack
    }
}
impl Vary for Evasion {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Evasion {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Evasion"
    }
}

/// Superior Rune of Exuberance
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Exuberance;
#[allow(unused_variables)]
impl Effect for Exuberance {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 175.0;
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += s.vitality * 0.03;
        s.precision += s.vitality * 0.05;
        s.power += s.vitality * 0.07;
    }
}
impl Vary for Exuberance {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Exuberance {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Exuberance"
    }
}

/// Superior Rune of the Fire
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Fire;
#[allow(unused_variables)]
impl Effect for Fire {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        m.boon_duration.might += 10.0;
        // unknown: gain fire aura for 4 seconds when entering combat
        m.condition_duration.burn += 20.0;
        // unknown: increase strike damage by 10% while fire aura is active
    }
}
impl Vary for Fire {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Fire {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Fire"
    }
}

/// Superior Rune of the Firebrand
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Firebrand;
#[allow(unused_variables)]
impl Effect for Firebrand {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        m.boon_duration.quickness += 30.0;
        m.boon_duration += 10.0;
        // unknown: when you use an elite skill, inflict burning on nearby enemies
    }
}
impl Vary for Firebrand {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Firebrand {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Firebrand"
    }
}

/// Superior Rune of Fireworks
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Fireworks;
#[allow(unused_variables)]
impl Effect for Fireworks {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        m.boon_duration += 15.0;
        // unimplemented (25x): ('unimplemented', 'move_speed')
        // unknown: gain 6 stacks of might, fury, and vigor for 6 seconds while in combat. (cooldown: 20 seconds)
    }
}
impl Vary for Fireworks {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Fireworks {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Fireworks"
    }
}

/// Superior Rune of the Flame Legion
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FlameLegion;
#[allow(unused_variables)]
impl Effect for FlameLegion {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        m.condition_duration.burn += 50.0;
        // unknown: increase damage to burning foes by 7%
    }
}
impl Vary for FlameLegion {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FlameLegion {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Flame Legion"
    }
}

/// Superior Rune of the Flock
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Flock;
#[allow(unused_variables)]
impl Effect for Flock {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 175.0;
        s.vitality += 100.0;
        m.max_health += 10.0;
        // unknown: you and nearby allies are healed for an additional amount after you use a healing skill
    }
}
impl Vary for Flock {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Flock {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Flock"
    }
}

/// Superior Rune of the Forgeman
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Forgeman;
#[allow(unused_variables)]
impl Effect for Forgeman {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 175.0;
        m.condition_duration.burn += 50.0;
        // unknown: gain fire aura for 4 seconds when struck by a foe while below 75% health. (cooldown: 20 seconds)
    }
}
impl Vary for Forgeman {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Forgeman {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Forgeman"
    }
}

/// Superior Rune of the Golemancer
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Golemancer;
#[allow(unused_variables)]
impl Effect for Golemancer {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 300.0;
        s.precision += 100.0;
        // unknown: summon a golem while in combat
    }
}
impl Vary for Golemancer {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Golemancer {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Golemancer"
    }
}

/// Superior Rune of Grenth
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Grenth;
#[allow(unused_variables)]
impl Effect for Grenth {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        // unimplemented (50x): ('unimplemented', 'condi_duration', 'chill')
        // unknown: chill nearby foes after using a healing skill
    }
}
impl Vary for Grenth {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Grenth {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Grenth"
    }
}

/// Superior Rune of the Grove
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Grove;
#[allow(unused_variables)]
impl Effect for Grove {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 175.0;
        m.boon_duration.protection += 50.0;
        // unknown: when struck by a foe, a meadow blooms at your location, granting vigor, regeneration, and protection to allies within it
    }
}
impl Vary for Grove {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Grove {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Grove"
    }
}

/// Superior Rune of the Guardian
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Guardian;
#[allow(unused_variables)]
impl Effect for Guardian {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 300.0;
        s.healing_power += 100.0;
        // unknown: burn a foe for 1 second after blocking its attack
    }
}
impl Vary for Guardian {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Guardian {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Guardian"
    }
}

/// Superior Rune of the Herald
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Herald;
#[allow(unused_variables)]
impl Effect for Herald {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 175.0;
        m.boon_duration += 15.0;
        // unknown: when using a heal skill, apply protection to nearby allies (360 radius).<br>
    }
}
impl Vary for Herald {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Herald {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Herald"
    }
}

/// Superior Rune of Hoelbrak
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Hoelbrak;
#[allow(unused_variables)]
impl Effect for Hoelbrak {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        m.boon_duration.might += 10.0;
        // unimplemented (-10x): ('unimplemented', 'incoming_condi_duration', 'condition')
        m.boon_duration += 10.0;
        // unimplemented (-10x): ('unimplemented', 'incoming_condi_damage', 'condition')
    }
}
impl Vary for Hoelbrak {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Hoelbrak {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Hoelbrak"
    }
}

/// Superior Rune of the Holosmith
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Holosmith;
#[allow(unused_variables)]
impl Effect for Holosmith {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.vitality += 100.0;
        // unknown: gain a laser-disc when struck below the 75% health threshold
    }
}
impl Vary for Holosmith {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Holosmith {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Holosmith"
    }
}

/// Superior Rune of the Ice
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Ice;
#[allow(unused_variables)]
impl Effect for Ice {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 175.0;
        // unimplemented (30x): ('unimplemented', 'condi_duration', 'chill')
        // unknown: +7% damage to chilled foes
        // unknown: surround yourself with an ice nova after using an elite skill. (cooldown: 10 seconds)
    }
}
impl Vary for Ice {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Ice {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Ice"
    }
}

/// Superior Rune of Infiltration
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Infiltration;
#[allow(unused_variables)]
impl Effect for Infiltration {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.precision += 100.0;
        // unknown: deal +10% increased strike damage to enemies below 50% health
        // unknown: gain 5 seconds of vigor after entering stealth. (cooldown: 30 seconds)
    }
}
impl Vary for Infiltration {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Infiltration {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Infiltration"
    }
}

/// Superior Rune of the Krait
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Krait;
#[allow(unused_variables)]
impl Effect for Krait {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        m.condition_duration.bleed += 50.0;
        // unknown: inflict bleeding, torment, and poison to nearby foes for 8 seconds after using an elite skill 
    }
}
impl Vary for Krait {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Krait {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Krait"
    }
}

/// Superior Rune of Leadership
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Leadership;
#[allow(unused_variables)]
impl Effect for Leadership {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        *s += 36.0;
        m.boon_duration += 25.0;
        // unknown: convert up to 3 conditions into boons for nearby allies after using an elite skill
    }
}
impl Vary for Leadership {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Leadership {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Leadership"
    }
}

/// Superior Rune of the Lich
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Lich;
#[allow(unused_variables)]
impl Effect for Lich {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 175.0;
        m.condition_duration += 15.0;
        m.condition_damage += 4.0;
        // unknown: summon a jagged horror while in combat
    }
}
impl Vary for Lich {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Lich {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Lich"
    }
}

/// Superior Rune of Lyssa
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Lyssa;
#[allow(unused_variables)]
impl Effect for Lyssa {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 175.0;
        m.condition_duration += 15.0;
        m.boon_duration += 10.0;
        // unknown: convert up to 3 conditions into boons after using an elite skill
    }
}
impl Vary for Lyssa {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Lyssa {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Lyssa"
    }
}

/// Superior Rune of the Mad King
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MadKing;
#[allow(unused_variables)]
impl Effect for MadKing {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        m.condition_duration += 5.0;
        m.condition_duration.bleed += 40.0;
        // unknown: summon ravens to attack nearby enemies after using an elite skill
    }
}
impl Vary for MadKing {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MadKing {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Mad King"
    }
}

/// Superior Rune of Melandru
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Melandru;
#[allow(unused_variables)]
impl Effect for Melandru {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 175.0;
        s.vitality += 35.0;
        // unimplemented (-20x): ('unimplemented', 'incoming_condi_duration', 'condition')
        // unimplemented (-20x): ('unimplemented', 'incoming_condi_duration', 'stun')
    }
}
impl Vary for Melandru {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Melandru {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Melandru"
    }
}

/// Superior Rune of Mercy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Mercy;
#[allow(unused_variables)]
impl Effect for Mercy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 175.0;
        s.healing_power += 35.0;
        // unknown: -20% incoming damage while reviving an ally
        // unknown: revive allies 20% faster and with 30% more health
    }
}
impl Vary for Mercy {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Mercy {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Mercy"
    }
}

/// Superior Rune of the Mesmer
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Mesmer;
#[allow(unused_variables)]
impl Effect for Mesmer {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.precision += 100.0;
        // unimplemented (33x): ('unimplemented', 'condi_duration', 'daze')
        // unknown: increase strike damage dealt to dazed foes by 10%
    }
}
impl Vary for Mesmer {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Mesmer {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Mesmer"
    }
}

/// Superior Rune of the Mirage
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Mirage;
#[allow(unused_variables)]
impl Effect for Mirage {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        s.toughness += 225.0;
        // unknown: inflict torment for 4 seconds upon successfully evading an attack. (cooldown: 1 second)
    }
}
impl Vary for Mirage {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Mirage {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Mirage"
    }
}

/// Superior Rune of the Monk
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Monk;
#[allow(unused_variables)]
impl Effect for Monk {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 175.0;
        m.boon_duration += 15.0;
        // unknown: +10% healing effectiveness to other allies
        // unknown: increase healing effectiveness to other allies by an additional 1% for 3 seconds after granting a boon to any ally (up to a maximum of 10 stacks)
    }
}
impl Vary for Monk {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Monk {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Monk"
    }
}

/// Superior Rune of Nature's Bounty
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct NaturesBounty;
#[allow(unused_variables)]
impl Effect for NaturesBounty {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 175.0;
        // unimplemented (-25x): ('unimplemented', 'incoming_condi_duration', 'condition')
        // unknown: cleanse a condition from nearby allies after using a healing skill
    }
}
impl Vary for NaturesBounty {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl NaturesBounty {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Nature's Bounty"
    }
}

/// Superior Rune of the Necromancer
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Necromancer;
#[allow(unused_variables)]
impl Effect for Necromancer {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 300.0;
        s.vitality += 100.0;
        // unknown: 20% fear duration
    }
}
impl Vary for Necromancer {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Necromancer {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Necromancer"
    }
}

/// Superior Rune of the Nightmare
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Nightmare;
#[allow(unused_variables)]
impl Effect for Nightmare {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        // unimplemented (10x): ('unimplemented', 'condi_duration', 'fear')
        m.condition_duration += 20.0;
        // unknown: deliver an attack that transfers a condition and blinds nearby enemies after using an elite skill
    }
}
impl Vary for Nightmare {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Nightmare {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Nightmare"
    }
}

/// Superior Rune of the Ogre
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Ogre;
#[allow(unused_variables)]
impl Effect for Ogre {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.ferocity += 100.0;
        m.strike_damage += 4.0;
        // unknown: summon a rock dog while in combat
    }
}
impl Vary for Ogre {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Ogre {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Ogre"
    }
}

/// Superior Rune of Orr
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Orr;
#[allow(unused_variables)]
impl Effect for Orr {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        // unimplemented (-25x): ('unimplemented', 'incoming_condi_duration', 'condition')
        m.max_health += 10.0;
    }
}
impl Vary for Orr {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Orr {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Orr"
    }
}

/// Superior Rune of the Pack
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Pack;
#[allow(unused_variables)]
impl Effect for Pack {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        m.boon_duration += 15.0;
        s.precision += 125.0;
        // unknown: grant nearby allies 5 stacks of might, fury, and swiftness for 8 seconds while in combat. (cooldown: 30 seconds)
    }
}
impl Vary for Pack {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Pack {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Pack"
    }
}

/// Superior Rune of Perplexity
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Perplexity;
#[allow(unused_variables)]
impl Effect for Perplexity {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        m.condition_duration.confuse += 50.0;
        // unknown: decrease strike damage dealt to you by confused foes by 10%
    }
}
impl Vary for Perplexity {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Perplexity {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Perplexity"
    }
}

/// Superior Rune of the Privateer
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Privateer;
#[allow(unused_variables)]
impl Effect for Privateer {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        m.boon_duration.might += 30.0;
        // unknown: shout "yarr!" while in combat, summoning a parrot and granting might to allies
    }
}
impl Vary for Privateer {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Privateer {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Privateer"
    }
}

/// Superior Rune of Radiance
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Radiance;
#[allow(unused_variables)]
impl Effect for Radiance {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 175.0;
        m.boon_duration += 25.0;
        // unknown: increase the duration of auras you grant by +33%
    }
}
impl Vary for Radiance {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Radiance {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Radiance"
    }
}

/// Superior Rune of Rage
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Rage;
#[allow(unused_variables)]
impl Effect for Rage {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 175.0;
        m.boon_duration.fury += 30.0;
        // unknown: gain fury for 8 seconds when entering combat. (cooldown: 10 seconds)
        // unknown: increase strike damage dealt by 5% while under the effect of fury
    }
}
impl Vary for Rage {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Rage {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Rage"
    }
}

/// Superior Rune of the Ranger
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Ranger;
#[allow(unused_variables)]
impl Effect for Ranger {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 175.0;
        s.ferocity += 100.0;
        // unknown: +7% damage while you have an active companion
    }
}
impl Vary for Ranger {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Ranger {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Ranger"
    }
}

/// Superior Rune of Rata Sum
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct RataSum;
#[allow(unused_variables)]
impl Effect for RataSum {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 175.0;
        m.condition_duration.poison += 10.0;
        // unimplemented (20x): ('unimplemented', 'condi_duration', 'weakness')
        m.condition_duration += 10.0;
        // unknown: summon a gamma-ray field that grants might upon entering combat
    }
}
impl Vary for RataSum {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl RataSum {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Rata Sum"
    }
}

/// Superior Rune of the Reaper
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Reaper;
#[allow(unused_variables)]
impl Effect for Reaper {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.toughness += 225.0;
        // unknown: chill enemies within a 360 radius for 1 second after executing a shout skill
    }
}
impl Vary for Reaper {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Reaper {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Reaper"
    }
}

/// Superior Rune of the Rebirth
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Rebirth;
#[allow(unused_variables)]
impl Effect for Rebirth {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 300.0;
        m.boon_duration += 15.0;
        // unknown: ignore the next lethal blow and gain barrier
    }
}
impl Vary for Rebirth {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Rebirth {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Rebirth"
    }
}

/// Superior Rune of the Renegade
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Renegade;
#[allow(unused_variables)]
impl Effect for Renegade {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        s.ferocity += 100.0;
        m.condition_damage += 7.0;
    }
}
impl Vary for Renegade {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Renegade {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Renegade"
    }
}

/// Superior Rune of Resistance
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Resistance;
#[allow(unused_variables)]
impl Effect for Resistance {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 175.0;
        // unimplemented (-25x): ('unimplemented', 'incoming_condi_duration', 'condition')
        // unknown: gain resistance for 4 seconds after activating an elite skill
    }
}
impl Vary for Resistance {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Resistance {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Resistance"
    }
}

/// Superior Rune of the Revenant
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Revenant;
#[allow(unused_variables)]
impl Effect for Revenant {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        *s += 78.0;
        // unknown: gain 2 seconds of resistance after using a healing skill
    }
}
impl Vary for Revenant {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Revenant {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Revenant"
    }
}

/// Superior Rune of Sanctuary
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Sanctuary;
#[allow(unused_variables)]
impl Effect for Sanctuary {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 175.0;
        m.boon_duration += 15.0;
        // unknown: gain a barrier with health equal to 10% of any healing you receive
    }
}
impl Vary for Sanctuary {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Sanctuary {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Sanctuary"
    }
}

/// Superior Rune of Scavenging
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Scavenging;
#[allow(unused_variables)]
impl Effect for Scavenging {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        s.vitality += 100.0;
        m.condition_duration.poison += 20.0;
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.vitality * 0.07;
    }
}
impl Vary for Scavenging {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Scavenging {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Scavenging"
    }
}

/// Superior Rune of the Scholar
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Scholar;
#[allow(unused_variables)]
impl Effect for Scholar {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.ferocity += 225.0;
        // unknown: increase strike damage by 5% while your health is above 90%
    }
}
impl Vary for Scholar {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Scholar {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Scholar"
    }
}

/// Superior Rune of the Scourge
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Scourge;
#[allow(unused_variables)]
impl Effect for Scourge {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 300.0;
        s.condition_damage += 100.0;
        // unknown: gain barrier when struck by a foe while below 75% health
    }
}
impl Vary for Scourge {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Scourge {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Scourge"
    }
}

/// Superior Rune of the Scrapper
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Scrapper;
#[allow(unused_variables)]
impl Effect for Scrapper {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.toughness += 100.0;
        // unknown: damage reduced by 7% when within 600 units of an enemy
    }
}
impl Vary for Scrapper {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Scrapper {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Scrapper"
    }
}

/// Superior Rune of Snowfall
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Snowfall;
#[allow(unused_variables)]
impl Effect for Snowfall {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 175.0;
        // unknown: gain 15 seconds of regeneration when you take falling damage
        // unknown: gain 3 seconds of superspeed when you take falling damage
        // unknown: create a pile of snow that chills enemies when you take falling damage
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += s.toughness * 0.05;
    }
}
impl Vary for Snowfall {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Snowfall {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Snowfall"
    }
}

/// Superior Rune of the Soulbeast
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Soulbeast;
#[allow(unused_variables)]
impl Effect for Soulbeast {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        s.power += 100.0;
        // unknown: when you have an active pet, gain condition damage equal to 7% of your power
        // unknown: when you do not have an active pet, gain toughness equal to 7% of your condition damage
    }
}
impl Vary for Soulbeast {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Soulbeast {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Soulbeast"
    }
}

/// Superior Rune of Speed
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Speed;
#[allow(unused_variables)]
impl Effect for Speed {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 175.0;
        m.boon_duration.swiftness += 50.0;
        // unknown: increase movement speed by 66% when under the effect of swiftness
    }
}
impl Vary for Speed {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Speed {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Speed"
    }
}

/// Superior Rune of the Spellbreaker
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Spellbreaker;
#[allow(unused_variables)]
impl Effect for Spellbreaker {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.precision += 100.0;
        // unknown: you deal 7% more damage to foes that have no boons
    }
}
impl Vary for Spellbreaker {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Spellbreaker {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Spellbreaker"
    }
}

/// Superior Rune of the Stars
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Stars;
#[allow(unused_variables)]
impl Effect for Stars {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        *s += 36.0;
        // unimplemented (-30x): ('unimplemented', 'incoming_condi_duration', 'weakness')
        // unknown: -30% incoming chill and cripple duration
        // unimplemented (-10x): ('unimplemented', 'incoming_condi_damage', 'condition')
        // unimplemented (-10x): ('unimplemented', 'incoming_condi_duration', 'condition')
    }
}
impl Vary for Stars {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Stars {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Stars"
    }
}

/// Superior Rune of Strength
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Strength;
#[allow(unused_variables)]
impl Effect for Strength {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        m.boon_duration.might += 50.0;
        // unknown: increase strike damage by 5% while under the effect of might
    }
}
impl Vary for Strength {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Strength {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Strength"
    }
}

/// Superior Rune of the Sunless
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Sunless;
#[allow(unused_variables)]
impl Effect for Sunless {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        // unimplemented (-25x): ('unimplemented', 'incoming_condi_duration', 'condition')
        // unknown: inflict nearby foes with 1 second of fear and 5 seconds of poison after using an elite skill
    }
}
impl Vary for Sunless {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Sunless {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Sunless"
    }
}

/// Superior Rune of Surging
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Surging;
#[allow(unused_variables)]
impl Effect for Surging {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        m.boon_duration += 15.0;
        // unimplemented (25x): ('unimplemented', 'move_speed')
        // unknown: gain shocking aura for 4 seconds after using an elite skill
    }
}
impl Vary for Surging {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Surging {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Surging"
    }
}

/// Superior Rune of Svanir
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Svanir;
#[allow(unused_variables)]
impl Effect for Svanir {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 175.0;
        // unimplemented (30x): ('unimplemented', 'condi_duration', 'chill')
        // unimplemented (-66x): ('unimplemented', 'incoming_condi_duration', 'chill')
        // unknown: gain frost aura for 4 seconds when hit by a foe while under 50% health
    }
}
impl Vary for Svanir {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Svanir {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Svanir"
    }
}

/// Superior Rune of the Tempest
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Tempest;
#[allow(unused_variables)]
impl Effect for Tempest {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        *s += 36.0;
        m.condition_duration += 25.0;
        // unknown: heal allies within a 360 radius after breaking a stun
    }
}
impl Vary for Tempest {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Tempest {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Tempest"
    }
}

/// Superior Rune of the Thief
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Thief;
#[allow(unused_variables)]
impl Effect for Thief {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 300.0;
        s.condition_damage += 100.0;
        // unknown: increase strike damage dealt by 10% when striking a foe from behind or the flank
    }
}
impl Vary for Thief {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Thief {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Thief"
    }
}

/// Superior Rune of Thorns
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Thorns;
#[allow(unused_variables)]
impl Effect for Thorns {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 300.0;
        m.condition_duration.poison += 50.0;
    }
}
impl Vary for Thorns {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Thorns {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Thorns"
    }
}

/// Superior Rune of Tormenting
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Tormenting;
#[allow(unused_variables)]
impl Effect for Tormenting {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        m.condition_duration.torment += 50.0;
        // unknown: gain regeneration for 3 seconds after inflicting a foe with torment. (cooldown: 5 seconds)
    }
}
impl Vary for Tormenting {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Tormenting {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Tormenting"
    }
}

/// Superior Rune of the Trapper
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Trapper;
#[allow(unused_variables)]
impl Effect for Trapper {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        m.condition_duration += 15.0;
        // unknown: gain 3 seconds of stealth and superspeed after using a trap skill
    }
}
impl Vary for Trapper {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Trapper {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Trapper"
    }
}

/// Superior Rune of the Traveler
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Traveler;
#[allow(unused_variables)]
impl Effect for Traveler {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        *s += 36.0;
        m.boon_duration += 15.0;
        // unimplemented (25x): ('unimplemented', 'move_speed')
        m.condition_duration += 10.0;
    }
}
impl Vary for Traveler {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Traveler {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Traveler"
    }
}

/// Superior Rune of the Trooper
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Trooper;
#[allow(unused_variables)]
impl Effect for Trooper {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 175.0;
        s.toughness += 225.0;
        // unknown: remove a condition from each affected ally after using a shout skill
    }
}
impl Vary for Trooper {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Trooper {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Trooper"
    }
}

/// Superior Rune of the Undead
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Undead;
#[allow(unused_variables)]
impl Effect for Undead {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        s.toughness += 225.0;
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.toughness * 0.07;
    }
}
impl Vary for Undead {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Undead {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Undead"
    }
}

/// Superior Rune of Vampirism
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Vampirism;
#[allow(unused_variables)]
impl Effect for Vampirism {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.vitality += 100.0;
        m.max_health += 10.0;
        // unknown: restore 10% of your health upon killing a foe
    }
}
impl Vary for Vampirism {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Vampirism {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Vampirism"
    }
}

/// Superior Rune of the Warrior
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Warrior;
#[allow(unused_variables)]
impl Effect for Warrior {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 300.0;
        s.power += 100.0;
        // unknown: decrease recharge time by 20% after swapping weapons
    }
}
impl Vary for Warrior {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Warrior {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Warrior"
    }
}

/// Superior Rune of the Water
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Water;
#[allow(unused_variables)]
impl Effect for Water {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 175.0;
        m.boon_duration += 25.0;
        // unknown: remove a condition from you and nearby allies after using a healing skill
    }
}
impl Vary for Water {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Water {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Water"
    }
}

/// Superior Rune of the Weaver
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Weaver;
#[allow(unused_variables)]
impl Effect for Weaver {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        *s += 36.0;
        m.condition_duration.burn += 10.0;
        // unimplemented (20x): ('unimplemented', 'condi_duration', 'chill')
        m.condition_duration += 10.0;
        // unknown: gain barrier after executing a <c=@abilitytype>stance</c> ability
    }
}
impl Vary for Weaver {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Weaver {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Weaver"
    }
}

/// Superior Rune of the Wurm
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Wurm;
#[allow(unused_variables)]
impl Effect for Wurm {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 175.0;
        s.ferocity += 100.0;
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += s.vitality * 0.07;
    }
}
impl Vary for Wurm {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Wurm {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Wurm"
    }
}

/// Superior Rune of the Zephyrite
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Zephyrite;
#[allow(unused_variables)]
impl Effect for Zephyrite {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        *s += 60.0;
        // unknown: superspeed you grant lasts 33% longer
        // unknown: using an elite skill grants you superspeed for 5 seconds
    }
}
impl Vary for Zephyrite {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Zephyrite {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Zephyrite"
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
pub enum Rune {
    NoRune(NoRune),
    Adventurer(Adventurer),
    Afflicted(Afflicted),
    Air(Air),
    Altruism(Altruism),
    Antitoxin(Antitoxin),
    Aristocracy(Aristocracy),
    Baelfire(Baelfire),
    Balthazar(Balthazar),
    Berserker(Berserker),
    Brawler(Brawler),
    Cavalier(Cavalier),
    Centaur(Centaur),
    Chronomancer(Chronomancer),
    Citadel(Citadel),
    Daredevil(Daredevil),
    Deadeye(Deadeye),
    Defender(Defender),
    Divinity(Divinity),
    Dolyak(Dolyak),
    Dragonhunter(Dragonhunter),
    Druid(Druid),
    Durability(Durability),
    Dwayna(Dwayna),
    Eagle(Eagle),
    Earth(Earth),
    Elementalist(Elementalist),
    Engineer(Engineer),
    Evasion(Evasion),
    Exuberance(Exuberance),
    Fire(Fire),
    Firebrand(Firebrand),
    Fireworks(Fireworks),
    FlameLegion(FlameLegion),
    Flock(Flock),
    Forgeman(Forgeman),
    Golemancer(Golemancer),
    Grenth(Grenth),
    Grove(Grove),
    Guardian(Guardian),
    Herald(Herald),
    Hoelbrak(Hoelbrak),
    Holosmith(Holosmith),
    Ice(Ice),
    Infiltration(Infiltration),
    Krait(Krait),
    Leadership(Leadership),
    Lich(Lich),
    Lyssa(Lyssa),
    MadKing(MadKing),
    Melandru(Melandru),
    Mercy(Mercy),
    Mesmer(Mesmer),
    Mirage(Mirage),
    Monk(Monk),
    NaturesBounty(NaturesBounty),
    Necromancer(Necromancer),
    Nightmare(Nightmare),
    Ogre(Ogre),
    Orr(Orr),
    Pack(Pack),
    Perplexity(Perplexity),
    Privateer(Privateer),
    Radiance(Radiance),
    Rage(Rage),
    Ranger(Ranger),
    RataSum(RataSum),
    Reaper(Reaper),
    Rebirth(Rebirth),
    Renegade(Renegade),
    Resistance(Resistance),
    Revenant(Revenant),
    Sanctuary(Sanctuary),
    Scavenging(Scavenging),
    Scholar(Scholar),
    Scourge(Scourge),
    Scrapper(Scrapper),
    Snowfall(Snowfall),
    Soulbeast(Soulbeast),
    Speed(Speed),
    Spellbreaker(Spellbreaker),
    Stars(Stars),
    Strength(Strength),
    Sunless(Sunless),
    Surging(Surging),
    Svanir(Svanir),
    Tempest(Tempest),
    Thief(Thief),
    Thorns(Thorns),
    Tormenting(Tormenting),
    Trapper(Trapper),
    Traveler(Traveler),
    Trooper(Trooper),
    Undead(Undead),
    Vampirism(Vampirism),
    Warrior(Warrior),
    Water(Water),
    Weaver(Weaver),
    Wurm(Wurm),
    Zephyrite(Zephyrite),
}
impl Default for Rune {
    fn default() -> Rune { Rune::NoRune(NoRune) }
}
impl Rune {
    pub const COUNT: usize = 100;
    pub fn index(self) -> usize {
        match self {
            Rune::NoRune(NoRune) => 0,
            Rune::Adventurer(Adventurer) => 1,
            Rune::Afflicted(Afflicted) => 2,
            Rune::Air(Air) => 3,
            Rune::Altruism(Altruism) => 4,
            Rune::Antitoxin(Antitoxin) => 5,
            Rune::Aristocracy(Aristocracy) => 6,
            Rune::Baelfire(Baelfire) => 7,
            Rune::Balthazar(Balthazar) => 8,
            Rune::Berserker(Berserker) => 9,
            Rune::Brawler(Brawler) => 10,
            Rune::Cavalier(Cavalier) => 11,
            Rune::Centaur(Centaur) => 12,
            Rune::Chronomancer(Chronomancer) => 13,
            Rune::Citadel(Citadel) => 14,
            Rune::Daredevil(Daredevil) => 15,
            Rune::Deadeye(Deadeye) => 16,
            Rune::Defender(Defender) => 17,
            Rune::Divinity(Divinity) => 18,
            Rune::Dolyak(Dolyak) => 19,
            Rune::Dragonhunter(Dragonhunter) => 20,
            Rune::Druid(Druid) => 21,
            Rune::Durability(Durability) => 22,
            Rune::Dwayna(Dwayna) => 23,
            Rune::Eagle(Eagle) => 24,
            Rune::Earth(Earth) => 25,
            Rune::Elementalist(Elementalist) => 26,
            Rune::Engineer(Engineer) => 27,
            Rune::Evasion(Evasion) => 28,
            Rune::Exuberance(Exuberance) => 29,
            Rune::Fire(Fire) => 30,
            Rune::Firebrand(Firebrand) => 31,
            Rune::Fireworks(Fireworks) => 32,
            Rune::FlameLegion(FlameLegion) => 33,
            Rune::Flock(Flock) => 34,
            Rune::Forgeman(Forgeman) => 35,
            Rune::Golemancer(Golemancer) => 36,
            Rune::Grenth(Grenth) => 37,
            Rune::Grove(Grove) => 38,
            Rune::Guardian(Guardian) => 39,
            Rune::Herald(Herald) => 40,
            Rune::Hoelbrak(Hoelbrak) => 41,
            Rune::Holosmith(Holosmith) => 42,
            Rune::Ice(Ice) => 43,
            Rune::Infiltration(Infiltration) => 44,
            Rune::Krait(Krait) => 45,
            Rune::Leadership(Leadership) => 46,
            Rune::Lich(Lich) => 47,
            Rune::Lyssa(Lyssa) => 48,
            Rune::MadKing(MadKing) => 49,
            Rune::Melandru(Melandru) => 50,
            Rune::Mercy(Mercy) => 51,
            Rune::Mesmer(Mesmer) => 52,
            Rune::Mirage(Mirage) => 53,
            Rune::Monk(Monk) => 54,
            Rune::NaturesBounty(NaturesBounty) => 55,
            Rune::Necromancer(Necromancer) => 56,
            Rune::Nightmare(Nightmare) => 57,
            Rune::Ogre(Ogre) => 58,
            Rune::Orr(Orr) => 59,
            Rune::Pack(Pack) => 60,
            Rune::Perplexity(Perplexity) => 61,
            Rune::Privateer(Privateer) => 62,
            Rune::Radiance(Radiance) => 63,
            Rune::Rage(Rage) => 64,
            Rune::Ranger(Ranger) => 65,
            Rune::RataSum(RataSum) => 66,
            Rune::Reaper(Reaper) => 67,
            Rune::Rebirth(Rebirth) => 68,
            Rune::Renegade(Renegade) => 69,
            Rune::Resistance(Resistance) => 70,
            Rune::Revenant(Revenant) => 71,
            Rune::Sanctuary(Sanctuary) => 72,
            Rune::Scavenging(Scavenging) => 73,
            Rune::Scholar(Scholar) => 74,
            Rune::Scourge(Scourge) => 75,
            Rune::Scrapper(Scrapper) => 76,
            Rune::Snowfall(Snowfall) => 77,
            Rune::Soulbeast(Soulbeast) => 78,
            Rune::Speed(Speed) => 79,
            Rune::Spellbreaker(Spellbreaker) => 80,
            Rune::Stars(Stars) => 81,
            Rune::Strength(Strength) => 82,
            Rune::Sunless(Sunless) => 83,
            Rune::Surging(Surging) => 84,
            Rune::Svanir(Svanir) => 85,
            Rune::Tempest(Tempest) => 86,
            Rune::Thief(Thief) => 87,
            Rune::Thorns(Thorns) => 88,
            Rune::Tormenting(Tormenting) => 89,
            Rune::Trapper(Trapper) => 90,
            Rune::Traveler(Traveler) => 91,
            Rune::Trooper(Trooper) => 92,
            Rune::Undead(Undead) => 93,
            Rune::Vampirism(Vampirism) => 94,
            Rune::Warrior(Warrior) => 95,
            Rune::Water(Water) => 96,
            Rune::Weaver(Weaver) => 97,
            Rune::Wurm(Wurm) => 98,
            Rune::Zephyrite(Zephyrite) => 99,
        }
    }
    pub fn from_index(i: usize) -> Rune {
        match i {
            0 => Rune::NoRune(NoRune),
            1 => Rune::Adventurer(Adventurer),
            2 => Rune::Afflicted(Afflicted),
            3 => Rune::Air(Air),
            4 => Rune::Altruism(Altruism),
            5 => Rune::Antitoxin(Antitoxin),
            6 => Rune::Aristocracy(Aristocracy),
            7 => Rune::Baelfire(Baelfire),
            8 => Rune::Balthazar(Balthazar),
            9 => Rune::Berserker(Berserker),
            10 => Rune::Brawler(Brawler),
            11 => Rune::Cavalier(Cavalier),
            12 => Rune::Centaur(Centaur),
            13 => Rune::Chronomancer(Chronomancer),
            14 => Rune::Citadel(Citadel),
            15 => Rune::Daredevil(Daredevil),
            16 => Rune::Deadeye(Deadeye),
            17 => Rune::Defender(Defender),
            18 => Rune::Divinity(Divinity),
            19 => Rune::Dolyak(Dolyak),
            20 => Rune::Dragonhunter(Dragonhunter),
            21 => Rune::Druid(Druid),
            22 => Rune::Durability(Durability),
            23 => Rune::Dwayna(Dwayna),
            24 => Rune::Eagle(Eagle),
            25 => Rune::Earth(Earth),
            26 => Rune::Elementalist(Elementalist),
            27 => Rune::Engineer(Engineer),
            28 => Rune::Evasion(Evasion),
            29 => Rune::Exuberance(Exuberance),
            30 => Rune::Fire(Fire),
            31 => Rune::Firebrand(Firebrand),
            32 => Rune::Fireworks(Fireworks),
            33 => Rune::FlameLegion(FlameLegion),
            34 => Rune::Flock(Flock),
            35 => Rune::Forgeman(Forgeman),
            36 => Rune::Golemancer(Golemancer),
            37 => Rune::Grenth(Grenth),
            38 => Rune::Grove(Grove),
            39 => Rune::Guardian(Guardian),
            40 => Rune::Herald(Herald),
            41 => Rune::Hoelbrak(Hoelbrak),
            42 => Rune::Holosmith(Holosmith),
            43 => Rune::Ice(Ice),
            44 => Rune::Infiltration(Infiltration),
            45 => Rune::Krait(Krait),
            46 => Rune::Leadership(Leadership),
            47 => Rune::Lich(Lich),
            48 => Rune::Lyssa(Lyssa),
            49 => Rune::MadKing(MadKing),
            50 => Rune::Melandru(Melandru),
            51 => Rune::Mercy(Mercy),
            52 => Rune::Mesmer(Mesmer),
            53 => Rune::Mirage(Mirage),
            54 => Rune::Monk(Monk),
            55 => Rune::NaturesBounty(NaturesBounty),
            56 => Rune::Necromancer(Necromancer),
            57 => Rune::Nightmare(Nightmare),
            58 => Rune::Ogre(Ogre),
            59 => Rune::Orr(Orr),
            60 => Rune::Pack(Pack),
            61 => Rune::Perplexity(Perplexity),
            62 => Rune::Privateer(Privateer),
            63 => Rune::Radiance(Radiance),
            64 => Rune::Rage(Rage),
            65 => Rune::Ranger(Ranger),
            66 => Rune::RataSum(RataSum),
            67 => Rune::Reaper(Reaper),
            68 => Rune::Rebirth(Rebirth),
            69 => Rune::Renegade(Renegade),
            70 => Rune::Resistance(Resistance),
            71 => Rune::Revenant(Revenant),
            72 => Rune::Sanctuary(Sanctuary),
            73 => Rune::Scavenging(Scavenging),
            74 => Rune::Scholar(Scholar),
            75 => Rune::Scourge(Scourge),
            76 => Rune::Scrapper(Scrapper),
            77 => Rune::Snowfall(Snowfall),
            78 => Rune::Soulbeast(Soulbeast),
            79 => Rune::Speed(Speed),
            80 => Rune::Spellbreaker(Spellbreaker),
            81 => Rune::Stars(Stars),
            82 => Rune::Strength(Strength),
            83 => Rune::Sunless(Sunless),
            84 => Rune::Surging(Surging),
            85 => Rune::Svanir(Svanir),
            86 => Rune::Tempest(Tempest),
            87 => Rune::Thief(Thief),
            88 => Rune::Thorns(Thorns),
            89 => Rune::Tormenting(Tormenting),
            90 => Rune::Trapper(Trapper),
            91 => Rune::Traveler(Traveler),
            92 => Rune::Trooper(Trooper),
            93 => Rune::Undead(Undead),
            94 => Rune::Vampirism(Vampirism),
            95 => Rune::Warrior(Warrior),
            96 => Rune::Water(Water),
            97 => Rune::Weaver(Weaver),
            98 => Rune::Wurm(Wurm),
            99 => Rune::Zephyrite(Zephyrite),
            _ => panic!("index {} out of range for Rune", i),
        }
    }
    pub fn iter() -> impl Iterator<Item = Rune> {
        (0 .. Rune::COUNT).map(Rune::from_index)
    }
    pub fn display_name(self) -> &'static str {
        match self {
            Rune::NoRune(x) => x.display_name(),
            Rune::Adventurer(x) => x.display_name(),
            Rune::Afflicted(x) => x.display_name(),
            Rune::Air(x) => x.display_name(),
            Rune::Altruism(x) => x.display_name(),
            Rune::Antitoxin(x) => x.display_name(),
            Rune::Aristocracy(x) => x.display_name(),
            Rune::Baelfire(x) => x.display_name(),
            Rune::Balthazar(x) => x.display_name(),
            Rune::Berserker(x) => x.display_name(),
            Rune::Brawler(x) => x.display_name(),
            Rune::Cavalier(x) => x.display_name(),
            Rune::Centaur(x) => x.display_name(),
            Rune::Chronomancer(x) => x.display_name(),
            Rune::Citadel(x) => x.display_name(),
            Rune::Daredevil(x) => x.display_name(),
            Rune::Deadeye(x) => x.display_name(),
            Rune::Defender(x) => x.display_name(),
            Rune::Divinity(x) => x.display_name(),
            Rune::Dolyak(x) => x.display_name(),
            Rune::Dragonhunter(x) => x.display_name(),
            Rune::Druid(x) => x.display_name(),
            Rune::Durability(x) => x.display_name(),
            Rune::Dwayna(x) => x.display_name(),
            Rune::Eagle(x) => x.display_name(),
            Rune::Earth(x) => x.display_name(),
            Rune::Elementalist(x) => x.display_name(),
            Rune::Engineer(x) => x.display_name(),
            Rune::Evasion(x) => x.display_name(),
            Rune::Exuberance(x) => x.display_name(),
            Rune::Fire(x) => x.display_name(),
            Rune::Firebrand(x) => x.display_name(),
            Rune::Fireworks(x) => x.display_name(),
            Rune::FlameLegion(x) => x.display_name(),
            Rune::Flock(x) => x.display_name(),
            Rune::Forgeman(x) => x.display_name(),
            Rune::Golemancer(x) => x.display_name(),
            Rune::Grenth(x) => x.display_name(),
            Rune::Grove(x) => x.display_name(),
            Rune::Guardian(x) => x.display_name(),
            Rune::Herald(x) => x.display_name(),
            Rune::Hoelbrak(x) => x.display_name(),
            Rune::Holosmith(x) => x.display_name(),
            Rune::Ice(x) => x.display_name(),
            Rune::Infiltration(x) => x.display_name(),
            Rune::Krait(x) => x.display_name(),
            Rune::Leadership(x) => x.display_name(),
            Rune::Lich(x) => x.display_name(),
            Rune::Lyssa(x) => x.display_name(),
            Rune::MadKing(x) => x.display_name(),
            Rune::Melandru(x) => x.display_name(),
            Rune::Mercy(x) => x.display_name(),
            Rune::Mesmer(x) => x.display_name(),
            Rune::Mirage(x) => x.display_name(),
            Rune::Monk(x) => x.display_name(),
            Rune::NaturesBounty(x) => x.display_name(),
            Rune::Necromancer(x) => x.display_name(),
            Rune::Nightmare(x) => x.display_name(),
            Rune::Ogre(x) => x.display_name(),
            Rune::Orr(x) => x.display_name(),
            Rune::Pack(x) => x.display_name(),
            Rune::Perplexity(x) => x.display_name(),
            Rune::Privateer(x) => x.display_name(),
            Rune::Radiance(x) => x.display_name(),
            Rune::Rage(x) => x.display_name(),
            Rune::Ranger(x) => x.display_name(),
            Rune::RataSum(x) => x.display_name(),
            Rune::Reaper(x) => x.display_name(),
            Rune::Rebirth(x) => x.display_name(),
            Rune::Renegade(x) => x.display_name(),
            Rune::Resistance(x) => x.display_name(),
            Rune::Revenant(x) => x.display_name(),
            Rune::Sanctuary(x) => x.display_name(),
            Rune::Scavenging(x) => x.display_name(),
            Rune::Scholar(x) => x.display_name(),
            Rune::Scourge(x) => x.display_name(),
            Rune::Scrapper(x) => x.display_name(),
            Rune::Snowfall(x) => x.display_name(),
            Rune::Soulbeast(x) => x.display_name(),
            Rune::Speed(x) => x.display_name(),
            Rune::Spellbreaker(x) => x.display_name(),
            Rune::Stars(x) => x.display_name(),
            Rune::Strength(x) => x.display_name(),
            Rune::Sunless(x) => x.display_name(),
            Rune::Surging(x) => x.display_name(),
            Rune::Svanir(x) => x.display_name(),
            Rune::Tempest(x) => x.display_name(),
            Rune::Thief(x) => x.display_name(),
            Rune::Thorns(x) => x.display_name(),
            Rune::Tormenting(x) => x.display_name(),
            Rune::Trapper(x) => x.display_name(),
            Rune::Traveler(x) => x.display_name(),
            Rune::Trooper(x) => x.display_name(),
            Rune::Undead(x) => x.display_name(),
            Rune::Vampirism(x) => x.display_name(),
            Rune::Warrior(x) => x.display_name(),
            Rune::Water(x) => x.display_name(),
            Rune::Weaver(x) => x.display_name(),
            Rune::Wurm(x) => x.display_name(),
            Rune::Zephyrite(x) => x.display_name(),
        }
    }
}
impl Effect for Rune {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Rune::NoRune(x) => x.add_permanent(s, m),
            Rune::Adventurer(x) => x.add_permanent(s, m),
            Rune::Afflicted(x) => x.add_permanent(s, m),
            Rune::Air(x) => x.add_permanent(s, m),
            Rune::Altruism(x) => x.add_permanent(s, m),
            Rune::Antitoxin(x) => x.add_permanent(s, m),
            Rune::Aristocracy(x) => x.add_permanent(s, m),
            Rune::Baelfire(x) => x.add_permanent(s, m),
            Rune::Balthazar(x) => x.add_permanent(s, m),
            Rune::Berserker(x) => x.add_permanent(s, m),
            Rune::Brawler(x) => x.add_permanent(s, m),
            Rune::Cavalier(x) => x.add_permanent(s, m),
            Rune::Centaur(x) => x.add_permanent(s, m),
            Rune::Chronomancer(x) => x.add_permanent(s, m),
            Rune::Citadel(x) => x.add_permanent(s, m),
            Rune::Daredevil(x) => x.add_permanent(s, m),
            Rune::Deadeye(x) => x.add_permanent(s, m),
            Rune::Defender(x) => x.add_permanent(s, m),
            Rune::Divinity(x) => x.add_permanent(s, m),
            Rune::Dolyak(x) => x.add_permanent(s, m),
            Rune::Dragonhunter(x) => x.add_permanent(s, m),
            Rune::Druid(x) => x.add_permanent(s, m),
            Rune::Durability(x) => x.add_permanent(s, m),
            Rune::Dwayna(x) => x.add_permanent(s, m),
            Rune::Eagle(x) => x.add_permanent(s, m),
            Rune::Earth(x) => x.add_permanent(s, m),
            Rune::Elementalist(x) => x.add_permanent(s, m),
            Rune::Engineer(x) => x.add_permanent(s, m),
            Rune::Evasion(x) => x.add_permanent(s, m),
            Rune::Exuberance(x) => x.add_permanent(s, m),
            Rune::Fire(x) => x.add_permanent(s, m),
            Rune::Firebrand(x) => x.add_permanent(s, m),
            Rune::Fireworks(x) => x.add_permanent(s, m),
            Rune::FlameLegion(x) => x.add_permanent(s, m),
            Rune::Flock(x) => x.add_permanent(s, m),
            Rune::Forgeman(x) => x.add_permanent(s, m),
            Rune::Golemancer(x) => x.add_permanent(s, m),
            Rune::Grenth(x) => x.add_permanent(s, m),
            Rune::Grove(x) => x.add_permanent(s, m),
            Rune::Guardian(x) => x.add_permanent(s, m),
            Rune::Herald(x) => x.add_permanent(s, m),
            Rune::Hoelbrak(x) => x.add_permanent(s, m),
            Rune::Holosmith(x) => x.add_permanent(s, m),
            Rune::Ice(x) => x.add_permanent(s, m),
            Rune::Infiltration(x) => x.add_permanent(s, m),
            Rune::Krait(x) => x.add_permanent(s, m),
            Rune::Leadership(x) => x.add_permanent(s, m),
            Rune::Lich(x) => x.add_permanent(s, m),
            Rune::Lyssa(x) => x.add_permanent(s, m),
            Rune::MadKing(x) => x.add_permanent(s, m),
            Rune::Melandru(x) => x.add_permanent(s, m),
            Rune::Mercy(x) => x.add_permanent(s, m),
            Rune::Mesmer(x) => x.add_permanent(s, m),
            Rune::Mirage(x) => x.add_permanent(s, m),
            Rune::Monk(x) => x.add_permanent(s, m),
            Rune::NaturesBounty(x) => x.add_permanent(s, m),
            Rune::Necromancer(x) => x.add_permanent(s, m),
            Rune::Nightmare(x) => x.add_permanent(s, m),
            Rune::Ogre(x) => x.add_permanent(s, m),
            Rune::Orr(x) => x.add_permanent(s, m),
            Rune::Pack(x) => x.add_permanent(s, m),
            Rune::Perplexity(x) => x.add_permanent(s, m),
            Rune::Privateer(x) => x.add_permanent(s, m),
            Rune::Radiance(x) => x.add_permanent(s, m),
            Rune::Rage(x) => x.add_permanent(s, m),
            Rune::Ranger(x) => x.add_permanent(s, m),
            Rune::RataSum(x) => x.add_permanent(s, m),
            Rune::Reaper(x) => x.add_permanent(s, m),
            Rune::Rebirth(x) => x.add_permanent(s, m),
            Rune::Renegade(x) => x.add_permanent(s, m),
            Rune::Resistance(x) => x.add_permanent(s, m),
            Rune::Revenant(x) => x.add_permanent(s, m),
            Rune::Sanctuary(x) => x.add_permanent(s, m),
            Rune::Scavenging(x) => x.add_permanent(s, m),
            Rune::Scholar(x) => x.add_permanent(s, m),
            Rune::Scourge(x) => x.add_permanent(s, m),
            Rune::Scrapper(x) => x.add_permanent(s, m),
            Rune::Snowfall(x) => x.add_permanent(s, m),
            Rune::Soulbeast(x) => x.add_permanent(s, m),
            Rune::Speed(x) => x.add_permanent(s, m),
            Rune::Spellbreaker(x) => x.add_permanent(s, m),
            Rune::Stars(x) => x.add_permanent(s, m),
            Rune::Strength(x) => x.add_permanent(s, m),
            Rune::Sunless(x) => x.add_permanent(s, m),
            Rune::Surging(x) => x.add_permanent(s, m),
            Rune::Svanir(x) => x.add_permanent(s, m),
            Rune::Tempest(x) => x.add_permanent(s, m),
            Rune::Thief(x) => x.add_permanent(s, m),
            Rune::Thorns(x) => x.add_permanent(s, m),
            Rune::Tormenting(x) => x.add_permanent(s, m),
            Rune::Trapper(x) => x.add_permanent(s, m),
            Rune::Traveler(x) => x.add_permanent(s, m),
            Rune::Trooper(x) => x.add_permanent(s, m),
            Rune::Undead(x) => x.add_permanent(s, m),
            Rune::Vampirism(x) => x.add_permanent(s, m),
            Rune::Warrior(x) => x.add_permanent(s, m),
            Rune::Water(x) => x.add_permanent(s, m),
            Rune::Weaver(x) => x.add_permanent(s, m),
            Rune::Wurm(x) => x.add_permanent(s, m),
            Rune::Zephyrite(x) => x.add_permanent(s, m),
        }
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Rune::NoRune(x) => x.distribute(s, m),
            Rune::Adventurer(x) => x.distribute(s, m),
            Rune::Afflicted(x) => x.distribute(s, m),
            Rune::Air(x) => x.distribute(s, m),
            Rune::Altruism(x) => x.distribute(s, m),
            Rune::Antitoxin(x) => x.distribute(s, m),
            Rune::Aristocracy(x) => x.distribute(s, m),
            Rune::Baelfire(x) => x.distribute(s, m),
            Rune::Balthazar(x) => x.distribute(s, m),
            Rune::Berserker(x) => x.distribute(s, m),
            Rune::Brawler(x) => x.distribute(s, m),
            Rune::Cavalier(x) => x.distribute(s, m),
            Rune::Centaur(x) => x.distribute(s, m),
            Rune::Chronomancer(x) => x.distribute(s, m),
            Rune::Citadel(x) => x.distribute(s, m),
            Rune::Daredevil(x) => x.distribute(s, m),
            Rune::Deadeye(x) => x.distribute(s, m),
            Rune::Defender(x) => x.distribute(s, m),
            Rune::Divinity(x) => x.distribute(s, m),
            Rune::Dolyak(x) => x.distribute(s, m),
            Rune::Dragonhunter(x) => x.distribute(s, m),
            Rune::Druid(x) => x.distribute(s, m),
            Rune::Durability(x) => x.distribute(s, m),
            Rune::Dwayna(x) => x.distribute(s, m),
            Rune::Eagle(x) => x.distribute(s, m),
            Rune::Earth(x) => x.distribute(s, m),
            Rune::Elementalist(x) => x.distribute(s, m),
            Rune::Engineer(x) => x.distribute(s, m),
            Rune::Evasion(x) => x.distribute(s, m),
            Rune::Exuberance(x) => x.distribute(s, m),
            Rune::Fire(x) => x.distribute(s, m),
            Rune::Firebrand(x) => x.distribute(s, m),
            Rune::Fireworks(x) => x.distribute(s, m),
            Rune::FlameLegion(x) => x.distribute(s, m),
            Rune::Flock(x) => x.distribute(s, m),
            Rune::Forgeman(x) => x.distribute(s, m),
            Rune::Golemancer(x) => x.distribute(s, m),
            Rune::Grenth(x) => x.distribute(s, m),
            Rune::Grove(x) => x.distribute(s, m),
            Rune::Guardian(x) => x.distribute(s, m),
            Rune::Herald(x) => x.distribute(s, m),
            Rune::Hoelbrak(x) => x.distribute(s, m),
            Rune::Holosmith(x) => x.distribute(s, m),
            Rune::Ice(x) => x.distribute(s, m),
            Rune::Infiltration(x) => x.distribute(s, m),
            Rune::Krait(x) => x.distribute(s, m),
            Rune::Leadership(x) => x.distribute(s, m),
            Rune::Lich(x) => x.distribute(s, m),
            Rune::Lyssa(x) => x.distribute(s, m),
            Rune::MadKing(x) => x.distribute(s, m),
            Rune::Melandru(x) => x.distribute(s, m),
            Rune::Mercy(x) => x.distribute(s, m),
            Rune::Mesmer(x) => x.distribute(s, m),
            Rune::Mirage(x) => x.distribute(s, m),
            Rune::Monk(x) => x.distribute(s, m),
            Rune::NaturesBounty(x) => x.distribute(s, m),
            Rune::Necromancer(x) => x.distribute(s, m),
            Rune::Nightmare(x) => x.distribute(s, m),
            Rune::Ogre(x) => x.distribute(s, m),
            Rune::Orr(x) => x.distribute(s, m),
            Rune::Pack(x) => x.distribute(s, m),
            Rune::Perplexity(x) => x.distribute(s, m),
            Rune::Privateer(x) => x.distribute(s, m),
            Rune::Radiance(x) => x.distribute(s, m),
            Rune::Rage(x) => x.distribute(s, m),
            Rune::Ranger(x) => x.distribute(s, m),
            Rune::RataSum(x) => x.distribute(s, m),
            Rune::Reaper(x) => x.distribute(s, m),
            Rune::Rebirth(x) => x.distribute(s, m),
            Rune::Renegade(x) => x.distribute(s, m),
            Rune::Resistance(x) => x.distribute(s, m),
            Rune::Revenant(x) => x.distribute(s, m),
            Rune::Sanctuary(x) => x.distribute(s, m),
            Rune::Scavenging(x) => x.distribute(s, m),
            Rune::Scholar(x) => x.distribute(s, m),
            Rune::Scourge(x) => x.distribute(s, m),
            Rune::Scrapper(x) => x.distribute(s, m),
            Rune::Snowfall(x) => x.distribute(s, m),
            Rune::Soulbeast(x) => x.distribute(s, m),
            Rune::Speed(x) => x.distribute(s, m),
            Rune::Spellbreaker(x) => x.distribute(s, m),
            Rune::Stars(x) => x.distribute(s, m),
            Rune::Strength(x) => x.distribute(s, m),
            Rune::Sunless(x) => x.distribute(s, m),
            Rune::Surging(x) => x.distribute(s, m),
            Rune::Svanir(x) => x.distribute(s, m),
            Rune::Tempest(x) => x.distribute(s, m),
            Rune::Thief(x) => x.distribute(s, m),
            Rune::Thorns(x) => x.distribute(s, m),
            Rune::Tormenting(x) => x.distribute(s, m),
            Rune::Trapper(x) => x.distribute(s, m),
            Rune::Traveler(x) => x.distribute(s, m),
            Rune::Trooper(x) => x.distribute(s, m),
            Rune::Undead(x) => x.distribute(s, m),
            Rune::Vampirism(x) => x.distribute(s, m),
            Rune::Warrior(x) => x.distribute(s, m),
            Rune::Water(x) => x.distribute(s, m),
            Rune::Weaver(x) => x.distribute(s, m),
            Rune::Wurm(x) => x.distribute(s, m),
            Rune::Zephyrite(x) => x.distribute(s, m),
        }
    }
    fn add_temporary(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Rune::NoRune(x) => x.add_temporary(s, m),
            Rune::Adventurer(x) => x.add_temporary(s, m),
            Rune::Afflicted(x) => x.add_temporary(s, m),
            Rune::Air(x) => x.add_temporary(s, m),
            Rune::Altruism(x) => x.add_temporary(s, m),
            Rune::Antitoxin(x) => x.add_temporary(s, m),
            Rune::Aristocracy(x) => x.add_temporary(s, m),
            Rune::Baelfire(x) => x.add_temporary(s, m),
            Rune::Balthazar(x) => x.add_temporary(s, m),
            Rune::Berserker(x) => x.add_temporary(s, m),
            Rune::Brawler(x) => x.add_temporary(s, m),
            Rune::Cavalier(x) => x.add_temporary(s, m),
            Rune::Centaur(x) => x.add_temporary(s, m),
            Rune::Chronomancer(x) => x.add_temporary(s, m),
            Rune::Citadel(x) => x.add_temporary(s, m),
            Rune::Daredevil(x) => x.add_temporary(s, m),
            Rune::Deadeye(x) => x.add_temporary(s, m),
            Rune::Defender(x) => x.add_temporary(s, m),
            Rune::Divinity(x) => x.add_temporary(s, m),
            Rune::Dolyak(x) => x.add_temporary(s, m),
            Rune::Dragonhunter(x) => x.add_temporary(s, m),
            Rune::Druid(x) => x.add_temporary(s, m),
            Rune::Durability(x) => x.add_temporary(s, m),
            Rune::Dwayna(x) => x.add_temporary(s, m),
            Rune::Eagle(x) => x.add_temporary(s, m),
            Rune::Earth(x) => x.add_temporary(s, m),
            Rune::Elementalist(x) => x.add_temporary(s, m),
            Rune::Engineer(x) => x.add_temporary(s, m),
            Rune::Evasion(x) => x.add_temporary(s, m),
            Rune::Exuberance(x) => x.add_temporary(s, m),
            Rune::Fire(x) => x.add_temporary(s, m),
            Rune::Firebrand(x) => x.add_temporary(s, m),
            Rune::Fireworks(x) => x.add_temporary(s, m),
            Rune::FlameLegion(x) => x.add_temporary(s, m),
            Rune::Flock(x) => x.add_temporary(s, m),
            Rune::Forgeman(x) => x.add_temporary(s, m),
            Rune::Golemancer(x) => x.add_temporary(s, m),
            Rune::Grenth(x) => x.add_temporary(s, m),
            Rune::Grove(x) => x.add_temporary(s, m),
            Rune::Guardian(x) => x.add_temporary(s, m),
            Rune::Herald(x) => x.add_temporary(s, m),
            Rune::Hoelbrak(x) => x.add_temporary(s, m),
            Rune::Holosmith(x) => x.add_temporary(s, m),
            Rune::Ice(x) => x.add_temporary(s, m),
            Rune::Infiltration(x) => x.add_temporary(s, m),
            Rune::Krait(x) => x.add_temporary(s, m),
            Rune::Leadership(x) => x.add_temporary(s, m),
            Rune::Lich(x) => x.add_temporary(s, m),
            Rune::Lyssa(x) => x.add_temporary(s, m),
            Rune::MadKing(x) => x.add_temporary(s, m),
            Rune::Melandru(x) => x.add_temporary(s, m),
            Rune::Mercy(x) => x.add_temporary(s, m),
            Rune::Mesmer(x) => x.add_temporary(s, m),
            Rune::Mirage(x) => x.add_temporary(s, m),
            Rune::Monk(x) => x.add_temporary(s, m),
            Rune::NaturesBounty(x) => x.add_temporary(s, m),
            Rune::Necromancer(x) => x.add_temporary(s, m),
            Rune::Nightmare(x) => x.add_temporary(s, m),
            Rune::Ogre(x) => x.add_temporary(s, m),
            Rune::Orr(x) => x.add_temporary(s, m),
            Rune::Pack(x) => x.add_temporary(s, m),
            Rune::Perplexity(x) => x.add_temporary(s, m),
            Rune::Privateer(x) => x.add_temporary(s, m),
            Rune::Radiance(x) => x.add_temporary(s, m),
            Rune::Rage(x) => x.add_temporary(s, m),
            Rune::Ranger(x) => x.add_temporary(s, m),
            Rune::RataSum(x) => x.add_temporary(s, m),
            Rune::Reaper(x) => x.add_temporary(s, m),
            Rune::Rebirth(x) => x.add_temporary(s, m),
            Rune::Renegade(x) => x.add_temporary(s, m),
            Rune::Resistance(x) => x.add_temporary(s, m),
            Rune::Revenant(x) => x.add_temporary(s, m),
            Rune::Sanctuary(x) => x.add_temporary(s, m),
            Rune::Scavenging(x) => x.add_temporary(s, m),
            Rune::Scholar(x) => x.add_temporary(s, m),
            Rune::Scourge(x) => x.add_temporary(s, m),
            Rune::Scrapper(x) => x.add_temporary(s, m),
            Rune::Snowfall(x) => x.add_temporary(s, m),
            Rune::Soulbeast(x) => x.add_temporary(s, m),
            Rune::Speed(x) => x.add_temporary(s, m),
            Rune::Spellbreaker(x) => x.add_temporary(s, m),
            Rune::Stars(x) => x.add_temporary(s, m),
            Rune::Strength(x) => x.add_temporary(s, m),
            Rune::Sunless(x) => x.add_temporary(s, m),
            Rune::Surging(x) => x.add_temporary(s, m),
            Rune::Svanir(x) => x.add_temporary(s, m),
            Rune::Tempest(x) => x.add_temporary(s, m),
            Rune::Thief(x) => x.add_temporary(s, m),
            Rune::Thorns(x) => x.add_temporary(s, m),
            Rune::Tormenting(x) => x.add_temporary(s, m),
            Rune::Trapper(x) => x.add_temporary(s, m),
            Rune::Traveler(x) => x.add_temporary(s, m),
            Rune::Trooper(x) => x.add_temporary(s, m),
            Rune::Undead(x) => x.add_temporary(s, m),
            Rune::Vampirism(x) => x.add_temporary(s, m),
            Rune::Warrior(x) => x.add_temporary(s, m),
            Rune::Water(x) => x.add_temporary(s, m),
            Rune::Weaver(x) => x.add_temporary(s, m),
            Rune::Wurm(x) => x.add_temporary(s, m),
            Rune::Zephyrite(x) => x.add_temporary(s, m),
        }
    }
}
impl From<NoRune> for Rune {
    fn from(x: NoRune) -> Rune { Rune::NoRune(x) }
}
impl From<Adventurer> for Rune {
    fn from(x: Adventurer) -> Rune { Rune::Adventurer(x) }
}
impl From<Afflicted> for Rune {
    fn from(x: Afflicted) -> Rune { Rune::Afflicted(x) }
}
impl From<Air> for Rune {
    fn from(x: Air) -> Rune { Rune::Air(x) }
}
impl From<Altruism> for Rune {
    fn from(x: Altruism) -> Rune { Rune::Altruism(x) }
}
impl From<Antitoxin> for Rune {
    fn from(x: Antitoxin) -> Rune { Rune::Antitoxin(x) }
}
impl From<Aristocracy> for Rune {
    fn from(x: Aristocracy) -> Rune { Rune::Aristocracy(x) }
}
impl From<Baelfire> for Rune {
    fn from(x: Baelfire) -> Rune { Rune::Baelfire(x) }
}
impl From<Balthazar> for Rune {
    fn from(x: Balthazar) -> Rune { Rune::Balthazar(x) }
}
impl From<Berserker> for Rune {
    fn from(x: Berserker) -> Rune { Rune::Berserker(x) }
}
impl From<Brawler> for Rune {
    fn from(x: Brawler) -> Rune { Rune::Brawler(x) }
}
impl From<Cavalier> for Rune {
    fn from(x: Cavalier) -> Rune { Rune::Cavalier(x) }
}
impl From<Centaur> for Rune {
    fn from(x: Centaur) -> Rune { Rune::Centaur(x) }
}
impl From<Chronomancer> for Rune {
    fn from(x: Chronomancer) -> Rune { Rune::Chronomancer(x) }
}
impl From<Citadel> for Rune {
    fn from(x: Citadel) -> Rune { Rune::Citadel(x) }
}
impl From<Daredevil> for Rune {
    fn from(x: Daredevil) -> Rune { Rune::Daredevil(x) }
}
impl From<Deadeye> for Rune {
    fn from(x: Deadeye) -> Rune { Rune::Deadeye(x) }
}
impl From<Defender> for Rune {
    fn from(x: Defender) -> Rune { Rune::Defender(x) }
}
impl From<Divinity> for Rune {
    fn from(x: Divinity) -> Rune { Rune::Divinity(x) }
}
impl From<Dolyak> for Rune {
    fn from(x: Dolyak) -> Rune { Rune::Dolyak(x) }
}
impl From<Dragonhunter> for Rune {
    fn from(x: Dragonhunter) -> Rune { Rune::Dragonhunter(x) }
}
impl From<Druid> for Rune {
    fn from(x: Druid) -> Rune { Rune::Druid(x) }
}
impl From<Durability> for Rune {
    fn from(x: Durability) -> Rune { Rune::Durability(x) }
}
impl From<Dwayna> for Rune {
    fn from(x: Dwayna) -> Rune { Rune::Dwayna(x) }
}
impl From<Eagle> for Rune {
    fn from(x: Eagle) -> Rune { Rune::Eagle(x) }
}
impl From<Earth> for Rune {
    fn from(x: Earth) -> Rune { Rune::Earth(x) }
}
impl From<Elementalist> for Rune {
    fn from(x: Elementalist) -> Rune { Rune::Elementalist(x) }
}
impl From<Engineer> for Rune {
    fn from(x: Engineer) -> Rune { Rune::Engineer(x) }
}
impl From<Evasion> for Rune {
    fn from(x: Evasion) -> Rune { Rune::Evasion(x) }
}
impl From<Exuberance> for Rune {
    fn from(x: Exuberance) -> Rune { Rune::Exuberance(x) }
}
impl From<Fire> for Rune {
    fn from(x: Fire) -> Rune { Rune::Fire(x) }
}
impl From<Firebrand> for Rune {
    fn from(x: Firebrand) -> Rune { Rune::Firebrand(x) }
}
impl From<Fireworks> for Rune {
    fn from(x: Fireworks) -> Rune { Rune::Fireworks(x) }
}
impl From<FlameLegion> for Rune {
    fn from(x: FlameLegion) -> Rune { Rune::FlameLegion(x) }
}
impl From<Flock> for Rune {
    fn from(x: Flock) -> Rune { Rune::Flock(x) }
}
impl From<Forgeman> for Rune {
    fn from(x: Forgeman) -> Rune { Rune::Forgeman(x) }
}
impl From<Golemancer> for Rune {
    fn from(x: Golemancer) -> Rune { Rune::Golemancer(x) }
}
impl From<Grenth> for Rune {
    fn from(x: Grenth) -> Rune { Rune::Grenth(x) }
}
impl From<Grove> for Rune {
    fn from(x: Grove) -> Rune { Rune::Grove(x) }
}
impl From<Guardian> for Rune {
    fn from(x: Guardian) -> Rune { Rune::Guardian(x) }
}
impl From<Herald> for Rune {
    fn from(x: Herald) -> Rune { Rune::Herald(x) }
}
impl From<Hoelbrak> for Rune {
    fn from(x: Hoelbrak) -> Rune { Rune::Hoelbrak(x) }
}
impl From<Holosmith> for Rune {
    fn from(x: Holosmith) -> Rune { Rune::Holosmith(x) }
}
impl From<Ice> for Rune {
    fn from(x: Ice) -> Rune { Rune::Ice(x) }
}
impl From<Infiltration> for Rune {
    fn from(x: Infiltration) -> Rune { Rune::Infiltration(x) }
}
impl From<Krait> for Rune {
    fn from(x: Krait) -> Rune { Rune::Krait(x) }
}
impl From<Leadership> for Rune {
    fn from(x: Leadership) -> Rune { Rune::Leadership(x) }
}
impl From<Lich> for Rune {
    fn from(x: Lich) -> Rune { Rune::Lich(x) }
}
impl From<Lyssa> for Rune {
    fn from(x: Lyssa) -> Rune { Rune::Lyssa(x) }
}
impl From<MadKing> for Rune {
    fn from(x: MadKing) -> Rune { Rune::MadKing(x) }
}
impl From<Melandru> for Rune {
    fn from(x: Melandru) -> Rune { Rune::Melandru(x) }
}
impl From<Mercy> for Rune {
    fn from(x: Mercy) -> Rune { Rune::Mercy(x) }
}
impl From<Mesmer> for Rune {
    fn from(x: Mesmer) -> Rune { Rune::Mesmer(x) }
}
impl From<Mirage> for Rune {
    fn from(x: Mirage) -> Rune { Rune::Mirage(x) }
}
impl From<Monk> for Rune {
    fn from(x: Monk) -> Rune { Rune::Monk(x) }
}
impl From<NaturesBounty> for Rune {
    fn from(x: NaturesBounty) -> Rune { Rune::NaturesBounty(x) }
}
impl From<Necromancer> for Rune {
    fn from(x: Necromancer) -> Rune { Rune::Necromancer(x) }
}
impl From<Nightmare> for Rune {
    fn from(x: Nightmare) -> Rune { Rune::Nightmare(x) }
}
impl From<Ogre> for Rune {
    fn from(x: Ogre) -> Rune { Rune::Ogre(x) }
}
impl From<Orr> for Rune {
    fn from(x: Orr) -> Rune { Rune::Orr(x) }
}
impl From<Pack> for Rune {
    fn from(x: Pack) -> Rune { Rune::Pack(x) }
}
impl From<Perplexity> for Rune {
    fn from(x: Perplexity) -> Rune { Rune::Perplexity(x) }
}
impl From<Privateer> for Rune {
    fn from(x: Privateer) -> Rune { Rune::Privateer(x) }
}
impl From<Radiance> for Rune {
    fn from(x: Radiance) -> Rune { Rune::Radiance(x) }
}
impl From<Rage> for Rune {
    fn from(x: Rage) -> Rune { Rune::Rage(x) }
}
impl From<Ranger> for Rune {
    fn from(x: Ranger) -> Rune { Rune::Ranger(x) }
}
impl From<RataSum> for Rune {
    fn from(x: RataSum) -> Rune { Rune::RataSum(x) }
}
impl From<Reaper> for Rune {
    fn from(x: Reaper) -> Rune { Rune::Reaper(x) }
}
impl From<Rebirth> for Rune {
    fn from(x: Rebirth) -> Rune { Rune::Rebirth(x) }
}
impl From<Renegade> for Rune {
    fn from(x: Renegade) -> Rune { Rune::Renegade(x) }
}
impl From<Resistance> for Rune {
    fn from(x: Resistance) -> Rune { Rune::Resistance(x) }
}
impl From<Revenant> for Rune {
    fn from(x: Revenant) -> Rune { Rune::Revenant(x) }
}
impl From<Sanctuary> for Rune {
    fn from(x: Sanctuary) -> Rune { Rune::Sanctuary(x) }
}
impl From<Scavenging> for Rune {
    fn from(x: Scavenging) -> Rune { Rune::Scavenging(x) }
}
impl From<Scholar> for Rune {
    fn from(x: Scholar) -> Rune { Rune::Scholar(x) }
}
impl From<Scourge> for Rune {
    fn from(x: Scourge) -> Rune { Rune::Scourge(x) }
}
impl From<Scrapper> for Rune {
    fn from(x: Scrapper) -> Rune { Rune::Scrapper(x) }
}
impl From<Snowfall> for Rune {
    fn from(x: Snowfall) -> Rune { Rune::Snowfall(x) }
}
impl From<Soulbeast> for Rune {
    fn from(x: Soulbeast) -> Rune { Rune::Soulbeast(x) }
}
impl From<Speed> for Rune {
    fn from(x: Speed) -> Rune { Rune::Speed(x) }
}
impl From<Spellbreaker> for Rune {
    fn from(x: Spellbreaker) -> Rune { Rune::Spellbreaker(x) }
}
impl From<Stars> for Rune {
    fn from(x: Stars) -> Rune { Rune::Stars(x) }
}
impl From<Strength> for Rune {
    fn from(x: Strength) -> Rune { Rune::Strength(x) }
}
impl From<Sunless> for Rune {
    fn from(x: Sunless) -> Rune { Rune::Sunless(x) }
}
impl From<Surging> for Rune {
    fn from(x: Surging) -> Rune { Rune::Surging(x) }
}
impl From<Svanir> for Rune {
    fn from(x: Svanir) -> Rune { Rune::Svanir(x) }
}
impl From<Tempest> for Rune {
    fn from(x: Tempest) -> Rune { Rune::Tempest(x) }
}
impl From<Thief> for Rune {
    fn from(x: Thief) -> Rune { Rune::Thief(x) }
}
impl From<Thorns> for Rune {
    fn from(x: Thorns) -> Rune { Rune::Thorns(x) }
}
impl From<Tormenting> for Rune {
    fn from(x: Tormenting) -> Rune { Rune::Tormenting(x) }
}
impl From<Trapper> for Rune {
    fn from(x: Trapper) -> Rune { Rune::Trapper(x) }
}
impl From<Traveler> for Rune {
    fn from(x: Traveler) -> Rune { Rune::Traveler(x) }
}
impl From<Trooper> for Rune {
    fn from(x: Trooper) -> Rune { Rune::Trooper(x) }
}
impl From<Undead> for Rune {
    fn from(x: Undead) -> Rune { Rune::Undead(x) }
}
impl From<Vampirism> for Rune {
    fn from(x: Vampirism) -> Rune { Rune::Vampirism(x) }
}
impl From<Warrior> for Rune {
    fn from(x: Warrior) -> Rune { Rune::Warrior(x) }
}
impl From<Water> for Rune {
    fn from(x: Water) -> Rune { Rune::Water(x) }
}
impl From<Weaver> for Rune {
    fn from(x: Weaver) -> Rune { Rune::Weaver(x) }
}
impl From<Wurm> for Rune {
    fn from(x: Wurm) -> Rune { Rune::Wurm(x) }
}
impl From<Zephyrite> for Rune {
    fn from(x: Zephyrite) -> Rune { Rune::Zephyrite(x) }
}
impl Vary for Rune {
    fn num_fields(&self) -> usize { 1 }
    fn num_field_values(&self, _field: usize) -> u16 { 100 }
    fn get_field(&self, _field: usize) -> u16 {
        self.index() as u16
    }
    fn set_field(&mut self, _field: usize, value: u16) {
        *self = Rune::from_index(value as usize);
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
pub enum KnownRune {
    NoRune(NoRune),
    Adventurer(Adventurer),
    Afflicted(Afflicted),
    Air(Air),
    Altruism(Altruism),
    Antitoxin(Antitoxin),
    Aristocracy(Aristocracy),
    Baelfire(Baelfire),
    Balthazar(Balthazar),
    Berserker(Berserker),
    Brawler(Brawler),
    Cavalier(Cavalier),
    Centaur(Centaur),
    Chronomancer(Chronomancer),
    Citadel(Citadel),
    Deadeye(Deadeye),
    Defender(Defender),
    Divinity(Divinity),
    Dolyak(Dolyak),
    Dragonhunter(Dragonhunter),
    Druid(Druid),
    Durability(Durability),
    Dwayna(Dwayna),
    Eagle(Eagle),
    Earth(Earth),
    Elementalist(Elementalist),
    Engineer(Engineer),
    Evasion(Evasion),
    Exuberance(Exuberance),
    Fire(Fire),
    Firebrand(Firebrand),
    Fireworks(Fireworks),
    FlameLegion(FlameLegion),
    Flock(Flock),
    Forgeman(Forgeman),
    Golemancer(Golemancer),
    Grove(Grove),
    Guardian(Guardian),
    Herald(Herald),
    Hoelbrak(Hoelbrak),
    Holosmith(Holosmith),
    Ice(Ice),
    Krait(Krait),
    Leadership(Leadership),
    Lich(Lich),
    Lyssa(Lyssa),
    MadKing(MadKing),
    Melandru(Melandru),
    Mercy(Mercy),
    Mirage(Mirage),
    Monk(Monk),
    NaturesBounty(NaturesBounty),
    Necromancer(Necromancer),
    Nightmare(Nightmare),
    Ogre(Ogre),
    Orr(Orr),
    Pack(Pack),
    Perplexity(Perplexity),
    Privateer(Privateer),
    Radiance(Radiance),
    Rage(Rage),
    Ranger(Ranger),
    RataSum(RataSum),
    Renegade(Renegade),
    Resistance(Resistance),
    Revenant(Revenant),
    Sanctuary(Sanctuary),
    Scavenging(Scavenging),
    Scholar(Scholar),
    Scourge(Scourge),
    Snowfall(Snowfall),
    Soulbeast(Soulbeast),
    Speed(Speed),
    Stars(Stars),
    Strength(Strength),
    Tempest(Tempest),
    Thief(Thief),
    Thorns(Thorns),
    Tormenting(Tormenting),
    Trapper(Trapper),
    Traveler(Traveler),
    Trooper(Trooper),
    Undead(Undead),
    Vampirism(Vampirism),
    Warrior(Warrior),
    Water(Water),
    Weaver(Weaver),
    Wurm(Wurm),
}
impl Default for KnownRune {
    fn default() -> KnownRune { KnownRune::NoRune(NoRune) }
}
impl KnownRune {
    pub const COUNT: usize = 88;
    pub fn index(self) -> usize {
        match self {
            KnownRune::NoRune(NoRune) => 0,
            KnownRune::Adventurer(Adventurer) => 1,
            KnownRune::Afflicted(Afflicted) => 2,
            KnownRune::Air(Air) => 3,
            KnownRune::Altruism(Altruism) => 4,
            KnownRune::Antitoxin(Antitoxin) => 5,
            KnownRune::Aristocracy(Aristocracy) => 6,
            KnownRune::Baelfire(Baelfire) => 7,
            KnownRune::Balthazar(Balthazar) => 8,
            KnownRune::Berserker(Berserker) => 9,
            KnownRune::Brawler(Brawler) => 10,
            KnownRune::Cavalier(Cavalier) => 11,
            KnownRune::Centaur(Centaur) => 12,
            KnownRune::Chronomancer(Chronomancer) => 13,
            KnownRune::Citadel(Citadel) => 14,
            KnownRune::Deadeye(Deadeye) => 15,
            KnownRune::Defender(Defender) => 16,
            KnownRune::Divinity(Divinity) => 17,
            KnownRune::Dolyak(Dolyak) => 18,
            KnownRune::Dragonhunter(Dragonhunter) => 19,
            KnownRune::Druid(Druid) => 20,
            KnownRune::Durability(Durability) => 21,
            KnownRune::Dwayna(Dwayna) => 22,
            KnownRune::Eagle(Eagle) => 23,
            KnownRune::Earth(Earth) => 24,
            KnownRune::Elementalist(Elementalist) => 25,
            KnownRune::Engineer(Engineer) => 26,
            KnownRune::Evasion(Evasion) => 27,
            KnownRune::Exuberance(Exuberance) => 28,
            KnownRune::Fire(Fire) => 29,
            KnownRune::Firebrand(Firebrand) => 30,
            KnownRune::Fireworks(Fireworks) => 31,
            KnownRune::FlameLegion(FlameLegion) => 32,
            KnownRune::Flock(Flock) => 33,
            KnownRune::Forgeman(Forgeman) => 34,
            KnownRune::Golemancer(Golemancer) => 35,
            KnownRune::Grove(Grove) => 36,
            KnownRune::Guardian(Guardian) => 37,
            KnownRune::Herald(Herald) => 38,
            KnownRune::Hoelbrak(Hoelbrak) => 39,
            KnownRune::Holosmith(Holosmith) => 40,
            KnownRune::Ice(Ice) => 41,
            KnownRune::Krait(Krait) => 42,
            KnownRune::Leadership(Leadership) => 43,
            KnownRune::Lich(Lich) => 44,
            KnownRune::Lyssa(Lyssa) => 45,
            KnownRune::MadKing(MadKing) => 46,
            KnownRune::Melandru(Melandru) => 47,
            KnownRune::Mercy(Mercy) => 48,
            KnownRune::Mirage(Mirage) => 49,
            KnownRune::Monk(Monk) => 50,
            KnownRune::NaturesBounty(NaturesBounty) => 51,
            KnownRune::Necromancer(Necromancer) => 52,
            KnownRune::Nightmare(Nightmare) => 53,
            KnownRune::Ogre(Ogre) => 54,
            KnownRune::Orr(Orr) => 55,
            KnownRune::Pack(Pack) => 56,
            KnownRune::Perplexity(Perplexity) => 57,
            KnownRune::Privateer(Privateer) => 58,
            KnownRune::Radiance(Radiance) => 59,
            KnownRune::Rage(Rage) => 60,
            KnownRune::Ranger(Ranger) => 61,
            KnownRune::RataSum(RataSum) => 62,
            KnownRune::Renegade(Renegade) => 63,
            KnownRune::Resistance(Resistance) => 64,
            KnownRune::Revenant(Revenant) => 65,
            KnownRune::Sanctuary(Sanctuary) => 66,
            KnownRune::Scavenging(Scavenging) => 67,
            KnownRune::Scholar(Scholar) => 68,
            KnownRune::Scourge(Scourge) => 69,
            KnownRune::Snowfall(Snowfall) => 70,
            KnownRune::Soulbeast(Soulbeast) => 71,
            KnownRune::Speed(Speed) => 72,
            KnownRune::Stars(Stars) => 73,
            KnownRune::Strength(Strength) => 74,
            KnownRune::Tempest(Tempest) => 75,
            KnownRune::Thief(Thief) => 76,
            KnownRune::Thorns(Thorns) => 77,
            KnownRune::Tormenting(Tormenting) => 78,
            KnownRune::Trapper(Trapper) => 79,
            KnownRune::Traveler(Traveler) => 80,
            KnownRune::Trooper(Trooper) => 81,
            KnownRune::Undead(Undead) => 82,
            KnownRune::Vampirism(Vampirism) => 83,
            KnownRune::Warrior(Warrior) => 84,
            KnownRune::Water(Water) => 85,
            KnownRune::Weaver(Weaver) => 86,
            KnownRune::Wurm(Wurm) => 87,
        }
    }
    pub fn from_index(i: usize) -> KnownRune {
        match i {
            0 => KnownRune::NoRune(NoRune),
            1 => KnownRune::Adventurer(Adventurer),
            2 => KnownRune::Afflicted(Afflicted),
            3 => KnownRune::Air(Air),
            4 => KnownRune::Altruism(Altruism),
            5 => KnownRune::Antitoxin(Antitoxin),
            6 => KnownRune::Aristocracy(Aristocracy),
            7 => KnownRune::Baelfire(Baelfire),
            8 => KnownRune::Balthazar(Balthazar),
            9 => KnownRune::Berserker(Berserker),
            10 => KnownRune::Brawler(Brawler),
            11 => KnownRune::Cavalier(Cavalier),
            12 => KnownRune::Centaur(Centaur),
            13 => KnownRune::Chronomancer(Chronomancer),
            14 => KnownRune::Citadel(Citadel),
            15 => KnownRune::Deadeye(Deadeye),
            16 => KnownRune::Defender(Defender),
            17 => KnownRune::Divinity(Divinity),
            18 => KnownRune::Dolyak(Dolyak),
            19 => KnownRune::Dragonhunter(Dragonhunter),
            20 => KnownRune::Druid(Druid),
            21 => KnownRune::Durability(Durability),
            22 => KnownRune::Dwayna(Dwayna),
            23 => KnownRune::Eagle(Eagle),
            24 => KnownRune::Earth(Earth),
            25 => KnownRune::Elementalist(Elementalist),
            26 => KnownRune::Engineer(Engineer),
            27 => KnownRune::Evasion(Evasion),
            28 => KnownRune::Exuberance(Exuberance),
            29 => KnownRune::Fire(Fire),
            30 => KnownRune::Firebrand(Firebrand),
            31 => KnownRune::Fireworks(Fireworks),
            32 => KnownRune::FlameLegion(FlameLegion),
            33 => KnownRune::Flock(Flock),
            34 => KnownRune::Forgeman(Forgeman),
            35 => KnownRune::Golemancer(Golemancer),
            36 => KnownRune::Grove(Grove),
            37 => KnownRune::Guardian(Guardian),
            38 => KnownRune::Herald(Herald),
            39 => KnownRune::Hoelbrak(Hoelbrak),
            40 => KnownRune::Holosmith(Holosmith),
            41 => KnownRune::Ice(Ice),
            42 => KnownRune::Krait(Krait),
            43 => KnownRune::Leadership(Leadership),
            44 => KnownRune::Lich(Lich),
            45 => KnownRune::Lyssa(Lyssa),
            46 => KnownRune::MadKing(MadKing),
            47 => KnownRune::Melandru(Melandru),
            48 => KnownRune::Mercy(Mercy),
            49 => KnownRune::Mirage(Mirage),
            50 => KnownRune::Monk(Monk),
            51 => KnownRune::NaturesBounty(NaturesBounty),
            52 => KnownRune::Necromancer(Necromancer),
            53 => KnownRune::Nightmare(Nightmare),
            54 => KnownRune::Ogre(Ogre),
            55 => KnownRune::Orr(Orr),
            56 => KnownRune::Pack(Pack),
            57 => KnownRune::Perplexity(Perplexity),
            58 => KnownRune::Privateer(Privateer),
            59 => KnownRune::Radiance(Radiance),
            60 => KnownRune::Rage(Rage),
            61 => KnownRune::Ranger(Ranger),
            62 => KnownRune::RataSum(RataSum),
            63 => KnownRune::Renegade(Renegade),
            64 => KnownRune::Resistance(Resistance),
            65 => KnownRune::Revenant(Revenant),
            66 => KnownRune::Sanctuary(Sanctuary),
            67 => KnownRune::Scavenging(Scavenging),
            68 => KnownRune::Scholar(Scholar),
            69 => KnownRune::Scourge(Scourge),
            70 => KnownRune::Snowfall(Snowfall),
            71 => KnownRune::Soulbeast(Soulbeast),
            72 => KnownRune::Speed(Speed),
            73 => KnownRune::Stars(Stars),
            74 => KnownRune::Strength(Strength),
            75 => KnownRune::Tempest(Tempest),
            76 => KnownRune::Thief(Thief),
            77 => KnownRune::Thorns(Thorns),
            78 => KnownRune::Tormenting(Tormenting),
            79 => KnownRune::Trapper(Trapper),
            80 => KnownRune::Traveler(Traveler),
            81 => KnownRune::Trooper(Trooper),
            82 => KnownRune::Undead(Undead),
            83 => KnownRune::Vampirism(Vampirism),
            84 => KnownRune::Warrior(Warrior),
            85 => KnownRune::Water(Water),
            86 => KnownRune::Weaver(Weaver),
            87 => KnownRune::Wurm(Wurm),
            _ => panic!("index {} out of range for KnownRune", i),
        }
    }
    pub fn iter() -> impl Iterator<Item = KnownRune> {
        (0 .. KnownRune::COUNT).map(KnownRune::from_index)
    }
    pub fn display_name(self) -> &'static str {
        match self {
            KnownRune::NoRune(x) => x.display_name(),
            KnownRune::Adventurer(x) => x.display_name(),
            KnownRune::Afflicted(x) => x.display_name(),
            KnownRune::Air(x) => x.display_name(),
            KnownRune::Altruism(x) => x.display_name(),
            KnownRune::Antitoxin(x) => x.display_name(),
            KnownRune::Aristocracy(x) => x.display_name(),
            KnownRune::Baelfire(x) => x.display_name(),
            KnownRune::Balthazar(x) => x.display_name(),
            KnownRune::Berserker(x) => x.display_name(),
            KnownRune::Brawler(x) => x.display_name(),
            KnownRune::Cavalier(x) => x.display_name(),
            KnownRune::Centaur(x) => x.display_name(),
            KnownRune::Chronomancer(x) => x.display_name(),
            KnownRune::Citadel(x) => x.display_name(),
            KnownRune::Deadeye(x) => x.display_name(),
            KnownRune::Defender(x) => x.display_name(),
            KnownRune::Divinity(x) => x.display_name(),
            KnownRune::Dolyak(x) => x.display_name(),
            KnownRune::Dragonhunter(x) => x.display_name(),
            KnownRune::Druid(x) => x.display_name(),
            KnownRune::Durability(x) => x.display_name(),
            KnownRune::Dwayna(x) => x.display_name(),
            KnownRune::Eagle(x) => x.display_name(),
            KnownRune::Earth(x) => x.display_name(),
            KnownRune::Elementalist(x) => x.display_name(),
            KnownRune::Engineer(x) => x.display_name(),
            KnownRune::Evasion(x) => x.display_name(),
            KnownRune::Exuberance(x) => x.display_name(),
            KnownRune::Fire(x) => x.display_name(),
            KnownRune::Firebrand(x) => x.display_name(),
            KnownRune::Fireworks(x) => x.display_name(),
            KnownRune::FlameLegion(x) => x.display_name(),
            KnownRune::Flock(x) => x.display_name(),
            KnownRune::Forgeman(x) => x.display_name(),
            KnownRune::Golemancer(x) => x.display_name(),
            KnownRune::Grove(x) => x.display_name(),
            KnownRune::Guardian(x) => x.display_name(),
            KnownRune::Herald(x) => x.display_name(),
            KnownRune::Hoelbrak(x) => x.display_name(),
            KnownRune::Holosmith(x) => x.display_name(),
            KnownRune::Ice(x) => x.display_name(),
            KnownRune::Krait(x) => x.display_name(),
            KnownRune::Leadership(x) => x.display_name(),
            KnownRune::Lich(x) => x.display_name(),
            KnownRune::Lyssa(x) => x.display_name(),
            KnownRune::MadKing(x) => x.display_name(),
            KnownRune::Melandru(x) => x.display_name(),
            KnownRune::Mercy(x) => x.display_name(),
            KnownRune::Mirage(x) => x.display_name(),
            KnownRune::Monk(x) => x.display_name(),
            KnownRune::NaturesBounty(x) => x.display_name(),
            KnownRune::Necromancer(x) => x.display_name(),
            KnownRune::Nightmare(x) => x.display_name(),
            KnownRune::Ogre(x) => x.display_name(),
            KnownRune::Orr(x) => x.display_name(),
            KnownRune::Pack(x) => x.display_name(),
            KnownRune::Perplexity(x) => x.display_name(),
            KnownRune::Privateer(x) => x.display_name(),
            KnownRune::Radiance(x) => x.display_name(),
            KnownRune::Rage(x) => x.display_name(),
            KnownRune::Ranger(x) => x.display_name(),
            KnownRune::RataSum(x) => x.display_name(),
            KnownRune::Renegade(x) => x.display_name(),
            KnownRune::Resistance(x) => x.display_name(),
            KnownRune::Revenant(x) => x.display_name(),
            KnownRune::Sanctuary(x) => x.display_name(),
            KnownRune::Scavenging(x) => x.display_name(),
            KnownRune::Scholar(x) => x.display_name(),
            KnownRune::Scourge(x) => x.display_name(),
            KnownRune::Snowfall(x) => x.display_name(),
            KnownRune::Soulbeast(x) => x.display_name(),
            KnownRune::Speed(x) => x.display_name(),
            KnownRune::Stars(x) => x.display_name(),
            KnownRune::Strength(x) => x.display_name(),
            KnownRune::Tempest(x) => x.display_name(),
            KnownRune::Thief(x) => x.display_name(),
            KnownRune::Thorns(x) => x.display_name(),
            KnownRune::Tormenting(x) => x.display_name(),
            KnownRune::Trapper(x) => x.display_name(),
            KnownRune::Traveler(x) => x.display_name(),
            KnownRune::Trooper(x) => x.display_name(),
            KnownRune::Undead(x) => x.display_name(),
            KnownRune::Vampirism(x) => x.display_name(),
            KnownRune::Warrior(x) => x.display_name(),
            KnownRune::Water(x) => x.display_name(),
            KnownRune::Weaver(x) => x.display_name(),
            KnownRune::Wurm(x) => x.display_name(),
        }
    }
}
impl Effect for KnownRune {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            KnownRune::NoRune(x) => x.add_permanent(s, m),
            KnownRune::Adventurer(x) => x.add_permanent(s, m),
            KnownRune::Afflicted(x) => x.add_permanent(s, m),
            KnownRune::Air(x) => x.add_permanent(s, m),
            KnownRune::Altruism(x) => x.add_permanent(s, m),
            KnownRune::Antitoxin(x) => x.add_permanent(s, m),
            KnownRune::Aristocracy(x) => x.add_permanent(s, m),
            KnownRune::Baelfire(x) => x.add_permanent(s, m),
            KnownRune::Balthazar(x) => x.add_permanent(s, m),
            KnownRune::Berserker(x) => x.add_permanent(s, m),
            KnownRune::Brawler(x) => x.add_permanent(s, m),
            KnownRune::Cavalier(x) => x.add_permanent(s, m),
            KnownRune::Centaur(x) => x.add_permanent(s, m),
            KnownRune::Chronomancer(x) => x.add_permanent(s, m),
            KnownRune::Citadel(x) => x.add_permanent(s, m),
            KnownRune::Deadeye(x) => x.add_permanent(s, m),
            KnownRune::Defender(x) => x.add_permanent(s, m),
            KnownRune::Divinity(x) => x.add_permanent(s, m),
            KnownRune::Dolyak(x) => x.add_permanent(s, m),
            KnownRune::Dragonhunter(x) => x.add_permanent(s, m),
            KnownRune::Druid(x) => x.add_permanent(s, m),
            KnownRune::Durability(x) => x.add_permanent(s, m),
            KnownRune::Dwayna(x) => x.add_permanent(s, m),
            KnownRune::Eagle(x) => x.add_permanent(s, m),
            KnownRune::Earth(x) => x.add_permanent(s, m),
            KnownRune::Elementalist(x) => x.add_permanent(s, m),
            KnownRune::Engineer(x) => x.add_permanent(s, m),
            KnownRune::Evasion(x) => x.add_permanent(s, m),
            KnownRune::Exuberance(x) => x.add_permanent(s, m),
            KnownRune::Fire(x) => x.add_permanent(s, m),
            KnownRune::Firebrand(x) => x.add_permanent(s, m),
            KnownRune::Fireworks(x) => x.add_permanent(s, m),
            KnownRune::FlameLegion(x) => x.add_permanent(s, m),
            KnownRune::Flock(x) => x.add_permanent(s, m),
            KnownRune::Forgeman(x) => x.add_permanent(s, m),
            KnownRune::Golemancer(x) => x.add_permanent(s, m),
            KnownRune::Grove(x) => x.add_permanent(s, m),
            KnownRune::Guardian(x) => x.add_permanent(s, m),
            KnownRune::Herald(x) => x.add_permanent(s, m),
            KnownRune::Hoelbrak(x) => x.add_permanent(s, m),
            KnownRune::Holosmith(x) => x.add_permanent(s, m),
            KnownRune::Ice(x) => x.add_permanent(s, m),
            KnownRune::Krait(x) => x.add_permanent(s, m),
            KnownRune::Leadership(x) => x.add_permanent(s, m),
            KnownRune::Lich(x) => x.add_permanent(s, m),
            KnownRune::Lyssa(x) => x.add_permanent(s, m),
            KnownRune::MadKing(x) => x.add_permanent(s, m),
            KnownRune::Melandru(x) => x.add_permanent(s, m),
            KnownRune::Mercy(x) => x.add_permanent(s, m),
            KnownRune::Mirage(x) => x.add_permanent(s, m),
            KnownRune::Monk(x) => x.add_permanent(s, m),
            KnownRune::NaturesBounty(x) => x.add_permanent(s, m),
            KnownRune::Necromancer(x) => x.add_permanent(s, m),
            KnownRune::Nightmare(x) => x.add_permanent(s, m),
            KnownRune::Ogre(x) => x.add_permanent(s, m),
            KnownRune::Orr(x) => x.add_permanent(s, m),
            KnownRune::Pack(x) => x.add_permanent(s, m),
            KnownRune::Perplexity(x) => x.add_permanent(s, m),
            KnownRune::Privateer(x) => x.add_permanent(s, m),
            KnownRune::Radiance(x) => x.add_permanent(s, m),
            KnownRune::Rage(x) => x.add_permanent(s, m),
            KnownRune::Ranger(x) => x.add_permanent(s, m),
            KnownRune::RataSum(x) => x.add_permanent(s, m),
            KnownRune::Renegade(x) => x.add_permanent(s, m),
            KnownRune::Resistance(x) => x.add_permanent(s, m),
            KnownRune::Revenant(x) => x.add_permanent(s, m),
            KnownRune::Sanctuary(x) => x.add_permanent(s, m),
            KnownRune::Scavenging(x) => x.add_permanent(s, m),
            KnownRune::Scholar(x) => x.add_permanent(s, m),
            KnownRune::Scourge(x) => x.add_permanent(s, m),
            KnownRune::Snowfall(x) => x.add_permanent(s, m),
            KnownRune::Soulbeast(x) => x.add_permanent(s, m),
            KnownRune::Speed(x) => x.add_permanent(s, m),
            KnownRune::Stars(x) => x.add_permanent(s, m),
            KnownRune::Strength(x) => x.add_permanent(s, m),
            KnownRune::Tempest(x) => x.add_permanent(s, m),
            KnownRune::Thief(x) => x.add_permanent(s, m),
            KnownRune::Thorns(x) => x.add_permanent(s, m),
            KnownRune::Tormenting(x) => x.add_permanent(s, m),
            KnownRune::Trapper(x) => x.add_permanent(s, m),
            KnownRune::Traveler(x) => x.add_permanent(s, m),
            KnownRune::Trooper(x) => x.add_permanent(s, m),
            KnownRune::Undead(x) => x.add_permanent(s, m),
            KnownRune::Vampirism(x) => x.add_permanent(s, m),
            KnownRune::Warrior(x) => x.add_permanent(s, m),
            KnownRune::Water(x) => x.add_permanent(s, m),
            KnownRune::Weaver(x) => x.add_permanent(s, m),
            KnownRune::Wurm(x) => x.add_permanent(s, m),
        }
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            KnownRune::NoRune(x) => x.distribute(s, m),
            KnownRune::Adventurer(x) => x.distribute(s, m),
            KnownRune::Afflicted(x) => x.distribute(s, m),
            KnownRune::Air(x) => x.distribute(s, m),
            KnownRune::Altruism(x) => x.distribute(s, m),
            KnownRune::Antitoxin(x) => x.distribute(s, m),
            KnownRune::Aristocracy(x) => x.distribute(s, m),
            KnownRune::Baelfire(x) => x.distribute(s, m),
            KnownRune::Balthazar(x) => x.distribute(s, m),
            KnownRune::Berserker(x) => x.distribute(s, m),
            KnownRune::Brawler(x) => x.distribute(s, m),
            KnownRune::Cavalier(x) => x.distribute(s, m),
            KnownRune::Centaur(x) => x.distribute(s, m),
            KnownRune::Chronomancer(x) => x.distribute(s, m),
            KnownRune::Citadel(x) => x.distribute(s, m),
            KnownRune::Deadeye(x) => x.distribute(s, m),
            KnownRune::Defender(x) => x.distribute(s, m),
            KnownRune::Divinity(x) => x.distribute(s, m),
            KnownRune::Dolyak(x) => x.distribute(s, m),
            KnownRune::Dragonhunter(x) => x.distribute(s, m),
            KnownRune::Druid(x) => x.distribute(s, m),
            KnownRune::Durability(x) => x.distribute(s, m),
            KnownRune::Dwayna(x) => x.distribute(s, m),
            KnownRune::Eagle(x) => x.distribute(s, m),
            KnownRune::Earth(x) => x.distribute(s, m),
            KnownRune::Elementalist(x) => x.distribute(s, m),
            KnownRune::Engineer(x) => x.distribute(s, m),
            KnownRune::Evasion(x) => x.distribute(s, m),
            KnownRune::Exuberance(x) => x.distribute(s, m),
            KnownRune::Fire(x) => x.distribute(s, m),
            KnownRune::Firebrand(x) => x.distribute(s, m),
            KnownRune::Fireworks(x) => x.distribute(s, m),
            KnownRune::FlameLegion(x) => x.distribute(s, m),
            KnownRune::Flock(x) => x.distribute(s, m),
            KnownRune::Forgeman(x) => x.distribute(s, m),
            KnownRune::Golemancer(x) => x.distribute(s, m),
            KnownRune::Grove(x) => x.distribute(s, m),
            KnownRune::Guardian(x) => x.distribute(s, m),
            KnownRune::Herald(x) => x.distribute(s, m),
            KnownRune::Hoelbrak(x) => x.distribute(s, m),
            KnownRune::Holosmith(x) => x.distribute(s, m),
            KnownRune::Ice(x) => x.distribute(s, m),
            KnownRune::Krait(x) => x.distribute(s, m),
            KnownRune::Leadership(x) => x.distribute(s, m),
            KnownRune::Lich(x) => x.distribute(s, m),
            KnownRune::Lyssa(x) => x.distribute(s, m),
            KnownRune::MadKing(x) => x.distribute(s, m),
            KnownRune::Melandru(x) => x.distribute(s, m),
            KnownRune::Mercy(x) => x.distribute(s, m),
            KnownRune::Mirage(x) => x.distribute(s, m),
            KnownRune::Monk(x) => x.distribute(s, m),
            KnownRune::NaturesBounty(x) => x.distribute(s, m),
            KnownRune::Necromancer(x) => x.distribute(s, m),
            KnownRune::Nightmare(x) => x.distribute(s, m),
            KnownRune::Ogre(x) => x.distribute(s, m),
            KnownRune::Orr(x) => x.distribute(s, m),
            KnownRune::Pack(x) => x.distribute(s, m),
            KnownRune::Perplexity(x) => x.distribute(s, m),
            KnownRune::Privateer(x) => x.distribute(s, m),
            KnownRune::Radiance(x) => x.distribute(s, m),
            KnownRune::Rage(x) => x.distribute(s, m),
            KnownRune::Ranger(x) => x.distribute(s, m),
            KnownRune::RataSum(x) => x.distribute(s, m),
            KnownRune::Renegade(x) => x.distribute(s, m),
            KnownRune::Resistance(x) => x.distribute(s, m),
            KnownRune::Revenant(x) => x.distribute(s, m),
            KnownRune::Sanctuary(x) => x.distribute(s, m),
            KnownRune::Scavenging(x) => x.distribute(s, m),
            KnownRune::Scholar(x) => x.distribute(s, m),
            KnownRune::Scourge(x) => x.distribute(s, m),
            KnownRune::Snowfall(x) => x.distribute(s, m),
            KnownRune::Soulbeast(x) => x.distribute(s, m),
            KnownRune::Speed(x) => x.distribute(s, m),
            KnownRune::Stars(x) => x.distribute(s, m),
            KnownRune::Strength(x) => x.distribute(s, m),
            KnownRune::Tempest(x) => x.distribute(s, m),
            KnownRune::Thief(x) => x.distribute(s, m),
            KnownRune::Thorns(x) => x.distribute(s, m),
            KnownRune::Tormenting(x) => x.distribute(s, m),
            KnownRune::Trapper(x) => x.distribute(s, m),
            KnownRune::Traveler(x) => x.distribute(s, m),
            KnownRune::Trooper(x) => x.distribute(s, m),
            KnownRune::Undead(x) => x.distribute(s, m),
            KnownRune::Vampirism(x) => x.distribute(s, m),
            KnownRune::Warrior(x) => x.distribute(s, m),
            KnownRune::Water(x) => x.distribute(s, m),
            KnownRune::Weaver(x) => x.distribute(s, m),
            KnownRune::Wurm(x) => x.distribute(s, m),
        }
    }
    fn add_temporary(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            KnownRune::NoRune(x) => x.add_temporary(s, m),
            KnownRune::Adventurer(x) => x.add_temporary(s, m),
            KnownRune::Afflicted(x) => x.add_temporary(s, m),
            KnownRune::Air(x) => x.add_temporary(s, m),
            KnownRune::Altruism(x) => x.add_temporary(s, m),
            KnownRune::Antitoxin(x) => x.add_temporary(s, m),
            KnownRune::Aristocracy(x) => x.add_temporary(s, m),
            KnownRune::Baelfire(x) => x.add_temporary(s, m),
            KnownRune::Balthazar(x) => x.add_temporary(s, m),
            KnownRune::Berserker(x) => x.add_temporary(s, m),
            KnownRune::Brawler(x) => x.add_temporary(s, m),
            KnownRune::Cavalier(x) => x.add_temporary(s, m),
            KnownRune::Centaur(x) => x.add_temporary(s, m),
            KnownRune::Chronomancer(x) => x.add_temporary(s, m),
            KnownRune::Citadel(x) => x.add_temporary(s, m),
            KnownRune::Deadeye(x) => x.add_temporary(s, m),
            KnownRune::Defender(x) => x.add_temporary(s, m),
            KnownRune::Divinity(x) => x.add_temporary(s, m),
            KnownRune::Dolyak(x) => x.add_temporary(s, m),
            KnownRune::Dragonhunter(x) => x.add_temporary(s, m),
            KnownRune::Druid(x) => x.add_temporary(s, m),
            KnownRune::Durability(x) => x.add_temporary(s, m),
            KnownRune::Dwayna(x) => x.add_temporary(s, m),
            KnownRune::Eagle(x) => x.add_temporary(s, m),
            KnownRune::Earth(x) => x.add_temporary(s, m),
            KnownRune::Elementalist(x) => x.add_temporary(s, m),
            KnownRune::Engineer(x) => x.add_temporary(s, m),
            KnownRune::Evasion(x) => x.add_temporary(s, m),
            KnownRune::Exuberance(x) => x.add_temporary(s, m),
            KnownRune::Fire(x) => x.add_temporary(s, m),
            KnownRune::Firebrand(x) => x.add_temporary(s, m),
            KnownRune::Fireworks(x) => x.add_temporary(s, m),
            KnownRune::FlameLegion(x) => x.add_temporary(s, m),
            KnownRune::Flock(x) => x.add_temporary(s, m),
            KnownRune::Forgeman(x) => x.add_temporary(s, m),
            KnownRune::Golemancer(x) => x.add_temporary(s, m),
            KnownRune::Grove(x) => x.add_temporary(s, m),
            KnownRune::Guardian(x) => x.add_temporary(s, m),
            KnownRune::Herald(x) => x.add_temporary(s, m),
            KnownRune::Hoelbrak(x) => x.add_temporary(s, m),
            KnownRune::Holosmith(x) => x.add_temporary(s, m),
            KnownRune::Ice(x) => x.add_temporary(s, m),
            KnownRune::Krait(x) => x.add_temporary(s, m),
            KnownRune::Leadership(x) => x.add_temporary(s, m),
            KnownRune::Lich(x) => x.add_temporary(s, m),
            KnownRune::Lyssa(x) => x.add_temporary(s, m),
            KnownRune::MadKing(x) => x.add_temporary(s, m),
            KnownRune::Melandru(x) => x.add_temporary(s, m),
            KnownRune::Mercy(x) => x.add_temporary(s, m),
            KnownRune::Mirage(x) => x.add_temporary(s, m),
            KnownRune::Monk(x) => x.add_temporary(s, m),
            KnownRune::NaturesBounty(x) => x.add_temporary(s, m),
            KnownRune::Necromancer(x) => x.add_temporary(s, m),
            KnownRune::Nightmare(x) => x.add_temporary(s, m),
            KnownRune::Ogre(x) => x.add_temporary(s, m),
            KnownRune::Orr(x) => x.add_temporary(s, m),
            KnownRune::Pack(x) => x.add_temporary(s, m),
            KnownRune::Perplexity(x) => x.add_temporary(s, m),
            KnownRune::Privateer(x) => x.add_temporary(s, m),
            KnownRune::Radiance(x) => x.add_temporary(s, m),
            KnownRune::Rage(x) => x.add_temporary(s, m),
            KnownRune::Ranger(x) => x.add_temporary(s, m),
            KnownRune::RataSum(x) => x.add_temporary(s, m),
            KnownRune::Renegade(x) => x.add_temporary(s, m),
            KnownRune::Resistance(x) => x.add_temporary(s, m),
            KnownRune::Revenant(x) => x.add_temporary(s, m),
            KnownRune::Sanctuary(x) => x.add_temporary(s, m),
            KnownRune::Scavenging(x) => x.add_temporary(s, m),
            KnownRune::Scholar(x) => x.add_temporary(s, m),
            KnownRune::Scourge(x) => x.add_temporary(s, m),
            KnownRune::Snowfall(x) => x.add_temporary(s, m),
            KnownRune::Soulbeast(x) => x.add_temporary(s, m),
            KnownRune::Speed(x) => x.add_temporary(s, m),
            KnownRune::Stars(x) => x.add_temporary(s, m),
            KnownRune::Strength(x) => x.add_temporary(s, m),
            KnownRune::Tempest(x) => x.add_temporary(s, m),
            KnownRune::Thief(x) => x.add_temporary(s, m),
            KnownRune::Thorns(x) => x.add_temporary(s, m),
            KnownRune::Tormenting(x) => x.add_temporary(s, m),
            KnownRune::Trapper(x) => x.add_temporary(s, m),
            KnownRune::Traveler(x) => x.add_temporary(s, m),
            KnownRune::Trooper(x) => x.add_temporary(s, m),
            KnownRune::Undead(x) => x.add_temporary(s, m),
            KnownRune::Vampirism(x) => x.add_temporary(s, m),
            KnownRune::Warrior(x) => x.add_temporary(s, m),
            KnownRune::Water(x) => x.add_temporary(s, m),
            KnownRune::Weaver(x) => x.add_temporary(s, m),
            KnownRune::Wurm(x) => x.add_temporary(s, m),
        }
    }
}
impl From<NoRune> for KnownRune {
    fn from(x: NoRune) -> KnownRune { KnownRune::NoRune(x) }
}
impl From<Adventurer> for KnownRune {
    fn from(x: Adventurer) -> KnownRune { KnownRune::Adventurer(x) }
}
impl From<Afflicted> for KnownRune {
    fn from(x: Afflicted) -> KnownRune { KnownRune::Afflicted(x) }
}
impl From<Air> for KnownRune {
    fn from(x: Air) -> KnownRune { KnownRune::Air(x) }
}
impl From<Altruism> for KnownRune {
    fn from(x: Altruism) -> KnownRune { KnownRune::Altruism(x) }
}
impl From<Antitoxin> for KnownRune {
    fn from(x: Antitoxin) -> KnownRune { KnownRune::Antitoxin(x) }
}
impl From<Aristocracy> for KnownRune {
    fn from(x: Aristocracy) -> KnownRune { KnownRune::Aristocracy(x) }
}
impl From<Baelfire> for KnownRune {
    fn from(x: Baelfire) -> KnownRune { KnownRune::Baelfire(x) }
}
impl From<Balthazar> for KnownRune {
    fn from(x: Balthazar) -> KnownRune { KnownRune::Balthazar(x) }
}
impl From<Berserker> for KnownRune {
    fn from(x: Berserker) -> KnownRune { KnownRune::Berserker(x) }
}
impl From<Brawler> for KnownRune {
    fn from(x: Brawler) -> KnownRune { KnownRune::Brawler(x) }
}
impl From<Cavalier> for KnownRune {
    fn from(x: Cavalier) -> KnownRune { KnownRune::Cavalier(x) }
}
impl From<Centaur> for KnownRune {
    fn from(x: Centaur) -> KnownRune { KnownRune::Centaur(x) }
}
impl From<Chronomancer> for KnownRune {
    fn from(x: Chronomancer) -> KnownRune { KnownRune::Chronomancer(x) }
}
impl From<Citadel> for KnownRune {
    fn from(x: Citadel) -> KnownRune { KnownRune::Citadel(x) }
}
impl From<Deadeye> for KnownRune {
    fn from(x: Deadeye) -> KnownRune { KnownRune::Deadeye(x) }
}
impl From<Defender> for KnownRune {
    fn from(x: Defender) -> KnownRune { KnownRune::Defender(x) }
}
impl From<Divinity> for KnownRune {
    fn from(x: Divinity) -> KnownRune { KnownRune::Divinity(x) }
}
impl From<Dolyak> for KnownRune {
    fn from(x: Dolyak) -> KnownRune { KnownRune::Dolyak(x) }
}
impl From<Dragonhunter> for KnownRune {
    fn from(x: Dragonhunter) -> KnownRune { KnownRune::Dragonhunter(x) }
}
impl From<Druid> for KnownRune {
    fn from(x: Druid) -> KnownRune { KnownRune::Druid(x) }
}
impl From<Durability> for KnownRune {
    fn from(x: Durability) -> KnownRune { KnownRune::Durability(x) }
}
impl From<Dwayna> for KnownRune {
    fn from(x: Dwayna) -> KnownRune { KnownRune::Dwayna(x) }
}
impl From<Eagle> for KnownRune {
    fn from(x: Eagle) -> KnownRune { KnownRune::Eagle(x) }
}
impl From<Earth> for KnownRune {
    fn from(x: Earth) -> KnownRune { KnownRune::Earth(x) }
}
impl From<Elementalist> for KnownRune {
    fn from(x: Elementalist) -> KnownRune { KnownRune::Elementalist(x) }
}
impl From<Engineer> for KnownRune {
    fn from(x: Engineer) -> KnownRune { KnownRune::Engineer(x) }
}
impl From<Evasion> for KnownRune {
    fn from(x: Evasion) -> KnownRune { KnownRune::Evasion(x) }
}
impl From<Exuberance> for KnownRune {
    fn from(x: Exuberance) -> KnownRune { KnownRune::Exuberance(x) }
}
impl From<Fire> for KnownRune {
    fn from(x: Fire) -> KnownRune { KnownRune::Fire(x) }
}
impl From<Firebrand> for KnownRune {
    fn from(x: Firebrand) -> KnownRune { KnownRune::Firebrand(x) }
}
impl From<Fireworks> for KnownRune {
    fn from(x: Fireworks) -> KnownRune { KnownRune::Fireworks(x) }
}
impl From<FlameLegion> for KnownRune {
    fn from(x: FlameLegion) -> KnownRune { KnownRune::FlameLegion(x) }
}
impl From<Flock> for KnownRune {
    fn from(x: Flock) -> KnownRune { KnownRune::Flock(x) }
}
impl From<Forgeman> for KnownRune {
    fn from(x: Forgeman) -> KnownRune { KnownRune::Forgeman(x) }
}
impl From<Golemancer> for KnownRune {
    fn from(x: Golemancer) -> KnownRune { KnownRune::Golemancer(x) }
}
impl From<Grove> for KnownRune {
    fn from(x: Grove) -> KnownRune { KnownRune::Grove(x) }
}
impl From<Guardian> for KnownRune {
    fn from(x: Guardian) -> KnownRune { KnownRune::Guardian(x) }
}
impl From<Herald> for KnownRune {
    fn from(x: Herald) -> KnownRune { KnownRune::Herald(x) }
}
impl From<Hoelbrak> for KnownRune {
    fn from(x: Hoelbrak) -> KnownRune { KnownRune::Hoelbrak(x) }
}
impl From<Holosmith> for KnownRune {
    fn from(x: Holosmith) -> KnownRune { KnownRune::Holosmith(x) }
}
impl From<Ice> for KnownRune {
    fn from(x: Ice) -> KnownRune { KnownRune::Ice(x) }
}
impl From<Krait> for KnownRune {
    fn from(x: Krait) -> KnownRune { KnownRune::Krait(x) }
}
impl From<Leadership> for KnownRune {
    fn from(x: Leadership) -> KnownRune { KnownRune::Leadership(x) }
}
impl From<Lich> for KnownRune {
    fn from(x: Lich) -> KnownRune { KnownRune::Lich(x) }
}
impl From<Lyssa> for KnownRune {
    fn from(x: Lyssa) -> KnownRune { KnownRune::Lyssa(x) }
}
impl From<MadKing> for KnownRune {
    fn from(x: MadKing) -> KnownRune { KnownRune::MadKing(x) }
}
impl From<Melandru> for KnownRune {
    fn from(x: Melandru) -> KnownRune { KnownRune::Melandru(x) }
}
impl From<Mercy> for KnownRune {
    fn from(x: Mercy) -> KnownRune { KnownRune::Mercy(x) }
}
impl From<Mirage> for KnownRune {
    fn from(x: Mirage) -> KnownRune { KnownRune::Mirage(x) }
}
impl From<Monk> for KnownRune {
    fn from(x: Monk) -> KnownRune { KnownRune::Monk(x) }
}
impl From<NaturesBounty> for KnownRune {
    fn from(x: NaturesBounty) -> KnownRune { KnownRune::NaturesBounty(x) }
}
impl From<Necromancer> for KnownRune {
    fn from(x: Necromancer) -> KnownRune { KnownRune::Necromancer(x) }
}
impl From<Nightmare> for KnownRune {
    fn from(x: Nightmare) -> KnownRune { KnownRune::Nightmare(x) }
}
impl From<Ogre> for KnownRune {
    fn from(x: Ogre) -> KnownRune { KnownRune::Ogre(x) }
}
impl From<Orr> for KnownRune {
    fn from(x: Orr) -> KnownRune { KnownRune::Orr(x) }
}
impl From<Pack> for KnownRune {
    fn from(x: Pack) -> KnownRune { KnownRune::Pack(x) }
}
impl From<Perplexity> for KnownRune {
    fn from(x: Perplexity) -> KnownRune { KnownRune::Perplexity(x) }
}
impl From<Privateer> for KnownRune {
    fn from(x: Privateer) -> KnownRune { KnownRune::Privateer(x) }
}
impl From<Radiance> for KnownRune {
    fn from(x: Radiance) -> KnownRune { KnownRune::Radiance(x) }
}
impl From<Rage> for KnownRune {
    fn from(x: Rage) -> KnownRune { KnownRune::Rage(x) }
}
impl From<Ranger> for KnownRune {
    fn from(x: Ranger) -> KnownRune { KnownRune::Ranger(x) }
}
impl From<RataSum> for KnownRune {
    fn from(x: RataSum) -> KnownRune { KnownRune::RataSum(x) }
}
impl From<Renegade> for KnownRune {
    fn from(x: Renegade) -> KnownRune { KnownRune::Renegade(x) }
}
impl From<Resistance> for KnownRune {
    fn from(x: Resistance) -> KnownRune { KnownRune::Resistance(x) }
}
impl From<Revenant> for KnownRune {
    fn from(x: Revenant) -> KnownRune { KnownRune::Revenant(x) }
}
impl From<Sanctuary> for KnownRune {
    fn from(x: Sanctuary) -> KnownRune { KnownRune::Sanctuary(x) }
}
impl From<Scavenging> for KnownRune {
    fn from(x: Scavenging) -> KnownRune { KnownRune::Scavenging(x) }
}
impl From<Scholar> for KnownRune {
    fn from(x: Scholar) -> KnownRune { KnownRune::Scholar(x) }
}
impl From<Scourge> for KnownRune {
    fn from(x: Scourge) -> KnownRune { KnownRune::Scourge(x) }
}
impl From<Snowfall> for KnownRune {
    fn from(x: Snowfall) -> KnownRune { KnownRune::Snowfall(x) }
}
impl From<Soulbeast> for KnownRune {
    fn from(x: Soulbeast) -> KnownRune { KnownRune::Soulbeast(x) }
}
impl From<Speed> for KnownRune {
    fn from(x: Speed) -> KnownRune { KnownRune::Speed(x) }
}
impl From<Stars> for KnownRune {
    fn from(x: Stars) -> KnownRune { KnownRune::Stars(x) }
}
impl From<Strength> for KnownRune {
    fn from(x: Strength) -> KnownRune { KnownRune::Strength(x) }
}
impl From<Tempest> for KnownRune {
    fn from(x: Tempest) -> KnownRune { KnownRune::Tempest(x) }
}
impl From<Thief> for KnownRune {
    fn from(x: Thief) -> KnownRune { KnownRune::Thief(x) }
}
impl From<Thorns> for KnownRune {
    fn from(x: Thorns) -> KnownRune { KnownRune::Thorns(x) }
}
impl From<Tormenting> for KnownRune {
    fn from(x: Tormenting) -> KnownRune { KnownRune::Tormenting(x) }
}
impl From<Trapper> for KnownRune {
    fn from(x: Trapper) -> KnownRune { KnownRune::Trapper(x) }
}
impl From<Traveler> for KnownRune {
    fn from(x: Traveler) -> KnownRune { KnownRune::Traveler(x) }
}
impl From<Trooper> for KnownRune {
    fn from(x: Trooper) -> KnownRune { KnownRune::Trooper(x) }
}
impl From<Undead> for KnownRune {
    fn from(x: Undead) -> KnownRune { KnownRune::Undead(x) }
}
impl From<Vampirism> for KnownRune {
    fn from(x: Vampirism) -> KnownRune { KnownRune::Vampirism(x) }
}
impl From<Warrior> for KnownRune {
    fn from(x: Warrior) -> KnownRune { KnownRune::Warrior(x) }
}
impl From<Water> for KnownRune {
    fn from(x: Water) -> KnownRune { KnownRune::Water(x) }
}
impl From<Weaver> for KnownRune {
    fn from(x: Weaver) -> KnownRune { KnownRune::Weaver(x) }
}
impl From<Wurm> for KnownRune {
    fn from(x: Wurm) -> KnownRune { KnownRune::Wurm(x) }
}
impl Vary for KnownRune {
    fn num_fields(&self) -> usize { 1 }
    fn num_field_values(&self, _field: usize) -> u16 { 88 }
    fn get_field(&self, _field: usize) -> u16 {
        self.index() as u16
    }
    fn set_field(&mut self, _field: usize, value: u16) {
        *self = KnownRune::from_index(value as usize);
    }
}

impl Rune {
    pub fn is_known(self) -> bool {
        match self {
            Rune::NoRune(_) => true,
            Rune::Adventurer(_) => true,
            Rune::Afflicted(_) => true,
            Rune::Air(_) => true,
            Rune::Altruism(_) => true,
            Rune::Antitoxin(_) => true,
            Rune::Aristocracy(_) => true,
            Rune::Baelfire(_) => true,
            Rune::Balthazar(_) => true,
            Rune::Berserker(_) => true,
            Rune::Brawler(_) => true,
            Rune::Cavalier(_) => true,
            Rune::Centaur(_) => true,
            Rune::Chronomancer(_) => true,
            Rune::Citadel(_) => true,
            Rune::Deadeye(_) => true,
            Rune::Defender(_) => true,
            Rune::Divinity(_) => true,
            Rune::Dolyak(_) => true,
            Rune::Dragonhunter(_) => true,
            Rune::Druid(_) => true,
            Rune::Durability(_) => true,
            Rune::Dwayna(_) => true,
            Rune::Eagle(_) => true,
            Rune::Earth(_) => true,
            Rune::Elementalist(_) => true,
            Rune::Engineer(_) => true,
            Rune::Evasion(_) => true,
            Rune::Exuberance(_) => true,
            Rune::Fire(_) => true,
            Rune::Firebrand(_) => true,
            Rune::Fireworks(_) => true,
            Rune::FlameLegion(_) => true,
            Rune::Flock(_) => true,
            Rune::Forgeman(_) => true,
            Rune::Golemancer(_) => true,
            Rune::Grove(_) => true,
            Rune::Guardian(_) => true,
            Rune::Herald(_) => true,
            Rune::Hoelbrak(_) => true,
            Rune::Holosmith(_) => true,
            Rune::Ice(_) => true,
            Rune::Krait(_) => true,
            Rune::Leadership(_) => true,
            Rune::Lich(_) => true,
            Rune::Lyssa(_) => true,
            Rune::MadKing(_) => true,
            Rune::Melandru(_) => true,
            Rune::Mercy(_) => true,
            Rune::Mirage(_) => true,
            Rune::Monk(_) => true,
            Rune::NaturesBounty(_) => true,
            Rune::Necromancer(_) => true,
            Rune::Nightmare(_) => true,
            Rune::Ogre(_) => true,
            Rune::Orr(_) => true,
            Rune::Pack(_) => true,
            Rune::Perplexity(_) => true,
            Rune::Privateer(_) => true,
            Rune::Radiance(_) => true,
            Rune::Rage(_) => true,
            Rune::Ranger(_) => true,
            Rune::RataSum(_) => true,
            Rune::Renegade(_) => true,
            Rune::Resistance(_) => true,
            Rune::Revenant(_) => true,
            Rune::Sanctuary(_) => true,
            Rune::Scavenging(_) => true,
            Rune::Scholar(_) => true,
            Rune::Scourge(_) => true,
            Rune::Snowfall(_) => true,
            Rune::Soulbeast(_) => true,
            Rune::Speed(_) => true,
            Rune::Stars(_) => true,
            Rune::Strength(_) => true,
            Rune::Tempest(_) => true,
            Rune::Thief(_) => true,
            Rune::Thorns(_) => true,
            Rune::Tormenting(_) => true,
            Rune::Trapper(_) => true,
            Rune::Traveler(_) => true,
            Rune::Trooper(_) => true,
            Rune::Undead(_) => true,
            Rune::Vampirism(_) => true,
            Rune::Warrior(_) => true,
            Rune::Water(_) => true,
            Rune::Weaver(_) => true,
            Rune::Wurm(_) => true,
            _ => false,
        }
    }
    pub fn as_known(self) -> KnownRune {
        match self {
            Rune::NoRune(NoRune) => KnownRune::NoRune(NoRune),
            Rune::Adventurer(Adventurer) => KnownRune::Adventurer(Adventurer),
            Rune::Afflicted(Afflicted) => KnownRune::Afflicted(Afflicted),
            Rune::Air(Air) => KnownRune::Air(Air),
            Rune::Altruism(Altruism) => KnownRune::Altruism(Altruism),
            Rune::Antitoxin(Antitoxin) => KnownRune::Antitoxin(Antitoxin),
            Rune::Aristocracy(Aristocracy) => KnownRune::Aristocracy(Aristocracy),
            Rune::Baelfire(Baelfire) => KnownRune::Baelfire(Baelfire),
            Rune::Balthazar(Balthazar) => KnownRune::Balthazar(Balthazar),
            Rune::Berserker(Berserker) => KnownRune::Berserker(Berserker),
            Rune::Brawler(Brawler) => KnownRune::Brawler(Brawler),
            Rune::Cavalier(Cavalier) => KnownRune::Cavalier(Cavalier),
            Rune::Centaur(Centaur) => KnownRune::Centaur(Centaur),
            Rune::Chronomancer(Chronomancer) => KnownRune::Chronomancer(Chronomancer),
            Rune::Citadel(Citadel) => KnownRune::Citadel(Citadel),
            Rune::Daredevil(Daredevil) => KnownRune::Cavalier(Cavalier),
            Rune::Deadeye(Deadeye) => KnownRune::Deadeye(Deadeye),
            Rune::Defender(Defender) => KnownRune::Defender(Defender),
            Rune::Divinity(Divinity) => KnownRune::Divinity(Divinity),
            Rune::Dolyak(Dolyak) => KnownRune::Dolyak(Dolyak),
            Rune::Dragonhunter(Dragonhunter) => KnownRune::Dragonhunter(Dragonhunter),
            Rune::Druid(Druid) => KnownRune::Druid(Druid),
            Rune::Durability(Durability) => KnownRune::Durability(Durability),
            Rune::Dwayna(Dwayna) => KnownRune::Dwayna(Dwayna),
            Rune::Eagle(Eagle) => KnownRune::Eagle(Eagle),
            Rune::Earth(Earth) => KnownRune::Earth(Earth),
            Rune::Elementalist(Elementalist) => KnownRune::Elementalist(Elementalist),
            Rune::Engineer(Engineer) => KnownRune::Engineer(Engineer),
            Rune::Evasion(Evasion) => KnownRune::Evasion(Evasion),
            Rune::Exuberance(Exuberance) => KnownRune::Exuberance(Exuberance),
            Rune::Fire(Fire) => KnownRune::Fire(Fire),
            Rune::Firebrand(Firebrand) => KnownRune::Firebrand(Firebrand),
            Rune::Fireworks(Fireworks) => KnownRune::Fireworks(Fireworks),
            Rune::FlameLegion(FlameLegion) => KnownRune::FlameLegion(FlameLegion),
            Rune::Flock(Flock) => KnownRune::Flock(Flock),
            Rune::Forgeman(Forgeman) => KnownRune::Forgeman(Forgeman),
            Rune::Golemancer(Golemancer) => KnownRune::Golemancer(Golemancer),
            Rune::Grenth(Grenth) => KnownRune::Antitoxin(Antitoxin),
            Rune::Grove(Grove) => KnownRune::Grove(Grove),
            Rune::Guardian(Guardian) => KnownRune::Guardian(Guardian),
            Rune::Herald(Herald) => KnownRune::Herald(Herald),
            Rune::Hoelbrak(Hoelbrak) => KnownRune::Hoelbrak(Hoelbrak),
            Rune::Holosmith(Holosmith) => KnownRune::Holosmith(Holosmith),
            Rune::Ice(Ice) => KnownRune::Ice(Ice),
            Rune::Infiltration(Infiltration) => KnownRune::Chronomancer(Chronomancer),
            Rune::Krait(Krait) => KnownRune::Krait(Krait),
            Rune::Leadership(Leadership) => KnownRune::Leadership(Leadership),
            Rune::Lich(Lich) => KnownRune::Lich(Lich),
            Rune::Lyssa(Lyssa) => KnownRune::Lyssa(Lyssa),
            Rune::MadKing(MadKing) => KnownRune::MadKing(MadKing),
            Rune::Melandru(Melandru) => KnownRune::Melandru(Melandru),
            Rune::Mercy(Mercy) => KnownRune::Mercy(Mercy),
            Rune::Mesmer(Mesmer) => KnownRune::Chronomancer(Chronomancer),
            Rune::Mirage(Mirage) => KnownRune::Mirage(Mirage),
            Rune::Monk(Monk) => KnownRune::Monk(Monk),
            Rune::NaturesBounty(NaturesBounty) => KnownRune::NaturesBounty(NaturesBounty),
            Rune::Necromancer(Necromancer) => KnownRune::Necromancer(Necromancer),
            Rune::Nightmare(Nightmare) => KnownRune::Nightmare(Nightmare),
            Rune::Ogre(Ogre) => KnownRune::Ogre(Ogre),
            Rune::Orr(Orr) => KnownRune::Orr(Orr),
            Rune::Pack(Pack) => KnownRune::Pack(Pack),
            Rune::Perplexity(Perplexity) => KnownRune::Perplexity(Perplexity),
            Rune::Privateer(Privateer) => KnownRune::Privateer(Privateer),
            Rune::Radiance(Radiance) => KnownRune::Radiance(Radiance),
            Rune::Rage(Rage) => KnownRune::Rage(Rage),
            Rune::Ranger(Ranger) => KnownRune::Ranger(Ranger),
            Rune::RataSum(RataSum) => KnownRune::RataSum(RataSum),
            Rune::Reaper(Reaper) => KnownRune::Brawler(Brawler),
            Rune::Rebirth(Rebirth) => KnownRune::Altruism(Altruism),
            Rune::Renegade(Renegade) => KnownRune::Renegade(Renegade),
            Rune::Resistance(Resistance) => KnownRune::Resistance(Resistance),
            Rune::Revenant(Revenant) => KnownRune::Revenant(Revenant),
            Rune::Sanctuary(Sanctuary) => KnownRune::Sanctuary(Sanctuary),
            Rune::Scavenging(Scavenging) => KnownRune::Scavenging(Scavenging),
            Rune::Scholar(Scholar) => KnownRune::Scholar(Scholar),
            Rune::Scourge(Scourge) => KnownRune::Scourge(Scourge),
            Rune::Scrapper(Scrapper) => KnownRune::Cavalier(Cavalier),
            Rune::Snowfall(Snowfall) => KnownRune::Snowfall(Snowfall),
            Rune::Soulbeast(Soulbeast) => KnownRune::Soulbeast(Soulbeast),
            Rune::Speed(Speed) => KnownRune::Speed(Speed),
            Rune::Spellbreaker(Spellbreaker) => KnownRune::Chronomancer(Chronomancer),
            Rune::Stars(Stars) => KnownRune::Stars(Stars),
            Rune::Strength(Strength) => KnownRune::Strength(Strength),
            Rune::Sunless(Sunless) => KnownRune::Antitoxin(Antitoxin),
            Rune::Surging(Surging) => KnownRune::Fireworks(Fireworks),
            Rune::Svanir(Svanir) => KnownRune::Resistance(Resistance),
            Rune::Tempest(Tempest) => KnownRune::Tempest(Tempest),
            Rune::Thief(Thief) => KnownRune::Thief(Thief),
            Rune::Thorns(Thorns) => KnownRune::Thorns(Thorns),
            Rune::Tormenting(Tormenting) => KnownRune::Tormenting(Tormenting),
            Rune::Trapper(Trapper) => KnownRune::Trapper(Trapper),
            Rune::Traveler(Traveler) => KnownRune::Traveler(Traveler),
            Rune::Trooper(Trooper) => KnownRune::Trooper(Trooper),
            Rune::Undead(Undead) => KnownRune::Undead(Undead),
            Rune::Vampirism(Vampirism) => KnownRune::Vampirism(Vampirism),
            Rune::Warrior(Warrior) => KnownRune::Warrior(Warrior),
            Rune::Water(Water) => KnownRune::Water(Water),
            Rune::Weaver(Weaver) => KnownRune::Weaver(Weaver),
            Rune::Wurm(Wurm) => KnownRune::Wurm(Wurm),
            Rune::Zephyrite(Zephyrite) => KnownRune::Divinity(Divinity),
        }
    }
}
impl NoRune {
    pub fn as_known(self) -> KnownRune {
        KnownRune::NoRune(NoRune)
    }
}
impl Adventurer {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Adventurer(Adventurer)
    }
}
impl Afflicted {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Afflicted(Afflicted)
    }
}
impl Air {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Air(Air)
    }
}
impl Altruism {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Altruism(Altruism)
    }
}
impl Antitoxin {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Antitoxin(Antitoxin)
    }
}
impl Aristocracy {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Aristocracy(Aristocracy)
    }
}
impl Baelfire {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Baelfire(Baelfire)
    }
}
impl Balthazar {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Balthazar(Balthazar)
    }
}
impl Berserker {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Berserker(Berserker)
    }
}
impl Brawler {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Brawler(Brawler)
    }
}
impl Cavalier {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Cavalier(Cavalier)
    }
}
impl Centaur {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Centaur(Centaur)
    }
}
impl Chronomancer {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Chronomancer(Chronomancer)
    }
}
impl Citadel {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Citadel(Citadel)
    }
}
impl Daredevil {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Cavalier(Cavalier)
    }
}
impl Deadeye {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Deadeye(Deadeye)
    }
}
impl Defender {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Defender(Defender)
    }
}
impl Divinity {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Divinity(Divinity)
    }
}
impl Dolyak {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Dolyak(Dolyak)
    }
}
impl Dragonhunter {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Dragonhunter(Dragonhunter)
    }
}
impl Druid {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Druid(Druid)
    }
}
impl Durability {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Durability(Durability)
    }
}
impl Dwayna {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Dwayna(Dwayna)
    }
}
impl Eagle {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Eagle(Eagle)
    }
}
impl Earth {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Earth(Earth)
    }
}
impl Elementalist {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Elementalist(Elementalist)
    }
}
impl Engineer {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Engineer(Engineer)
    }
}
impl Evasion {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Evasion(Evasion)
    }
}
impl Exuberance {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Exuberance(Exuberance)
    }
}
impl Fire {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Fire(Fire)
    }
}
impl Firebrand {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Firebrand(Firebrand)
    }
}
impl Fireworks {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Fireworks(Fireworks)
    }
}
impl FlameLegion {
    pub fn as_known(self) -> KnownRune {
        KnownRune::FlameLegion(FlameLegion)
    }
}
impl Flock {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Flock(Flock)
    }
}
impl Forgeman {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Forgeman(Forgeman)
    }
}
impl Golemancer {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Golemancer(Golemancer)
    }
}
impl Grenth {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Antitoxin(Antitoxin)
    }
}
impl Grove {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Grove(Grove)
    }
}
impl Guardian {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Guardian(Guardian)
    }
}
impl Herald {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Herald(Herald)
    }
}
impl Hoelbrak {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Hoelbrak(Hoelbrak)
    }
}
impl Holosmith {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Holosmith(Holosmith)
    }
}
impl Ice {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Ice(Ice)
    }
}
impl Infiltration {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Chronomancer(Chronomancer)
    }
}
impl Krait {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Krait(Krait)
    }
}
impl Leadership {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Leadership(Leadership)
    }
}
impl Lich {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Lich(Lich)
    }
}
impl Lyssa {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Lyssa(Lyssa)
    }
}
impl MadKing {
    pub fn as_known(self) -> KnownRune {
        KnownRune::MadKing(MadKing)
    }
}
impl Melandru {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Melandru(Melandru)
    }
}
impl Mercy {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Mercy(Mercy)
    }
}
impl Mesmer {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Chronomancer(Chronomancer)
    }
}
impl Mirage {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Mirage(Mirage)
    }
}
impl Monk {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Monk(Monk)
    }
}
impl NaturesBounty {
    pub fn as_known(self) -> KnownRune {
        KnownRune::NaturesBounty(NaturesBounty)
    }
}
impl Necromancer {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Necromancer(Necromancer)
    }
}
impl Nightmare {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Nightmare(Nightmare)
    }
}
impl Ogre {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Ogre(Ogre)
    }
}
impl Orr {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Orr(Orr)
    }
}
impl Pack {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Pack(Pack)
    }
}
impl Perplexity {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Perplexity(Perplexity)
    }
}
impl Privateer {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Privateer(Privateer)
    }
}
impl Radiance {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Radiance(Radiance)
    }
}
impl Rage {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Rage(Rage)
    }
}
impl Ranger {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Ranger(Ranger)
    }
}
impl RataSum {
    pub fn as_known(self) -> KnownRune {
        KnownRune::RataSum(RataSum)
    }
}
impl Reaper {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Brawler(Brawler)
    }
}
impl Rebirth {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Altruism(Altruism)
    }
}
impl Renegade {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Renegade(Renegade)
    }
}
impl Resistance {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Resistance(Resistance)
    }
}
impl Revenant {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Revenant(Revenant)
    }
}
impl Sanctuary {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Sanctuary(Sanctuary)
    }
}
impl Scavenging {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Scavenging(Scavenging)
    }
}
impl Scholar {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Scholar(Scholar)
    }
}
impl Scourge {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Scourge(Scourge)
    }
}
impl Scrapper {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Cavalier(Cavalier)
    }
}
impl Snowfall {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Snowfall(Snowfall)
    }
}
impl Soulbeast {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Soulbeast(Soulbeast)
    }
}
impl Speed {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Speed(Speed)
    }
}
impl Spellbreaker {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Chronomancer(Chronomancer)
    }
}
impl Stars {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Stars(Stars)
    }
}
impl Strength {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Strength(Strength)
    }
}
impl Sunless {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Antitoxin(Antitoxin)
    }
}
impl Surging {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Fireworks(Fireworks)
    }
}
impl Svanir {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Resistance(Resistance)
    }
}
impl Tempest {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Tempest(Tempest)
    }
}
impl Thief {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Thief(Thief)
    }
}
impl Thorns {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Thorns(Thorns)
    }
}
impl Tormenting {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Tormenting(Tormenting)
    }
}
impl Trapper {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Trapper(Trapper)
    }
}
impl Traveler {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Traveler(Traveler)
    }
}
impl Trooper {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Trooper(Trooper)
    }
}
impl Undead {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Undead(Undead)
    }
}
impl Vampirism {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Vampirism(Vampirism)
    }
}
impl Warrior {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Warrior(Warrior)
    }
}
impl Water {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Water(Water)
    }
}
impl Weaver {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Weaver(Weaver)
    }
}
impl Wurm {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Wurm(Wurm)
    }
}
impl Zephyrite {
    pub fn as_known(self) -> KnownRune {
        KnownRune::Divinity(Divinity)
    }
}
impl From<KnownRune> for Rune {
    fn from(x: KnownRune) -> Rune {
        match x {
            KnownRune::NoRune(y) => Rune::NoRune(y),
            KnownRune::Adventurer(y) => Rune::Adventurer(y),
            KnownRune::Afflicted(y) => Rune::Afflicted(y),
            KnownRune::Air(y) => Rune::Air(y),
            KnownRune::Altruism(y) => Rune::Altruism(y),
            KnownRune::Antitoxin(y) => Rune::Antitoxin(y),
            KnownRune::Aristocracy(y) => Rune::Aristocracy(y),
            KnownRune::Baelfire(y) => Rune::Baelfire(y),
            KnownRune::Balthazar(y) => Rune::Balthazar(y),
            KnownRune::Berserker(y) => Rune::Berserker(y),
            KnownRune::Brawler(y) => Rune::Brawler(y),
            KnownRune::Cavalier(y) => Rune::Cavalier(y),
            KnownRune::Centaur(y) => Rune::Centaur(y),
            KnownRune::Chronomancer(y) => Rune::Chronomancer(y),
            KnownRune::Citadel(y) => Rune::Citadel(y),
            KnownRune::Deadeye(y) => Rune::Deadeye(y),
            KnownRune::Defender(y) => Rune::Defender(y),
            KnownRune::Divinity(y) => Rune::Divinity(y),
            KnownRune::Dolyak(y) => Rune::Dolyak(y),
            KnownRune::Dragonhunter(y) => Rune::Dragonhunter(y),
            KnownRune::Druid(y) => Rune::Druid(y),
            KnownRune::Durability(y) => Rune::Durability(y),
            KnownRune::Dwayna(y) => Rune::Dwayna(y),
            KnownRune::Eagle(y) => Rune::Eagle(y),
            KnownRune::Earth(y) => Rune::Earth(y),
            KnownRune::Elementalist(y) => Rune::Elementalist(y),
            KnownRune::Engineer(y) => Rune::Engineer(y),
            KnownRune::Evasion(y) => Rune::Evasion(y),
            KnownRune::Exuberance(y) => Rune::Exuberance(y),
            KnownRune::Fire(y) => Rune::Fire(y),
            KnownRune::Firebrand(y) => Rune::Firebrand(y),
            KnownRune::Fireworks(y) => Rune::Fireworks(y),
            KnownRune::FlameLegion(y) => Rune::FlameLegion(y),
            KnownRune::Flock(y) => Rune::Flock(y),
            KnownRune::Forgeman(y) => Rune::Forgeman(y),
            KnownRune::Golemancer(y) => Rune::Golemancer(y),
            KnownRune::Grove(y) => Rune::Grove(y),
            KnownRune::Guardian(y) => Rune::Guardian(y),
            KnownRune::Herald(y) => Rune::Herald(y),
            KnownRune::Hoelbrak(y) => Rune::Hoelbrak(y),
            KnownRune::Holosmith(y) => Rune::Holosmith(y),
            KnownRune::Ice(y) => Rune::Ice(y),
            KnownRune::Krait(y) => Rune::Krait(y),
            KnownRune::Leadership(y) => Rune::Leadership(y),
            KnownRune::Lich(y) => Rune::Lich(y),
            KnownRune::Lyssa(y) => Rune::Lyssa(y),
            KnownRune::MadKing(y) => Rune::MadKing(y),
            KnownRune::Melandru(y) => Rune::Melandru(y),
            KnownRune::Mercy(y) => Rune::Mercy(y),
            KnownRune::Mirage(y) => Rune::Mirage(y),
            KnownRune::Monk(y) => Rune::Monk(y),
            KnownRune::NaturesBounty(y) => Rune::NaturesBounty(y),
            KnownRune::Necromancer(y) => Rune::Necromancer(y),
            KnownRune::Nightmare(y) => Rune::Nightmare(y),
            KnownRune::Ogre(y) => Rune::Ogre(y),
            KnownRune::Orr(y) => Rune::Orr(y),
            KnownRune::Pack(y) => Rune::Pack(y),
            KnownRune::Perplexity(y) => Rune::Perplexity(y),
            KnownRune::Privateer(y) => Rune::Privateer(y),
            KnownRune::Radiance(y) => Rune::Radiance(y),
            KnownRune::Rage(y) => Rune::Rage(y),
            KnownRune::Ranger(y) => Rune::Ranger(y),
            KnownRune::RataSum(y) => Rune::RataSum(y),
            KnownRune::Renegade(y) => Rune::Renegade(y),
            KnownRune::Resistance(y) => Rune::Resistance(y),
            KnownRune::Revenant(y) => Rune::Revenant(y),
            KnownRune::Sanctuary(y) => Rune::Sanctuary(y),
            KnownRune::Scavenging(y) => Rune::Scavenging(y),
            KnownRune::Scholar(y) => Rune::Scholar(y),
            KnownRune::Scourge(y) => Rune::Scourge(y),
            KnownRune::Snowfall(y) => Rune::Snowfall(y),
            KnownRune::Soulbeast(y) => Rune::Soulbeast(y),
            KnownRune::Speed(y) => Rune::Speed(y),
            KnownRune::Stars(y) => Rune::Stars(y),
            KnownRune::Strength(y) => Rune::Strength(y),
            KnownRune::Tempest(y) => Rune::Tempest(y),
            KnownRune::Thief(y) => Rune::Thief(y),
            KnownRune::Thorns(y) => Rune::Thorns(y),
            KnownRune::Tormenting(y) => Rune::Tormenting(y),
            KnownRune::Trapper(y) => Rune::Trapper(y),
            KnownRune::Traveler(y) => Rune::Traveler(y),
            KnownRune::Trooper(y) => Rune::Trooper(y),
            KnownRune::Undead(y) => Rune::Undead(y),
            KnownRune::Vampirism(y) => Rune::Vampirism(y),
            KnownRune::Warrior(y) => Rune::Warrior(y),
            KnownRune::Water(y) => Rune::Water(y),
            KnownRune::Weaver(y) => Rune::Weaver(y),
            KnownRune::Wurm(y) => Rune::Wurm(y),
        }
    }
}

// END GENERATED CODE
