use crate::effect::Effect;
use crate::stats::{Stats, Modifiers};

// BEGIN GENERATED CODE
// Generated by gen_gear_tables.py for GW2 build 142239 at 2023-03-06T17:22:46

/// No Rune
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct NoRune;
#[allow(unused_variables)]
impl Effect for NoRune {
}
impl NoRune {
    pub fn display_name(&self) -> &'static str {
        "No Rune"
    }
}

/// Superior Rune of the Adventurer
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Adventurer;
#[allow(unused_variables)]
impl Effect for Adventurer {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        s.power += 225.0;
        // unknown: gain 50% endurance after using a healing skill
    }
}
impl Adventurer {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Adventurer"
    }
}

/// Superior Rune of the Afflicted
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Afflicted;
#[allow(unused_variables)]
impl Effect for Afflicted {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.bleed += 20.0;
        m.condition_duration.poison += 10.0;
        m.condition_duration += 10.0;
        s.condition_damage += 175.0;
        // unknown: create a death nova at a foe's location upon their defeat. (cooldown: 15 seconds)
    }
}
impl Afflicted {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Afflicted"
    }
}

/// Superior Rune of the Air
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Air;
#[allow(unused_variables)]
impl Effect for Air {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration.swiftness += 50.0;
        s.ferocity += 175.0;
        // unknown: gain shocking aura for 4 seconds after using a healing skill
    }
}
impl Air {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Air"
    }
}

/// Superior Rune of Altruism
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Altruism;
#[allow(unused_variables)]
impl Effect for Altruism {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration += 15.0;
        s.healing_power += 300.0;
        // unknown (Altruism): transfer 1 condition from 5 allies within a 600 radius to yourself after using an elite skill
        // unknown (Rebirth): ignore the next lethal blow and gain barrier
    }
}
impl Altruism {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Altruism / Superior Rune of the Rebirth"
    }
}

/// Superior Rune of Antitoxin
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Antitoxin;
#[allow(unused_variables)]
impl Effect for Antitoxin {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        // unimplemented (Antitoxin): incoming_condi_duration, condition, -25.0
        // unknown (Antitoxin): incoming condition cleanses remove an additional condition
        // unimplemented (Grenth): condi_duration, chill, 50.0
        // unknown (Grenth): chill nearby foes after using a healing skill
        // unimplemented (Sunless): incoming_condi_duration, condition, -25.0
        // unknown (Sunless): inflict nearby foes with 1 second of fear and 5 seconds of poison after using an elite skill
    }
}
impl Antitoxin {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Antitoxin / Superior Rune of Grenth / Superior Rune of the Sunless"
    }
}

/// Superior Rune of the Aristocracy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Aristocracy;
#[allow(unused_variables)]
impl Effect for Aristocracy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration.might += 50.0;
        s.condition_damage += 175.0;
        // unknown: gain 5 stacks of might for 4 seconds after inflicting weakness on a foe. (cooldown: 1 second)
    }
}
impl Aristocracy {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Aristocracy"
    }
}

/// Superior Rune of the Baelfire
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Baelfire;
#[allow(unused_variables)]
impl Effect for Baelfire {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.burn += 30.0;
        m.condition_duration += 10.0;
        s.power += 175.0;
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += s.power * 0.07;
    }
}
impl Baelfire {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Baelfire"
    }
}

/// Superior Rune of Balthazar
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Balthazar;
#[allow(unused_variables)]
impl Effect for Balthazar {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.burn += 50.0;
        m.max_health += 10.0;
        s.condition_damage += 175.0;
    }
}
impl Balthazar {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Balthazar"
    }
}

/// Superior Rune of the Berserker
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Berserker;
#[allow(unused_variables)]
impl Effect for Berserker {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_damage += 5.0;
        s.condition_damage += 175.0;
        s.power += 100.0;
        m.strike_damage += 5.0;
    }
}
impl Berserker {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Berserker"
    }
}

/// Superior Rune of the Brawler
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Brawler;
#[allow(unused_variables)]
impl Effect for Brawler {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.toughness += 225.0;
        // unknown (Brawler): gain 5 stacks of might for 10 seconds after using a healing skill
        // unknown (Reaper): chill enemies within a 360 radius for 1 second after executing a shout skill
    }
}
impl Brawler {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Brawler / Superior Rune of the Reaper"
    }
}

/// Superior Rune of the Cavalier
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Cavalier;
#[allow(unused_variables)]
impl Effect for Cavalier {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.toughness += 100.0;
        // unknown (Cavalier): using an <c=@abilitytype>engage</c> ability grants quickness and bonus damage for 5 seconds
        // unknown (Daredevil): next attack is guaranteed to crit after completing a dodge roll while in combat
        // unknown (Scrapper): damage reduced by 7% when within 600 units of an enemy
    }
}
impl Cavalier {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Cavalier / Superior Rune of the Daredevil / Superior Rune of the Scrapper"
    }
}

/// Superior Rune of the Centaur
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Centaur;
#[allow(unused_variables)]
impl Effect for Centaur {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration.swiftness += 50.0;
        s.power += 175.0;
        // unknown: grant swiftness to nearby allies for 10 seconds after using a healing skill
    }
}
impl Centaur {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Centaur"
    }
}

/// Superior Rune of the Chronomancer
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Chronomancer;
#[allow(unused_variables)]
impl Effect for Chronomancer {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.precision += 100.0;
        // unknown (Chronomancer): apply 2 seconds of quickness when you cast a well
        // unknown (Infiltration): deal +10% increased strike damage to enemies below 50% health
        // unknown (Infiltration): gain 5 seconds of vigor after entering stealth. (cooldown: 30 seconds)
        // unimplemented (Mesmer): condi_duration, daze, 33.0
        // unknown (Mesmer): increase strike damage dealt to dazed foes by 10%
        // unknown (Spellbreaker): you deal 7% more damage to foes that have no boons
    }
}
impl Chronomancer {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Chronomancer / Superior Rune of Infiltration / Superior Rune of the Mesmer / Superior Rune of the Spellbreaker"
    }
}

/// Superior Rune of the Citadel
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Citadel;
#[allow(unused_variables)]
impl Effect for Citadel {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration.fury += 50.0;
        s.power += 175.0;
        // unknown: call in an artillery strike at your position after using an elite skill
    }
}
impl Citadel {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Citadel"
    }
}

/// Superior Rune of the Daredevil
pub type Daredevil = Cavalier;

/// Superior Rune of the Deadeye
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Deadeye;
#[allow(unused_variables)]
impl Effect for Deadeye {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 100.0;
        s.power += 175.0;
        // unknown: apply 2 stacks of might for 15 seconds when you use a cantrip
    }
}
impl Deadeye {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Deadeye"
    }
}

/// Superior Rune of the Defender
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Defender;
#[allow(unused_variables)]
impl Effect for Defender {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.max_health += 10.0;
        s.healing_power += 100.0;
        s.toughness += 175.0;
        // unknown: heal for 5% of your maximum health after blocking an attack. (cooldown: 1 second)
    }
}
impl Defender {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Defender"
    }
}

/// Superior Rune of Divinity
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Divinity;
#[allow(unused_variables)]
impl Effect for Divinity {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        *s += 60.0;
        // unknown (Divinity): +18 to all stats, +10% maximum health
        // unknown (Zephyrite): superspeed you grant lasts 33% longer
        // unknown (Zephyrite): using an elite skill grants you superspeed for 5 seconds
    }
}
impl Divinity {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Divinity / Superior Rune of the Zephyrite"
    }
}

/// Superior Rune of the Dolyak
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Dolyak;
#[allow(unused_variables)]
impl Effect for Dolyak {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 300.0;
        s.vitality += 100.0;
        // unknown: regenerate health every second
    }
}
impl Dolyak {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Dolyak"
    }
}

/// Superior Rune of the Dragonhunter
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Dragonhunter;
#[allow(unused_variables)]
impl Effect for Dragonhunter {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 175.0;
        s.power += 100.0;
        // unknown: apply 5 stacks of might for 8 seconds when you place a trap
    }
}
impl Dragonhunter {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Dragonhunter"
    }
}

/// Superior Rune of the Druid
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Druid;
#[allow(unused_variables)]
impl Effect for Druid {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 175.0;
        s.vitality += 100.0;
        // unknown: gain +500 healing power for 3 seconds after casting a glyph
    }
}
impl Druid {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Druid"
    }
}

/// Superior Rune of Durability
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Durability;
#[allow(unused_variables)]
impl Effect for Durability {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration += 15.0;
        m.max_health += 10.0;
        s.toughness += 175.0;
        // unknown: grant nearby allies protection and regeneration for 3 seconds, and resistance for 1 second when struck
    }
}
impl Durability {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Durability"
    }
}

/// Superior Rune of Dwayna
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Dwayna;
#[allow(unused_variables)]
impl Effect for Dwayna {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration.regeneration += 30.0;
        m.max_health += 10.0;
        s.healing_power += 175.0;
        // unknown: regeneration you apply is 20% more effective
    }
}
impl Dwayna {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Dwayna"
    }
}

/// Superior Rune of the Eagle
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Eagle;
#[allow(unused_variables)]
impl Effect for Eagle {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 225.0;
        s.precision += 175.0;
        // unknown: deal 10% increased strike damage to targets with less than 50% health
    }
}
impl Eagle {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Eagle"
    }
}

/// Superior Rune of the Earth
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Earth;
#[allow(unused_variables)]
impl Effect for Earth {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration.protection += 30.0;
        s.toughness += 175.0;
        // unimplemented: incoming_heal, 10.0
        // unknown: gain protection and magnetic aura when struck by a foe
    }
}
impl Earth {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Earth"
    }
}

/// Superior Rune of the Elementalist
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Elementalist;
#[allow(unused_variables)]
impl Effect for Elementalist {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration += 10.0;
        s.condition_damage += 225.0;
        s.power += 175.0;
    }
}
impl Elementalist {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Elementalist"
    }
}

/// Superior Rune of the Engineer
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Engineer;
#[allow(unused_variables)]
impl Effect for Engineer {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 225.0;
        s.toughness += 175.0;
        // unknown: increase strike damage dealt by 7% while wielding conjured weapons, environmental weapons, kits, and banners
    }
}
impl Engineer {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Engineer"
    }
}

/// Superior Rune of Evasion
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Evasion;
#[allow(unused_variables)]
impl Effect for Evasion {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration.swiftness += 30.0;
        s.ferocity += 300.0;
        // unknown: gain swiftness for 6 seconds after evading an attack
    }
}
impl Evasion {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Evasion"
    }
}

/// Superior Rune of Exuberance
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Exuberance;
#[allow(unused_variables)]
impl Effect for Exuberance {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 175.0;
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += s.vitality * 0.03;
        s.power += s.vitality * 0.07;
        s.precision += s.vitality * 0.05;
    }
}
impl Exuberance {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Exuberance"
    }
}

/// Superior Rune of the Fire
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Fire;
#[allow(unused_variables)]
impl Effect for Fire {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration.might += 10.0;
        m.condition_duration.burn += 20.0;
        s.power += 175.0;
        // unknown: gain fire aura for 4 seconds when entering combat
        // unknown: increase strike damage by 10% while fire aura is active
    }
}
impl Fire {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Fire"
    }
}

/// Superior Rune of the Firebrand
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Firebrand;
#[allow(unused_variables)]
impl Effect for Firebrand {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration.quickness += 30.0;
        m.boon_duration += 10.0;
        s.condition_damage += 175.0;
        // unknown: when you use an elite skill, inflict burning on nearby enemies
    }
}
impl Firebrand {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Firebrand"
    }
}

/// Superior Rune of Fireworks
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Fireworks;
#[allow(unused_variables)]
impl Effect for Fireworks {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration += 15.0;
        s.power += 175.0;
        // unimplemented (Fireworks): move_speed, 25.0
        // unknown (Fireworks): gain 6 stacks of might, fury, and vigor for 6 seconds while in combat. (cooldown: 20 seconds)
        // unimplemented (Surging): move_speed, 25.0
        // unknown (Surging): gain shocking aura for 4 seconds after using an elite skill
    }
}
impl Fireworks {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Fireworks / Superior Rune of Surging"
    }
}

/// Superior Rune of the Flame Legion
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FlameLegion;
#[allow(unused_variables)]
impl Effect for FlameLegion {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.burn += 50.0;
        s.power += 175.0;
        // unknown: increase damage to burning foes by 7%
    }
}
impl FlameLegion {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Flame Legion"
    }
}

/// Superior Rune of the Flock
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Flock;
#[allow(unused_variables)]
impl Effect for Flock {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.max_health += 10.0;
        s.healing_power += 175.0;
        s.vitality += 100.0;
        // unknown: you and nearby allies are healed for an additional amount after you use a healing skill
    }
}
impl Flock {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Flock"
    }
}

/// Superior Rune of the Forgeman
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Forgeman;
#[allow(unused_variables)]
impl Effect for Forgeman {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.burn += 50.0;
        s.toughness += 175.0;
        // unknown: gain fire aura for 4 seconds when struck by a foe while below 75% health. (cooldown: 20 seconds)
    }
}
impl Forgeman {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Forgeman"
    }
}

/// Superior Rune of the Golemancer
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Golemancer;
#[allow(unused_variables)]
impl Effect for Golemancer {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 300.0;
        s.precision += 100.0;
        // unknown: summon a golem while in combat
    }
}
impl Golemancer {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Golemancer"
    }
}

/// Superior Rune of Grenth
pub type Grenth = Antitoxin;

/// Superior Rune of the Grove
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Grove;
#[allow(unused_variables)]
impl Effect for Grove {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration.protection += 50.0;
        s.healing_power += 175.0;
        // unknown: when struck by a foe, a meadow blooms at your location, granting vigor, regeneration, and protection to allies within it
    }
}
impl Grove {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Grove"
    }
}

/// Superior Rune of the Guardian
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Guardian;
#[allow(unused_variables)]
impl Effect for Guardian {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.toughness += 300.0;
        // unknown: burn a foe for 1 second after blocking its attack
    }
}
impl Guardian {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Guardian"
    }
}

/// Superior Rune of the Herald
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Herald;
#[allow(unused_variables)]
impl Effect for Herald {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration += 15.0;
        s.toughness += 175.0;
        // unknown: when using a heal skill, apply protection to nearby allies (360 radius).<br>
    }
}
impl Herald {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Herald"
    }
}

/// Superior Rune of Hoelbrak
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Hoelbrak;
#[allow(unused_variables)]
impl Effect for Hoelbrak {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration.might += 10.0;
        m.boon_duration += 10.0;
        s.power += 175.0;
        // unimplemented: incoming_condi_damage, condition, -10.0
        // unimplemented: incoming_condi_duration, condition, -10.0
    }
}
impl Hoelbrak {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Hoelbrak"
    }
}

/// Superior Rune of the Holosmith
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Holosmith;
#[allow(unused_variables)]
impl Effect for Holosmith {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 175.0;
        s.vitality += 100.0;
        // unknown: gain a laser-disc when struck below the 75% health threshold
    }
}
impl Holosmith {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Holosmith"
    }
}

/// Superior Rune of the Ice
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Ice;
#[allow(unused_variables)]
impl Effect for Ice {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 175.0;
        // unimplemented: condi_duration, chill, 30.0
        // unknown: +7% damage to chilled foes
        // unknown: surround yourself with an ice nova after using an elite skill. (cooldown: 10 seconds)
    }
}
impl Ice {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Ice"
    }
}

/// Superior Rune of Infiltration
pub type Infiltration = Chronomancer;

/// Superior Rune of the Krait
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Krait;
#[allow(unused_variables)]
impl Effect for Krait {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.bleed += 50.0;
        s.condition_damage += 175.0;
        // unknown: inflict bleeding, torment, and poison to nearby foes for 8 seconds after using an elite skill 
    }
}
impl Krait {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Krait"
    }
}

/// Superior Rune of Leadership
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Leadership;
#[allow(unused_variables)]
impl Effect for Leadership {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration += 25.0;
        *s += 36.0;
        // unknown: convert up to 3 conditions into boons for nearby allies after using an elite skill
    }
}
impl Leadership {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Leadership"
    }
}

/// Superior Rune of the Lich
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Lich;
#[allow(unused_variables)]
impl Effect for Lich {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_damage += 4.0;
        m.condition_duration += 15.0;
        s.vitality += 175.0;
        // unknown: summon a jagged horror while in combat
    }
}
impl Lich {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Lich"
    }
}

/// Superior Rune of Lyssa
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Lyssa;
#[allow(unused_variables)]
impl Effect for Lyssa {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration += 10.0;
        m.condition_duration += 15.0;
        s.precision += 175.0;
        // unknown: convert up to 3 conditions into boons after using an elite skill
    }
}
impl Lyssa {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Lyssa"
    }
}

/// Superior Rune of the Mad King
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MadKing;
#[allow(unused_variables)]
impl Effect for MadKing {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.bleed += 40.0;
        m.condition_duration += 5.0;
        s.power += 175.0;
        // unknown: summon ravens to attack nearby enemies after using an elite skill
    }
}
impl MadKing {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Mad King"
    }
}

/// Superior Rune of Melandru
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Melandru;
#[allow(unused_variables)]
impl Effect for Melandru {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 175.0;
        s.vitality += 35.0;
        // unimplemented: incoming_condi_duration, condition, -20.0
        // unimplemented: incoming_condi_duration, stun, -20.0
    }
}
impl Melandru {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Melandru"
    }
}

/// Superior Rune of Mercy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Mercy;
#[allow(unused_variables)]
impl Effect for Mercy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 35.0;
        s.toughness += 175.0;
        // unknown: -20% incoming damage while reviving an ally
        // unknown: revive allies 20% faster and with 30% more health
    }
}
impl Mercy {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Mercy"
    }
}

/// Superior Rune of the Mesmer
pub type Mesmer = Chronomancer;

/// Superior Rune of the Mirage
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Mirage;
#[allow(unused_variables)]
impl Effect for Mirage {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        s.toughness += 225.0;
        // unknown: inflict torment for 4 seconds upon successfully evading an attack. (cooldown: 1 second)
    }
}
impl Mirage {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Mirage"
    }
}

/// Superior Rune of the Monk
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Monk;
#[allow(unused_variables)]
impl Effect for Monk {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration += 15.0;
        s.healing_power += 175.0;
        // unknown: +10% healing effectiveness to other allies
        // unknown: increase healing effectiveness to other allies by an additional 1% for 3 seconds after granting a boon to any ally (up to a maximum of 10 stacks)
    }
}
impl Monk {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Monk"
    }
}

/// Superior Rune of Nature's Bounty
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct NaturesBounty;
#[allow(unused_variables)]
impl Effect for NaturesBounty {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 175.0;
        // unimplemented: incoming_condi_duration, condition, -25.0
        // unknown: cleanse a condition from nearby allies after using a healing skill
    }
}
impl NaturesBounty {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Nature's Bounty"
    }
}

/// Superior Rune of the Necromancer
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Necromancer;
#[allow(unused_variables)]
impl Effect for Necromancer {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 300.0;
        s.vitality += 100.0;
        // unknown: 20% fear duration
    }
}
impl Necromancer {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Necromancer"
    }
}

/// Superior Rune of the Nightmare
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Nightmare;
#[allow(unused_variables)]
impl Effect for Nightmare {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration += 20.0;
        s.condition_damage += 175.0;
        // unimplemented: condi_duration, fear, 10.0
        // unknown: deliver an attack that transfers a condition and blinds nearby enemies after using an elite skill
    }
}
impl Nightmare {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Nightmare"
    }
}

/// Superior Rune of the Ogre
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Ogre;
#[allow(unused_variables)]
impl Effect for Ogre {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 100.0;
        s.power += 175.0;
        m.strike_damage += 4.0;
        // unknown: summon a rock dog while in combat
    }
}
impl Ogre {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Ogre"
    }
}

/// Superior Rune of Orr
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Orr;
#[allow(unused_variables)]
impl Effect for Orr {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.max_health += 10.0;
        s.condition_damage += 175.0;
        // unimplemented: incoming_condi_duration, condition, -25.0
    }
}
impl Orr {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Orr"
    }
}

/// Superior Rune of the Pack
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Pack;
#[allow(unused_variables)]
impl Effect for Pack {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration += 15.0;
        s.power += 175.0;
        s.precision += 125.0;
        // unknown: grant nearby allies 5 stacks of might, fury, and swiftness for 8 seconds while in combat. (cooldown: 30 seconds)
    }
}
impl Pack {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Pack"
    }
}

/// Superior Rune of Perplexity
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Perplexity;
#[allow(unused_variables)]
impl Effect for Perplexity {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.confuse += 50.0;
        s.condition_damage += 175.0;
        // unknown: decrease strike damage dealt to you by confused foes by 10%
    }
}
impl Perplexity {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Perplexity"
    }
}

/// Superior Rune of the Privateer
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Privateer;
#[allow(unused_variables)]
impl Effect for Privateer {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration.might += 30.0;
        s.power += 175.0;
        // unknown: shout "yarr!" while in combat, summoning a parrot and granting might to allies
    }
}
impl Privateer {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Privateer"
    }
}

/// Superior Rune of Radiance
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Radiance;
#[allow(unused_variables)]
impl Effect for Radiance {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration += 25.0;
        s.vitality += 175.0;
        // unknown: increase the duration of auras you grant by +33%
    }
}
impl Radiance {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Radiance"
    }
}

/// Superior Rune of Rage
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Rage;
#[allow(unused_variables)]
impl Effect for Rage {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration.fury += 30.0;
        s.ferocity += 175.0;
        // unknown: gain fury for 8 seconds when entering combat. (cooldown: 10 seconds)
        // unknown: increase strike damage dealt by 5% while under the effect of fury
    }
}
impl Rage {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Rage"
    }
}

/// Superior Rune of the Ranger
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Ranger;
#[allow(unused_variables)]
impl Effect for Ranger {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 100.0;
        s.precision += 175.0;
        // unknown: +7% damage while you have an active companion
    }
}
impl Ranger {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Ranger"
    }
}

/// Superior Rune of Rata Sum
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct RataSum;
#[allow(unused_variables)]
impl Effect for RataSum {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.poison += 10.0;
        m.condition_duration += 10.0;
        s.precision += 175.0;
        // unimplemented: condi_duration, weakness, 20.0
        // unknown: summon a gamma-ray field that grants might upon entering combat
    }
}
impl RataSum {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Rata Sum"
    }
}

/// Superior Rune of the Reaper
pub type Reaper = Brawler;

/// Superior Rune of the Rebirth
pub type Rebirth = Altruism;

/// Superior Rune of the Renegade
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Renegade;
#[allow(unused_variables)]
impl Effect for Renegade {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_damage += 7.0;
        s.condition_damage += 175.0;
        s.ferocity += 100.0;
    }
}
impl Renegade {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Renegade"
    }
}

/// Superior Rune of Resistance
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Resistance;
#[allow(unused_variables)]
impl Effect for Resistance {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 175.0;
        // unimplemented (Resistance): incoming_condi_duration, condition, -25.0
        // unknown (Resistance): gain resistance for 4 seconds after activating an elite skill
        // unimplemented (Svanir): condi_duration, chill, 30.0
        // unimplemented (Svanir): incoming_condi_duration, chill, -66.0
        // unknown (Svanir): gain frost aura for 4 seconds when hit by a foe while under 50% health
    }
}
impl Resistance {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Resistance / Superior Rune of Svanir"
    }
}

/// Superior Rune of the Revenant
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Revenant;
#[allow(unused_variables)]
impl Effect for Revenant {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        *s += 78.0;
        // unknown: gain 2 seconds of resistance after using a healing skill
    }
}
impl Revenant {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Revenant"
    }
}

/// Superior Rune of Sanctuary
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Sanctuary;
#[allow(unused_variables)]
impl Effect for Sanctuary {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration += 15.0;
        s.vitality += 175.0;
        // unknown: gain a barrier with health equal to 10% of any healing you receive
    }
}
impl Sanctuary {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Sanctuary"
    }
}

/// Superior Rune of Scavenging
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Scavenging;
#[allow(unused_variables)]
impl Effect for Scavenging {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.poison += 20.0;
        s.condition_damage += 175.0;
        s.vitality += 100.0;
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.vitality * 0.07;
    }
}
impl Scavenging {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Scavenging"
    }
}

/// Superior Rune of the Scholar
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Scholar;
#[allow(unused_variables)]
impl Effect for Scholar {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 225.0;
        s.power += 175.0;
        // unknown: increase strike damage by 5% while your health is above 90%
    }
}
impl Scholar {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Scholar"
    }
}

/// Superior Rune of the Scourge
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Scourge;
#[allow(unused_variables)]
impl Effect for Scourge {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.healing_power += 300.0;
        // unknown: gain barrier when struck by a foe while below 75% health
    }
}
impl Scourge {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Scourge"
    }
}

/// Superior Rune of the Scrapper
pub type Scrapper = Cavalier;

/// Superior Rune of Snowfall
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Snowfall;
#[allow(unused_variables)]
impl Effect for Snowfall {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 175.0;
        // unknown: create a pile of snow that chills enemies when you take falling damage
        // unknown: gain 15 seconds of regeneration when you take falling damage
        // unknown: gain 3 seconds of superspeed when you take falling damage
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += s.toughness * 0.05;
    }
}
impl Snowfall {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Snowfall"
    }
}

/// Superior Rune of the Soulbeast
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Soulbeast;
#[allow(unused_variables)]
impl Effect for Soulbeast {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        s.power += 100.0;
        // unknown: when you do not have an active pet, gain toughness equal to 7% of your condition damage
        // unknown: when you have an active pet, gain condition damage equal to 7% of your power
    }
}
impl Soulbeast {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Soulbeast"
    }
}

/// Superior Rune of Speed
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Speed;
#[allow(unused_variables)]
impl Effect for Speed {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration.swiftness += 50.0;
        s.vitality += 175.0;
        // unknown: increase movement speed by 66% when under the effect of swiftness
    }
}
impl Speed {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Speed"
    }
}

/// Superior Rune of the Spellbreaker
pub type Spellbreaker = Chronomancer;

/// Superior Rune of the Stars
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Stars;
#[allow(unused_variables)]
impl Effect for Stars {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        *s += 36.0;
        // unimplemented: incoming_condi_damage, condition, -10.0
        // unimplemented: incoming_condi_duration, condition, -10.0
        // unimplemented: incoming_condi_duration, weakness, -30.0
        // unknown: -30% incoming chill and cripple duration
    }
}
impl Stars {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Stars"
    }
}

/// Superior Rune of Strength
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Strength;
#[allow(unused_variables)]
impl Effect for Strength {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration.might += 50.0;
        s.power += 175.0;
        // unknown: increase strike damage by 5% while under the effect of might
    }
}
impl Strength {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Strength"
    }
}

/// Superior Rune of the Sunless
pub type Sunless = Antitoxin;

/// Superior Rune of Surging
pub type Surging = Fireworks;

/// Superior Rune of Svanir
pub type Svanir = Resistance;

/// Superior Rune of the Tempest
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Tempest;
#[allow(unused_variables)]
impl Effect for Tempest {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration += 25.0;
        *s += 36.0;
        // unknown: heal allies within a 360 radius after breaking a stun
    }
}
impl Tempest {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Tempest"
    }
}

/// Superior Rune of the Thief
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Thief;
#[allow(unused_variables)]
impl Effect for Thief {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.precision += 300.0;
        // unknown: increase strike damage dealt by 10% when striking a foe from behind or the flank
    }
}
impl Thief {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Thief"
    }
}

/// Superior Rune of Thorns
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Thorns;
#[allow(unused_variables)]
impl Effect for Thorns {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.poison += 50.0;
        s.condition_damage += 300.0;
    }
}
impl Thorns {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Thorns"
    }
}

/// Superior Rune of Tormenting
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Tormenting;
#[allow(unused_variables)]
impl Effect for Tormenting {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.torment += 50.0;
        s.condition_damage += 175.0;
        // unknown: gain regeneration for 3 seconds after inflicting a foe with torment. (cooldown: 5 seconds)
    }
}
impl Tormenting {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Tormenting"
    }
}

/// Superior Rune of the Trapper
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Trapper;
#[allow(unused_variables)]
impl Effect for Trapper {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration += 15.0;
        s.condition_damage += 175.0;
        // unknown: gain 3 seconds of stealth and superspeed after using a trap skill
    }
}
impl Trapper {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Trapper"
    }
}

/// Superior Rune of the Traveler
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Traveler;
#[allow(unused_variables)]
impl Effect for Traveler {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration += 15.0;
        m.condition_duration += 10.0;
        *s += 36.0;
        // unimplemented: move_speed, 25.0
    }
}
impl Traveler {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Traveler"
    }
}

/// Superior Rune of the Trooper
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Trooper;
#[allow(unused_variables)]
impl Effect for Trooper {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 225.0;
        s.vitality += 175.0;
        // unknown: remove a condition from each affected ally after using a shout skill
    }
}
impl Trooper {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Trooper"
    }
}

/// Superior Rune of the Undead
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Undead;
#[allow(unused_variables)]
impl Effect for Undead {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 175.0;
        s.toughness += 225.0;
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.toughness * 0.07;
    }
}
impl Undead {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Undead"
    }
}

/// Superior Rune of Vampirism
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Vampirism;
#[allow(unused_variables)]
impl Effect for Vampirism {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.max_health += 10.0;
        s.power += 175.0;
        s.vitality += 100.0;
        // unknown: restore 10% of your health upon killing a foe
    }
}
impl Vampirism {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of Vampirism"
    }
}

/// Superior Rune of the Warrior
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Warrior;
#[allow(unused_variables)]
impl Effect for Warrior {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.vitality += 300.0;
        // unknown: decrease recharge time by 20% after swapping weapons
    }
}
impl Warrior {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Warrior"
    }
}

/// Superior Rune of the Water
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Water;
#[allow(unused_variables)]
impl Effect for Water {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.boon_duration += 25.0;
        s.healing_power += 175.0;
        // unknown: remove a condition from you and nearby allies after using a healing skill
    }
}
impl Water {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Water"
    }
}

/// Superior Rune of the Weaver
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Weaver;
#[allow(unused_variables)]
impl Effect for Weaver {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.burn += 10.0;
        m.condition_duration += 10.0;
        *s += 36.0;
        // unimplemented: condi_duration, chill, 20.0
        // unknown: gain barrier after executing a <c=@abilitytype>stance</c> ability
    }
}
impl Weaver {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Weaver"
    }
}

/// Superior Rune of the Wurm
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Wurm;
#[allow(unused_variables)]
impl Effect for Wurm {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 100.0;
        s.vitality += 175.0;
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += s.vitality * 0.07;
    }
}
impl Wurm {
    pub fn display_name(&self) -> &'static str {
        "Superior Rune of the Wurm"
    }
}

/// Superior Rune of the Zephyrite
pub type Zephyrite = Divinity;

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
pub enum Rune {
    NoRune(NoRune),
    Altruism(Altruism),
    Antitoxin(Antitoxin),
    Balthazar(Balthazar),
    Divinity(Divinity),
    Durability(Durability),
    Dwayna(Dwayna),
    Evasion(Evasion),
    Exuberance(Exuberance),
    Fireworks(Fireworks),
    Hoelbrak(Hoelbrak),
    Chronomancer(Chronomancer),
    Leadership(Leadership),
    Lyssa(Lyssa),
    Melandru(Melandru),
    Mercy(Mercy),
    NaturesBounty(NaturesBounty),
    Orr(Orr),
    Perplexity(Perplexity),
    Radiance(Radiance),
    Rage(Rage),
    RataSum(RataSum),
    Resistance(Resistance),
    Sanctuary(Sanctuary),
    Scavenging(Scavenging),
    Snowfall(Snowfall),
    Speed(Speed),
    Strength(Strength),
    Thorns(Thorns),
    Tormenting(Tormenting),
    Vampirism(Vampirism),
    Adventurer(Adventurer),
    Afflicted(Afflicted),
    Air(Air),
    Aristocracy(Aristocracy),
    Baelfire(Baelfire),
    Berserker(Berserker),
    Brawler(Brawler),
    Cavalier(Cavalier),
    Centaur(Centaur),
    Citadel(Citadel),
    Deadeye(Deadeye),
    Defender(Defender),
    Dolyak(Dolyak),
    Dragonhunter(Dragonhunter),
    Druid(Druid),
    Eagle(Eagle),
    Earth(Earth),
    Elementalist(Elementalist),
    Engineer(Engineer),
    Fire(Fire),
    Firebrand(Firebrand),
    FlameLegion(FlameLegion),
    Flock(Flock),
    Forgeman(Forgeman),
    Golemancer(Golemancer),
    Grove(Grove),
    Guardian(Guardian),
    Herald(Herald),
    Holosmith(Holosmith),
    Ice(Ice),
    Krait(Krait),
    Lich(Lich),
    MadKing(MadKing),
    Mirage(Mirage),
    Monk(Monk),
    Necromancer(Necromancer),
    Nightmare(Nightmare),
    Ogre(Ogre),
    Pack(Pack),
    Privateer(Privateer),
    Ranger(Ranger),
    Renegade(Renegade),
    Revenant(Revenant),
    Scholar(Scholar),
    Scourge(Scourge),
    Soulbeast(Soulbeast),
    Stars(Stars),
    Tempest(Tempest),
    Thief(Thief),
    Trapper(Trapper),
    Traveler(Traveler),
    Trooper(Trooper),
    Undead(Undead),
    Warrior(Warrior),
    Water(Water),
    Weaver(Weaver),
    Wurm(Wurm),
}
impl Effect for Rune {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Rune::NoRune(x) => x.add_permanent(s, m),
            Rune::Altruism(x) => x.add_permanent(s, m),
            Rune::Antitoxin(x) => x.add_permanent(s, m),
            Rune::Balthazar(x) => x.add_permanent(s, m),
            Rune::Divinity(x) => x.add_permanent(s, m),
            Rune::Durability(x) => x.add_permanent(s, m),
            Rune::Dwayna(x) => x.add_permanent(s, m),
            Rune::Evasion(x) => x.add_permanent(s, m),
            Rune::Exuberance(x) => x.add_permanent(s, m),
            Rune::Fireworks(x) => x.add_permanent(s, m),
            Rune::Hoelbrak(x) => x.add_permanent(s, m),
            Rune::Chronomancer(x) => x.add_permanent(s, m),
            Rune::Leadership(x) => x.add_permanent(s, m),
            Rune::Lyssa(x) => x.add_permanent(s, m),
            Rune::Melandru(x) => x.add_permanent(s, m),
            Rune::Mercy(x) => x.add_permanent(s, m),
            Rune::NaturesBounty(x) => x.add_permanent(s, m),
            Rune::Orr(x) => x.add_permanent(s, m),
            Rune::Perplexity(x) => x.add_permanent(s, m),
            Rune::Radiance(x) => x.add_permanent(s, m),
            Rune::Rage(x) => x.add_permanent(s, m),
            Rune::RataSum(x) => x.add_permanent(s, m),
            Rune::Resistance(x) => x.add_permanent(s, m),
            Rune::Sanctuary(x) => x.add_permanent(s, m),
            Rune::Scavenging(x) => x.add_permanent(s, m),
            Rune::Snowfall(x) => x.add_permanent(s, m),
            Rune::Speed(x) => x.add_permanent(s, m),
            Rune::Strength(x) => x.add_permanent(s, m),
            Rune::Thorns(x) => x.add_permanent(s, m),
            Rune::Tormenting(x) => x.add_permanent(s, m),
            Rune::Vampirism(x) => x.add_permanent(s, m),
            Rune::Adventurer(x) => x.add_permanent(s, m),
            Rune::Afflicted(x) => x.add_permanent(s, m),
            Rune::Air(x) => x.add_permanent(s, m),
            Rune::Aristocracy(x) => x.add_permanent(s, m),
            Rune::Baelfire(x) => x.add_permanent(s, m),
            Rune::Berserker(x) => x.add_permanent(s, m),
            Rune::Brawler(x) => x.add_permanent(s, m),
            Rune::Cavalier(x) => x.add_permanent(s, m),
            Rune::Centaur(x) => x.add_permanent(s, m),
            Rune::Citadel(x) => x.add_permanent(s, m),
            Rune::Deadeye(x) => x.add_permanent(s, m),
            Rune::Defender(x) => x.add_permanent(s, m),
            Rune::Dolyak(x) => x.add_permanent(s, m),
            Rune::Dragonhunter(x) => x.add_permanent(s, m),
            Rune::Druid(x) => x.add_permanent(s, m),
            Rune::Eagle(x) => x.add_permanent(s, m),
            Rune::Earth(x) => x.add_permanent(s, m),
            Rune::Elementalist(x) => x.add_permanent(s, m),
            Rune::Engineer(x) => x.add_permanent(s, m),
            Rune::Fire(x) => x.add_permanent(s, m),
            Rune::Firebrand(x) => x.add_permanent(s, m),
            Rune::FlameLegion(x) => x.add_permanent(s, m),
            Rune::Flock(x) => x.add_permanent(s, m),
            Rune::Forgeman(x) => x.add_permanent(s, m),
            Rune::Golemancer(x) => x.add_permanent(s, m),
            Rune::Grove(x) => x.add_permanent(s, m),
            Rune::Guardian(x) => x.add_permanent(s, m),
            Rune::Herald(x) => x.add_permanent(s, m),
            Rune::Holosmith(x) => x.add_permanent(s, m),
            Rune::Ice(x) => x.add_permanent(s, m),
            Rune::Krait(x) => x.add_permanent(s, m),
            Rune::Lich(x) => x.add_permanent(s, m),
            Rune::MadKing(x) => x.add_permanent(s, m),
            Rune::Mirage(x) => x.add_permanent(s, m),
            Rune::Monk(x) => x.add_permanent(s, m),
            Rune::Necromancer(x) => x.add_permanent(s, m),
            Rune::Nightmare(x) => x.add_permanent(s, m),
            Rune::Ogre(x) => x.add_permanent(s, m),
            Rune::Pack(x) => x.add_permanent(s, m),
            Rune::Privateer(x) => x.add_permanent(s, m),
            Rune::Ranger(x) => x.add_permanent(s, m),
            Rune::Renegade(x) => x.add_permanent(s, m),
            Rune::Revenant(x) => x.add_permanent(s, m),
            Rune::Scholar(x) => x.add_permanent(s, m),
            Rune::Scourge(x) => x.add_permanent(s, m),
            Rune::Soulbeast(x) => x.add_permanent(s, m),
            Rune::Stars(x) => x.add_permanent(s, m),
            Rune::Tempest(x) => x.add_permanent(s, m),
            Rune::Thief(x) => x.add_permanent(s, m),
            Rune::Trapper(x) => x.add_permanent(s, m),
            Rune::Traveler(x) => x.add_permanent(s, m),
            Rune::Trooper(x) => x.add_permanent(s, m),
            Rune::Undead(x) => x.add_permanent(s, m),
            Rune::Warrior(x) => x.add_permanent(s, m),
            Rune::Water(x) => x.add_permanent(s, m),
            Rune::Weaver(x) => x.add_permanent(s, m),
            Rune::Wurm(x) => x.add_permanent(s, m),
        }
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Rune::NoRune(x) => x.distribute(s, m),
            Rune::Altruism(x) => x.distribute(s, m),
            Rune::Antitoxin(x) => x.distribute(s, m),
            Rune::Balthazar(x) => x.distribute(s, m),
            Rune::Divinity(x) => x.distribute(s, m),
            Rune::Durability(x) => x.distribute(s, m),
            Rune::Dwayna(x) => x.distribute(s, m),
            Rune::Evasion(x) => x.distribute(s, m),
            Rune::Exuberance(x) => x.distribute(s, m),
            Rune::Fireworks(x) => x.distribute(s, m),
            Rune::Hoelbrak(x) => x.distribute(s, m),
            Rune::Chronomancer(x) => x.distribute(s, m),
            Rune::Leadership(x) => x.distribute(s, m),
            Rune::Lyssa(x) => x.distribute(s, m),
            Rune::Melandru(x) => x.distribute(s, m),
            Rune::Mercy(x) => x.distribute(s, m),
            Rune::NaturesBounty(x) => x.distribute(s, m),
            Rune::Orr(x) => x.distribute(s, m),
            Rune::Perplexity(x) => x.distribute(s, m),
            Rune::Radiance(x) => x.distribute(s, m),
            Rune::Rage(x) => x.distribute(s, m),
            Rune::RataSum(x) => x.distribute(s, m),
            Rune::Resistance(x) => x.distribute(s, m),
            Rune::Sanctuary(x) => x.distribute(s, m),
            Rune::Scavenging(x) => x.distribute(s, m),
            Rune::Snowfall(x) => x.distribute(s, m),
            Rune::Speed(x) => x.distribute(s, m),
            Rune::Strength(x) => x.distribute(s, m),
            Rune::Thorns(x) => x.distribute(s, m),
            Rune::Tormenting(x) => x.distribute(s, m),
            Rune::Vampirism(x) => x.distribute(s, m),
            Rune::Adventurer(x) => x.distribute(s, m),
            Rune::Afflicted(x) => x.distribute(s, m),
            Rune::Air(x) => x.distribute(s, m),
            Rune::Aristocracy(x) => x.distribute(s, m),
            Rune::Baelfire(x) => x.distribute(s, m),
            Rune::Berserker(x) => x.distribute(s, m),
            Rune::Brawler(x) => x.distribute(s, m),
            Rune::Cavalier(x) => x.distribute(s, m),
            Rune::Centaur(x) => x.distribute(s, m),
            Rune::Citadel(x) => x.distribute(s, m),
            Rune::Deadeye(x) => x.distribute(s, m),
            Rune::Defender(x) => x.distribute(s, m),
            Rune::Dolyak(x) => x.distribute(s, m),
            Rune::Dragonhunter(x) => x.distribute(s, m),
            Rune::Druid(x) => x.distribute(s, m),
            Rune::Eagle(x) => x.distribute(s, m),
            Rune::Earth(x) => x.distribute(s, m),
            Rune::Elementalist(x) => x.distribute(s, m),
            Rune::Engineer(x) => x.distribute(s, m),
            Rune::Fire(x) => x.distribute(s, m),
            Rune::Firebrand(x) => x.distribute(s, m),
            Rune::FlameLegion(x) => x.distribute(s, m),
            Rune::Flock(x) => x.distribute(s, m),
            Rune::Forgeman(x) => x.distribute(s, m),
            Rune::Golemancer(x) => x.distribute(s, m),
            Rune::Grove(x) => x.distribute(s, m),
            Rune::Guardian(x) => x.distribute(s, m),
            Rune::Herald(x) => x.distribute(s, m),
            Rune::Holosmith(x) => x.distribute(s, m),
            Rune::Ice(x) => x.distribute(s, m),
            Rune::Krait(x) => x.distribute(s, m),
            Rune::Lich(x) => x.distribute(s, m),
            Rune::MadKing(x) => x.distribute(s, m),
            Rune::Mirage(x) => x.distribute(s, m),
            Rune::Monk(x) => x.distribute(s, m),
            Rune::Necromancer(x) => x.distribute(s, m),
            Rune::Nightmare(x) => x.distribute(s, m),
            Rune::Ogre(x) => x.distribute(s, m),
            Rune::Pack(x) => x.distribute(s, m),
            Rune::Privateer(x) => x.distribute(s, m),
            Rune::Ranger(x) => x.distribute(s, m),
            Rune::Renegade(x) => x.distribute(s, m),
            Rune::Revenant(x) => x.distribute(s, m),
            Rune::Scholar(x) => x.distribute(s, m),
            Rune::Scourge(x) => x.distribute(s, m),
            Rune::Soulbeast(x) => x.distribute(s, m),
            Rune::Stars(x) => x.distribute(s, m),
            Rune::Tempest(x) => x.distribute(s, m),
            Rune::Thief(x) => x.distribute(s, m),
            Rune::Trapper(x) => x.distribute(s, m),
            Rune::Traveler(x) => x.distribute(s, m),
            Rune::Trooper(x) => x.distribute(s, m),
            Rune::Undead(x) => x.distribute(s, m),
            Rune::Warrior(x) => x.distribute(s, m),
            Rune::Water(x) => x.distribute(s, m),
            Rune::Weaver(x) => x.distribute(s, m),
            Rune::Wurm(x) => x.distribute(s, m),
        }
    }
    fn add_temporary(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Rune::NoRune(x) => x.add_temporary(s, m),
            Rune::Altruism(x) => x.add_temporary(s, m),
            Rune::Antitoxin(x) => x.add_temporary(s, m),
            Rune::Balthazar(x) => x.add_temporary(s, m),
            Rune::Divinity(x) => x.add_temporary(s, m),
            Rune::Durability(x) => x.add_temporary(s, m),
            Rune::Dwayna(x) => x.add_temporary(s, m),
            Rune::Evasion(x) => x.add_temporary(s, m),
            Rune::Exuberance(x) => x.add_temporary(s, m),
            Rune::Fireworks(x) => x.add_temporary(s, m),
            Rune::Hoelbrak(x) => x.add_temporary(s, m),
            Rune::Chronomancer(x) => x.add_temporary(s, m),
            Rune::Leadership(x) => x.add_temporary(s, m),
            Rune::Lyssa(x) => x.add_temporary(s, m),
            Rune::Melandru(x) => x.add_temporary(s, m),
            Rune::Mercy(x) => x.add_temporary(s, m),
            Rune::NaturesBounty(x) => x.add_temporary(s, m),
            Rune::Orr(x) => x.add_temporary(s, m),
            Rune::Perplexity(x) => x.add_temporary(s, m),
            Rune::Radiance(x) => x.add_temporary(s, m),
            Rune::Rage(x) => x.add_temporary(s, m),
            Rune::RataSum(x) => x.add_temporary(s, m),
            Rune::Resistance(x) => x.add_temporary(s, m),
            Rune::Sanctuary(x) => x.add_temporary(s, m),
            Rune::Scavenging(x) => x.add_temporary(s, m),
            Rune::Snowfall(x) => x.add_temporary(s, m),
            Rune::Speed(x) => x.add_temporary(s, m),
            Rune::Strength(x) => x.add_temporary(s, m),
            Rune::Thorns(x) => x.add_temporary(s, m),
            Rune::Tormenting(x) => x.add_temporary(s, m),
            Rune::Vampirism(x) => x.add_temporary(s, m),
            Rune::Adventurer(x) => x.add_temporary(s, m),
            Rune::Afflicted(x) => x.add_temporary(s, m),
            Rune::Air(x) => x.add_temporary(s, m),
            Rune::Aristocracy(x) => x.add_temporary(s, m),
            Rune::Baelfire(x) => x.add_temporary(s, m),
            Rune::Berserker(x) => x.add_temporary(s, m),
            Rune::Brawler(x) => x.add_temporary(s, m),
            Rune::Cavalier(x) => x.add_temporary(s, m),
            Rune::Centaur(x) => x.add_temporary(s, m),
            Rune::Citadel(x) => x.add_temporary(s, m),
            Rune::Deadeye(x) => x.add_temporary(s, m),
            Rune::Defender(x) => x.add_temporary(s, m),
            Rune::Dolyak(x) => x.add_temporary(s, m),
            Rune::Dragonhunter(x) => x.add_temporary(s, m),
            Rune::Druid(x) => x.add_temporary(s, m),
            Rune::Eagle(x) => x.add_temporary(s, m),
            Rune::Earth(x) => x.add_temporary(s, m),
            Rune::Elementalist(x) => x.add_temporary(s, m),
            Rune::Engineer(x) => x.add_temporary(s, m),
            Rune::Fire(x) => x.add_temporary(s, m),
            Rune::Firebrand(x) => x.add_temporary(s, m),
            Rune::FlameLegion(x) => x.add_temporary(s, m),
            Rune::Flock(x) => x.add_temporary(s, m),
            Rune::Forgeman(x) => x.add_temporary(s, m),
            Rune::Golemancer(x) => x.add_temporary(s, m),
            Rune::Grove(x) => x.add_temporary(s, m),
            Rune::Guardian(x) => x.add_temporary(s, m),
            Rune::Herald(x) => x.add_temporary(s, m),
            Rune::Holosmith(x) => x.add_temporary(s, m),
            Rune::Ice(x) => x.add_temporary(s, m),
            Rune::Krait(x) => x.add_temporary(s, m),
            Rune::Lich(x) => x.add_temporary(s, m),
            Rune::MadKing(x) => x.add_temporary(s, m),
            Rune::Mirage(x) => x.add_temporary(s, m),
            Rune::Monk(x) => x.add_temporary(s, m),
            Rune::Necromancer(x) => x.add_temporary(s, m),
            Rune::Nightmare(x) => x.add_temporary(s, m),
            Rune::Ogre(x) => x.add_temporary(s, m),
            Rune::Pack(x) => x.add_temporary(s, m),
            Rune::Privateer(x) => x.add_temporary(s, m),
            Rune::Ranger(x) => x.add_temporary(s, m),
            Rune::Renegade(x) => x.add_temporary(s, m),
            Rune::Revenant(x) => x.add_temporary(s, m),
            Rune::Scholar(x) => x.add_temporary(s, m),
            Rune::Scourge(x) => x.add_temporary(s, m),
            Rune::Soulbeast(x) => x.add_temporary(s, m),
            Rune::Stars(x) => x.add_temporary(s, m),
            Rune::Tempest(x) => x.add_temporary(s, m),
            Rune::Thief(x) => x.add_temporary(s, m),
            Rune::Trapper(x) => x.add_temporary(s, m),
            Rune::Traveler(x) => x.add_temporary(s, m),
            Rune::Trooper(x) => x.add_temporary(s, m),
            Rune::Undead(x) => x.add_temporary(s, m),
            Rune::Warrior(x) => x.add_temporary(s, m),
            Rune::Water(x) => x.add_temporary(s, m),
            Rune::Weaver(x) => x.add_temporary(s, m),
            Rune::Wurm(x) => x.add_temporary(s, m),
        }
    }
}
impl Rune {
    pub const COUNT: usize = 88;
    pub fn from_index(i: usize) -> Rune {
        match i {
            0 => Rune::NoRune(NoRune),
            1 => Rune::Altruism(Altruism),
            2 => Rune::Antitoxin(Antitoxin),
            3 => Rune::Balthazar(Balthazar),
            4 => Rune::Divinity(Divinity),
            5 => Rune::Durability(Durability),
            6 => Rune::Dwayna(Dwayna),
            7 => Rune::Evasion(Evasion),
            8 => Rune::Exuberance(Exuberance),
            9 => Rune::Fireworks(Fireworks),
            10 => Rune::Hoelbrak(Hoelbrak),
            11 => Rune::Chronomancer(Chronomancer),
            12 => Rune::Leadership(Leadership),
            13 => Rune::Lyssa(Lyssa),
            14 => Rune::Melandru(Melandru),
            15 => Rune::Mercy(Mercy),
            16 => Rune::NaturesBounty(NaturesBounty),
            17 => Rune::Orr(Orr),
            18 => Rune::Perplexity(Perplexity),
            19 => Rune::Radiance(Radiance),
            20 => Rune::Rage(Rage),
            21 => Rune::RataSum(RataSum),
            22 => Rune::Resistance(Resistance),
            23 => Rune::Sanctuary(Sanctuary),
            24 => Rune::Scavenging(Scavenging),
            25 => Rune::Snowfall(Snowfall),
            26 => Rune::Speed(Speed),
            27 => Rune::Strength(Strength),
            28 => Rune::Thorns(Thorns),
            29 => Rune::Tormenting(Tormenting),
            30 => Rune::Vampirism(Vampirism),
            31 => Rune::Adventurer(Adventurer),
            32 => Rune::Afflicted(Afflicted),
            33 => Rune::Air(Air),
            34 => Rune::Aristocracy(Aristocracy),
            35 => Rune::Baelfire(Baelfire),
            36 => Rune::Berserker(Berserker),
            37 => Rune::Brawler(Brawler),
            38 => Rune::Cavalier(Cavalier),
            39 => Rune::Centaur(Centaur),
            40 => Rune::Citadel(Citadel),
            41 => Rune::Deadeye(Deadeye),
            42 => Rune::Defender(Defender),
            43 => Rune::Dolyak(Dolyak),
            44 => Rune::Dragonhunter(Dragonhunter),
            45 => Rune::Druid(Druid),
            46 => Rune::Eagle(Eagle),
            47 => Rune::Earth(Earth),
            48 => Rune::Elementalist(Elementalist),
            49 => Rune::Engineer(Engineer),
            50 => Rune::Fire(Fire),
            51 => Rune::Firebrand(Firebrand),
            52 => Rune::FlameLegion(FlameLegion),
            53 => Rune::Flock(Flock),
            54 => Rune::Forgeman(Forgeman),
            55 => Rune::Golemancer(Golemancer),
            56 => Rune::Grove(Grove),
            57 => Rune::Guardian(Guardian),
            58 => Rune::Herald(Herald),
            59 => Rune::Holosmith(Holosmith),
            60 => Rune::Ice(Ice),
            61 => Rune::Krait(Krait),
            62 => Rune::Lich(Lich),
            63 => Rune::MadKing(MadKing),
            64 => Rune::Mirage(Mirage),
            65 => Rune::Monk(Monk),
            66 => Rune::Necromancer(Necromancer),
            67 => Rune::Nightmare(Nightmare),
            68 => Rune::Ogre(Ogre),
            69 => Rune::Pack(Pack),
            70 => Rune::Privateer(Privateer),
            71 => Rune::Ranger(Ranger),
            72 => Rune::Renegade(Renegade),
            73 => Rune::Revenant(Revenant),
            74 => Rune::Scholar(Scholar),
            75 => Rune::Scourge(Scourge),
            76 => Rune::Soulbeast(Soulbeast),
            77 => Rune::Stars(Stars),
            78 => Rune::Tempest(Tempest),
            79 => Rune::Thief(Thief),
            80 => Rune::Trapper(Trapper),
            81 => Rune::Traveler(Traveler),
            82 => Rune::Trooper(Trooper),
            83 => Rune::Undead(Undead),
            84 => Rune::Warrior(Warrior),
            85 => Rune::Water(Water),
            86 => Rune::Weaver(Weaver),
            87 => Rune::Wurm(Wurm),
            _ => panic!("index {} out of range for Rune", i),
        }
    }
    pub fn iter() -> impl Iterator<Item = Rune> {
        (0 .. Rune::COUNT).map(Rune::from_index)
    }
    pub fn display_name(self) -> &'static str {
        match self {
            Rune::NoRune(x) => x.display_name(),
            Rune::Altruism(x) => x.display_name(),
            Rune::Antitoxin(x) => x.display_name(),
            Rune::Balthazar(x) => x.display_name(),
            Rune::Divinity(x) => x.display_name(),
            Rune::Durability(x) => x.display_name(),
            Rune::Dwayna(x) => x.display_name(),
            Rune::Evasion(x) => x.display_name(),
            Rune::Exuberance(x) => x.display_name(),
            Rune::Fireworks(x) => x.display_name(),
            Rune::Hoelbrak(x) => x.display_name(),
            Rune::Chronomancer(x) => x.display_name(),
            Rune::Leadership(x) => x.display_name(),
            Rune::Lyssa(x) => x.display_name(),
            Rune::Melandru(x) => x.display_name(),
            Rune::Mercy(x) => x.display_name(),
            Rune::NaturesBounty(x) => x.display_name(),
            Rune::Orr(x) => x.display_name(),
            Rune::Perplexity(x) => x.display_name(),
            Rune::Radiance(x) => x.display_name(),
            Rune::Rage(x) => x.display_name(),
            Rune::RataSum(x) => x.display_name(),
            Rune::Resistance(x) => x.display_name(),
            Rune::Sanctuary(x) => x.display_name(),
            Rune::Scavenging(x) => x.display_name(),
            Rune::Snowfall(x) => x.display_name(),
            Rune::Speed(x) => x.display_name(),
            Rune::Strength(x) => x.display_name(),
            Rune::Thorns(x) => x.display_name(),
            Rune::Tormenting(x) => x.display_name(),
            Rune::Vampirism(x) => x.display_name(),
            Rune::Adventurer(x) => x.display_name(),
            Rune::Afflicted(x) => x.display_name(),
            Rune::Air(x) => x.display_name(),
            Rune::Aristocracy(x) => x.display_name(),
            Rune::Baelfire(x) => x.display_name(),
            Rune::Berserker(x) => x.display_name(),
            Rune::Brawler(x) => x.display_name(),
            Rune::Cavalier(x) => x.display_name(),
            Rune::Centaur(x) => x.display_name(),
            Rune::Citadel(x) => x.display_name(),
            Rune::Deadeye(x) => x.display_name(),
            Rune::Defender(x) => x.display_name(),
            Rune::Dolyak(x) => x.display_name(),
            Rune::Dragonhunter(x) => x.display_name(),
            Rune::Druid(x) => x.display_name(),
            Rune::Eagle(x) => x.display_name(),
            Rune::Earth(x) => x.display_name(),
            Rune::Elementalist(x) => x.display_name(),
            Rune::Engineer(x) => x.display_name(),
            Rune::Fire(x) => x.display_name(),
            Rune::Firebrand(x) => x.display_name(),
            Rune::FlameLegion(x) => x.display_name(),
            Rune::Flock(x) => x.display_name(),
            Rune::Forgeman(x) => x.display_name(),
            Rune::Golemancer(x) => x.display_name(),
            Rune::Grove(x) => x.display_name(),
            Rune::Guardian(x) => x.display_name(),
            Rune::Herald(x) => x.display_name(),
            Rune::Holosmith(x) => x.display_name(),
            Rune::Ice(x) => x.display_name(),
            Rune::Krait(x) => x.display_name(),
            Rune::Lich(x) => x.display_name(),
            Rune::MadKing(x) => x.display_name(),
            Rune::Mirage(x) => x.display_name(),
            Rune::Monk(x) => x.display_name(),
            Rune::Necromancer(x) => x.display_name(),
            Rune::Nightmare(x) => x.display_name(),
            Rune::Ogre(x) => x.display_name(),
            Rune::Pack(x) => x.display_name(),
            Rune::Privateer(x) => x.display_name(),
            Rune::Ranger(x) => x.display_name(),
            Rune::Renegade(x) => x.display_name(),
            Rune::Revenant(x) => x.display_name(),
            Rune::Scholar(x) => x.display_name(),
            Rune::Scourge(x) => x.display_name(),
            Rune::Soulbeast(x) => x.display_name(),
            Rune::Stars(x) => x.display_name(),
            Rune::Tempest(x) => x.display_name(),
            Rune::Thief(x) => x.display_name(),
            Rune::Trapper(x) => x.display_name(),
            Rune::Traveler(x) => x.display_name(),
            Rune::Trooper(x) => x.display_name(),
            Rune::Undead(x) => x.display_name(),
            Rune::Warrior(x) => x.display_name(),
            Rune::Water(x) => x.display_name(),
            Rune::Weaver(x) => x.display_name(),
            Rune::Wurm(x) => x.display_name(),
        }
    }
}
impl From<NoRune> for Rune {
    fn from(x: NoRune) -> Rune { Rune::NoRune(x) }
}
impl From<Altruism> for Rune {
    fn from(x: Altruism) -> Rune { Rune::Altruism(x) }
}
impl From<Antitoxin> for Rune {
    fn from(x: Antitoxin) -> Rune { Rune::Antitoxin(x) }
}
impl From<Balthazar> for Rune {
    fn from(x: Balthazar) -> Rune { Rune::Balthazar(x) }
}
impl From<Divinity> for Rune {
    fn from(x: Divinity) -> Rune { Rune::Divinity(x) }
}
impl From<Durability> for Rune {
    fn from(x: Durability) -> Rune { Rune::Durability(x) }
}
impl From<Dwayna> for Rune {
    fn from(x: Dwayna) -> Rune { Rune::Dwayna(x) }
}
impl From<Evasion> for Rune {
    fn from(x: Evasion) -> Rune { Rune::Evasion(x) }
}
impl From<Exuberance> for Rune {
    fn from(x: Exuberance) -> Rune { Rune::Exuberance(x) }
}
impl From<Fireworks> for Rune {
    fn from(x: Fireworks) -> Rune { Rune::Fireworks(x) }
}
impl From<Hoelbrak> for Rune {
    fn from(x: Hoelbrak) -> Rune { Rune::Hoelbrak(x) }
}
impl From<Chronomancer> for Rune {
    fn from(x: Chronomancer) -> Rune { Rune::Chronomancer(x) }
}
impl From<Leadership> for Rune {
    fn from(x: Leadership) -> Rune { Rune::Leadership(x) }
}
impl From<Lyssa> for Rune {
    fn from(x: Lyssa) -> Rune { Rune::Lyssa(x) }
}
impl From<Melandru> for Rune {
    fn from(x: Melandru) -> Rune { Rune::Melandru(x) }
}
impl From<Mercy> for Rune {
    fn from(x: Mercy) -> Rune { Rune::Mercy(x) }
}
impl From<NaturesBounty> for Rune {
    fn from(x: NaturesBounty) -> Rune { Rune::NaturesBounty(x) }
}
impl From<Orr> for Rune {
    fn from(x: Orr) -> Rune { Rune::Orr(x) }
}
impl From<Perplexity> for Rune {
    fn from(x: Perplexity) -> Rune { Rune::Perplexity(x) }
}
impl From<Radiance> for Rune {
    fn from(x: Radiance) -> Rune { Rune::Radiance(x) }
}
impl From<Rage> for Rune {
    fn from(x: Rage) -> Rune { Rune::Rage(x) }
}
impl From<RataSum> for Rune {
    fn from(x: RataSum) -> Rune { Rune::RataSum(x) }
}
impl From<Resistance> for Rune {
    fn from(x: Resistance) -> Rune { Rune::Resistance(x) }
}
impl From<Sanctuary> for Rune {
    fn from(x: Sanctuary) -> Rune { Rune::Sanctuary(x) }
}
impl From<Scavenging> for Rune {
    fn from(x: Scavenging) -> Rune { Rune::Scavenging(x) }
}
impl From<Snowfall> for Rune {
    fn from(x: Snowfall) -> Rune { Rune::Snowfall(x) }
}
impl From<Speed> for Rune {
    fn from(x: Speed) -> Rune { Rune::Speed(x) }
}
impl From<Strength> for Rune {
    fn from(x: Strength) -> Rune { Rune::Strength(x) }
}
impl From<Thorns> for Rune {
    fn from(x: Thorns) -> Rune { Rune::Thorns(x) }
}
impl From<Tormenting> for Rune {
    fn from(x: Tormenting) -> Rune { Rune::Tormenting(x) }
}
impl From<Vampirism> for Rune {
    fn from(x: Vampirism) -> Rune { Rune::Vampirism(x) }
}
impl From<Adventurer> for Rune {
    fn from(x: Adventurer) -> Rune { Rune::Adventurer(x) }
}
impl From<Afflicted> for Rune {
    fn from(x: Afflicted) -> Rune { Rune::Afflicted(x) }
}
impl From<Air> for Rune {
    fn from(x: Air) -> Rune { Rune::Air(x) }
}
impl From<Aristocracy> for Rune {
    fn from(x: Aristocracy) -> Rune { Rune::Aristocracy(x) }
}
impl From<Baelfire> for Rune {
    fn from(x: Baelfire) -> Rune { Rune::Baelfire(x) }
}
impl From<Berserker> for Rune {
    fn from(x: Berserker) -> Rune { Rune::Berserker(x) }
}
impl From<Brawler> for Rune {
    fn from(x: Brawler) -> Rune { Rune::Brawler(x) }
}
impl From<Cavalier> for Rune {
    fn from(x: Cavalier) -> Rune { Rune::Cavalier(x) }
}
impl From<Centaur> for Rune {
    fn from(x: Centaur) -> Rune { Rune::Centaur(x) }
}
impl From<Citadel> for Rune {
    fn from(x: Citadel) -> Rune { Rune::Citadel(x) }
}
impl From<Deadeye> for Rune {
    fn from(x: Deadeye) -> Rune { Rune::Deadeye(x) }
}
impl From<Defender> for Rune {
    fn from(x: Defender) -> Rune { Rune::Defender(x) }
}
impl From<Dolyak> for Rune {
    fn from(x: Dolyak) -> Rune { Rune::Dolyak(x) }
}
impl From<Dragonhunter> for Rune {
    fn from(x: Dragonhunter) -> Rune { Rune::Dragonhunter(x) }
}
impl From<Druid> for Rune {
    fn from(x: Druid) -> Rune { Rune::Druid(x) }
}
impl From<Eagle> for Rune {
    fn from(x: Eagle) -> Rune { Rune::Eagle(x) }
}
impl From<Earth> for Rune {
    fn from(x: Earth) -> Rune { Rune::Earth(x) }
}
impl From<Elementalist> for Rune {
    fn from(x: Elementalist) -> Rune { Rune::Elementalist(x) }
}
impl From<Engineer> for Rune {
    fn from(x: Engineer) -> Rune { Rune::Engineer(x) }
}
impl From<Fire> for Rune {
    fn from(x: Fire) -> Rune { Rune::Fire(x) }
}
impl From<Firebrand> for Rune {
    fn from(x: Firebrand) -> Rune { Rune::Firebrand(x) }
}
impl From<FlameLegion> for Rune {
    fn from(x: FlameLegion) -> Rune { Rune::FlameLegion(x) }
}
impl From<Flock> for Rune {
    fn from(x: Flock) -> Rune { Rune::Flock(x) }
}
impl From<Forgeman> for Rune {
    fn from(x: Forgeman) -> Rune { Rune::Forgeman(x) }
}
impl From<Golemancer> for Rune {
    fn from(x: Golemancer) -> Rune { Rune::Golemancer(x) }
}
impl From<Grove> for Rune {
    fn from(x: Grove) -> Rune { Rune::Grove(x) }
}
impl From<Guardian> for Rune {
    fn from(x: Guardian) -> Rune { Rune::Guardian(x) }
}
impl From<Herald> for Rune {
    fn from(x: Herald) -> Rune { Rune::Herald(x) }
}
impl From<Holosmith> for Rune {
    fn from(x: Holosmith) -> Rune { Rune::Holosmith(x) }
}
impl From<Ice> for Rune {
    fn from(x: Ice) -> Rune { Rune::Ice(x) }
}
impl From<Krait> for Rune {
    fn from(x: Krait) -> Rune { Rune::Krait(x) }
}
impl From<Lich> for Rune {
    fn from(x: Lich) -> Rune { Rune::Lich(x) }
}
impl From<MadKing> for Rune {
    fn from(x: MadKing) -> Rune { Rune::MadKing(x) }
}
impl From<Mirage> for Rune {
    fn from(x: Mirage) -> Rune { Rune::Mirage(x) }
}
impl From<Monk> for Rune {
    fn from(x: Monk) -> Rune { Rune::Monk(x) }
}
impl From<Necromancer> for Rune {
    fn from(x: Necromancer) -> Rune { Rune::Necromancer(x) }
}
impl From<Nightmare> for Rune {
    fn from(x: Nightmare) -> Rune { Rune::Nightmare(x) }
}
impl From<Ogre> for Rune {
    fn from(x: Ogre) -> Rune { Rune::Ogre(x) }
}
impl From<Pack> for Rune {
    fn from(x: Pack) -> Rune { Rune::Pack(x) }
}
impl From<Privateer> for Rune {
    fn from(x: Privateer) -> Rune { Rune::Privateer(x) }
}
impl From<Ranger> for Rune {
    fn from(x: Ranger) -> Rune { Rune::Ranger(x) }
}
impl From<Renegade> for Rune {
    fn from(x: Renegade) -> Rune { Rune::Renegade(x) }
}
impl From<Revenant> for Rune {
    fn from(x: Revenant) -> Rune { Rune::Revenant(x) }
}
impl From<Scholar> for Rune {
    fn from(x: Scholar) -> Rune { Rune::Scholar(x) }
}
impl From<Scourge> for Rune {
    fn from(x: Scourge) -> Rune { Rune::Scourge(x) }
}
impl From<Soulbeast> for Rune {
    fn from(x: Soulbeast) -> Rune { Rune::Soulbeast(x) }
}
impl From<Stars> for Rune {
    fn from(x: Stars) -> Rune { Rune::Stars(x) }
}
impl From<Tempest> for Rune {
    fn from(x: Tempest) -> Rune { Rune::Tempest(x) }
}
impl From<Thief> for Rune {
    fn from(x: Thief) -> Rune { Rune::Thief(x) }
}
impl From<Trapper> for Rune {
    fn from(x: Trapper) -> Rune { Rune::Trapper(x) }
}
impl From<Traveler> for Rune {
    fn from(x: Traveler) -> Rune { Rune::Traveler(x) }
}
impl From<Trooper> for Rune {
    fn from(x: Trooper) -> Rune { Rune::Trooper(x) }
}
impl From<Undead> for Rune {
    fn from(x: Undead) -> Rune { Rune::Undead(x) }
}
impl From<Warrior> for Rune {
    fn from(x: Warrior) -> Rune { Rune::Warrior(x) }
}
impl From<Water> for Rune {
    fn from(x: Water) -> Rune { Rune::Water(x) }
}
impl From<Weaver> for Rune {
    fn from(x: Weaver) -> Rune { Rune::Weaver(x) }
}
impl From<Wurm> for Rune {
    fn from(x: Wurm) -> Rune { Rune::Wurm(x) }
}

// END GENERATED CODE
