use crate::character::{Vary, CombatSecond};
use crate::effect::Effect;
use crate::stats::{Stats, Modifiers};

// BEGIN GENERATED CODE
// Generated by gen_gear_tables.py for GW2 build 142239 at 2023-03-12T18:38:03

/// No Utility
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct NoUtility;
#[allow(unused_variables)]
impl Effect for NoUtility {
}
impl Vary for NoUtility {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl NoUtility {
    pub fn display_name(&self) -> &'static str {
        "No Utility"
    }
}

/// Bountiful Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BountifulMaintenanceOil;
#[allow(unused_variables)]
impl Effect for BountifulMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain 0.6% increased healing to other allies for every 100 healing power
        // unknown: gain 0.8% increased healing to other allies for every 100 concentration
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for BountifulMaintenanceOil {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl BountifulMaintenanceOil {
    pub fn display_name(&self) -> &'static str {
        "Bountiful Maintenance Oil"
    }
}

/// Bountiful Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BountifulSharpeningStone;
#[allow(unused_variables)]
impl Effect for BountifulSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.healing_power * 0.06;
        s.power += s.concentration * 0.08;
    }
}
impl Vary for BountifulSharpeningStone {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl BountifulSharpeningStone {
    pub fn display_name(&self) -> &'static str {
        "Bountiful Sharpening Stone"
    }
}

/// Bountiful Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BountifulTuningCrystal;
#[allow(unused_variables)]
impl Effect for BountifulTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.healing_power * 0.06;
        s.condition_damage += s.concentration * 0.08;
    }
}
impl Vary for BountifulTuningCrystal {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl BountifulTuningCrystal {
    pub fn display_name(&self) -> &'static str {
        "Bountiful Tuning Crystal"
    }
}

/// Corsair Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CorsairMaintenanceOil;
#[allow(unused_variables)]
impl Effect for CorsairMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.toughness * 0.03;
        s.expertise += s.toughness * 0.03;
    }
}
impl Vary for CorsairMaintenanceOil {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl CorsairMaintenanceOil {
    pub fn display_name(&self) -> &'static str {
        "Corsair Maintenance Oil"
    }
}

/// Corsair Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CorsairSharpeningStone;
#[allow(unused_variables)]
impl Effect for CorsairSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.toughness * 0.03;
        s.expertise += s.toughness * 0.03;
    }
}
impl Vary for CorsairSharpeningStone {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl CorsairSharpeningStone {
    pub fn display_name(&self) -> &'static str {
        "Corsair Sharpening Stone"
    }
}

/// Corsair Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CorsairTuningCrystal;
#[allow(unused_variables)]
impl Effect for CorsairTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.toughness * 0.03;
        s.expertise += s.toughness * 0.03;
    }
}
impl Vary for CorsairTuningCrystal {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl CorsairTuningCrystal {
    pub fn display_name(&self) -> &'static str {
        "Corsair Tuning Crystal"
    }
}

/// Dragon Crystal Potion
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DragonCrystalPotion;
#[allow(unused_variables)]
impl Effect for DragonCrystalPotion {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% increased damage to branded foes in thunderhead peaks
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for DragonCrystalPotion {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl DragonCrystalPotion {
    pub fn display_name(&self) -> &'static str {
        "Dragon Crystal Potion"
    }
}

/// Enhanced Lucent Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct EnhancedLucentOil;
#[allow(unused_variables)]
impl Effect for EnhancedLucentOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.condition_damage * 0.06;
        s.concentration += s.precision * 0.03;
    }
}
impl Vary for EnhancedLucentOil {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl EnhancedLucentOil {
    pub fn display_name(&self) -> &'static str {
        "Enhanced Lucent Oil"
    }
}

/// Extended Potion of Dredge Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfDredgeSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfDredgeSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. dredge
        // unknown: -10% damage from dredge
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for ExtendedPotionOfDredgeSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ExtendedPotionOfDredgeSlaying {
    pub fn display_name(&self) -> &'static str {
        "Extended Potion of Dredge Slaying"
    }
}

/// Extended Potion of Flame Legion Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfFlameLegionSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfFlameLegionSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. flame legion
        // unknown: -10% damage from flame legion
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for ExtendedPotionOfFlameLegionSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ExtendedPotionOfFlameLegionSlaying {
    pub fn display_name(&self) -> &'static str {
        "Extended Potion of Flame Legion Slaying"
    }
}

/// Extended Potion of Ghost Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfGhostSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfGhostSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. ghosts
        // unknown: -10% damage from ghosts
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for ExtendedPotionOfGhostSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ExtendedPotionOfGhostSlaying {
    pub fn display_name(&self) -> &'static str {
        "Extended Potion of Ghost Slaying"
    }
}

/// Extended Potion of Inquest Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfInquestSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfInquestSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. inquest
        // unknown: -10% damage from inquest
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for ExtendedPotionOfInquestSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ExtendedPotionOfInquestSlaying {
    pub fn display_name(&self) -> &'static str {
        "Extended Potion of Inquest Slaying"
    }
}

/// Extended Potion of Nightmare Court Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfNightmareCourtSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfNightmareCourtSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. nightmare court
        // unknown: -10% damage from nightmare court
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for ExtendedPotionOfNightmareCourtSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ExtendedPotionOfNightmareCourtSlaying {
    pub fn display_name(&self) -> &'static str {
        "Extended Potion of Nightmare Court Slaying"
    }
}

/// Extended Potion of Outlaw Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfOutlawSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfOutlawSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. outlaws
        // unknown: -10% damage from outlaws
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for ExtendedPotionOfOutlawSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ExtendedPotionOfOutlawSlaying {
    pub fn display_name(&self) -> &'static str {
        "Extended Potion of Outlaw Slaying"
    }
}

/// Extended Potion of Sons of Svanir Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfSonsOfSvanirSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfSonsOfSvanirSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. sons of svanir
        // unknown: -10% damage from sons of svanir
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for ExtendedPotionOfSonsOfSvanirSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ExtendedPotionOfSonsOfSvanirSlaying {
    pub fn display_name(&self) -> &'static str {
        "Extended Potion of Sons of Svanir Slaying"
    }
}

/// Extended Potion of Undead Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfUndeadSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfUndeadSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. undead
        // unknown: -10% damage from undead
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for ExtendedPotionOfUndeadSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ExtendedPotionOfUndeadSlaying {
    pub fn display_name(&self) -> &'static str {
        "Extended Potion of Undead Slaying"
    }
}

/// Flask of Pumpkin Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FlaskOfPumpkinOil;
#[allow(unused_variables)]
impl Effect for FlaskOfPumpkinOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: reviving an ally grants pumpkin prowess to both you and your revived ally
        // unknown: pumpkin prowess increases power, toughness, and vitality
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
        // unimplemented (30x): ('unimplemented', 'magic_find')
    }
}
impl Vary for FlaskOfPumpkinOil {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FlaskOfPumpkinOil {
    pub fn display_name(&self) -> &'static str {
        "Flask of Pumpkin Oil"
    }
}

/// Furious Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FuriousMaintenanceOil;
#[allow(unused_variables)]
impl Effect for FuriousMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.precision * 0.03;
        s.healing_power += s.precision * 0.03;
    }
}
impl Vary for FuriousMaintenanceOil {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FuriousMaintenanceOil {
    pub fn display_name(&self) -> &'static str {
        "Furious Maintenance Oil"
    }
}

/// Furious Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FuriousSharpeningStone;
#[allow(unused_variables)]
impl Effect for FuriousSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.precision * 0.03;
        s.ferocity += s.precision * 0.03;
    }
}
impl Vary for FuriousSharpeningStone {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FuriousSharpeningStone {
    pub fn display_name(&self) -> &'static str {
        "Furious Sharpening Stone"
    }
}

/// Furious Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FuriousTuningCrystal;
#[allow(unused_variables)]
impl Effect for FuriousTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.precision * 0.03;
        s.expertise += s.precision * 0.03;
    }
}
impl Vary for FuriousTuningCrystal {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FuriousTuningCrystal {
    pub fn display_name(&self) -> &'static str {
        "Furious Tuning Crystal"
    }
}

/// Holographic Super Apple
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HolographicSuperApple;
#[allow(unused_variables)]
impl Effect for HolographicSuperApple {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.concentration * 0.08;
        s.concentration += s.precision * 0.03;
    }
}
impl Vary for HolographicSuperApple {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl HolographicSuperApple {
    pub fn display_name(&self) -> &'static str {
        "Holographic Super Apple"
    }
}

/// Holographic Super Cheese
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HolographicSuperCheese;
#[allow(unused_variables)]
impl Effect for HolographicSuperCheese {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.concentration * 0.08;
        s.concentration += s.precision * 0.03;
    }
}
impl Vary for HolographicSuperCheese {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl HolographicSuperCheese {
    pub fn display_name(&self) -> &'static str {
        "Holographic Super Cheese"
    }
}

/// Holographic Super Drumstick
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HolographicSuperDrumstick;
#[allow(unused_variables)]
impl Effect for HolographicSuperDrumstick {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += s.concentration * 0.08;
        s.concentration += s.precision * 0.03;
    }
}
impl Vary for HolographicSuperDrumstick {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl HolographicSuperDrumstick {
    pub fn display_name(&self) -> &'static str {
        "Holographic Super Drumstick"
    }
}

/// Hylek Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HylekMaintenanceOil;
#[allow(unused_variables)]
impl Effect for HylekMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.precision * 0.03;
        s.concentration += s.healing_power * 0.06;
    }
}
impl Vary for HylekMaintenanceOil {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl HylekMaintenanceOil {
    pub fn display_name(&self) -> &'static str {
        "Hylek Maintenance Oil"
    }
}

/// Krait Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct KraitTuningCrystal;
#[allow(unused_variables)]
impl Effect for KraitTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.precision * 0.03;
        s.condition_damage += s.expertise * 0.08;
    }
}
impl Vary for KraitTuningCrystal {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl KraitTuningCrystal {
    pub fn display_name(&self) -> &'static str {
        "Krait Tuning Crystal"
    }
}

/// Lump of Crystallized Nougat
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct LumpOfCrystallizedNougat;
#[allow(unused_variables)]
impl Effect for LumpOfCrystallizedNougat {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: reviving an ally grants ghoul's grasp to both you and your revived ally
        // unknown: ghoul's grasp increases condition damage, precision, and toughness
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
        // unimplemented (30x): ('unimplemented', 'magic_find')
    }
}
impl Vary for LumpOfCrystallizedNougat {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl LumpOfCrystallizedNougat {
    pub fn display_name(&self) -> &'static str {
        "Lump of Crystallized Nougat"
    }
}

/// Magnanimous Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MagnanimousMaintenanceOil;
#[allow(unused_variables)]
impl Effect for MagnanimousMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.vitality * 0.03;
        s.concentration += s.toughness * 0.03;
    }
}
impl Vary for MagnanimousMaintenanceOil {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MagnanimousMaintenanceOil {
    pub fn display_name(&self) -> &'static str {
        "Magnanimous Maintenance Oil"
    }
}

/// Magnanimous Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MagnanimousSharpeningStone;
#[allow(unused_variables)]
impl Effect for MagnanimousSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.vitality * 0.03;
        s.power += s.toughness * 0.03;
    }
}
impl Vary for MagnanimousSharpeningStone {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MagnanimousSharpeningStone {
    pub fn display_name(&self) -> &'static str {
        "Magnanimous Sharpening Stone"
    }
}

/// Magnanimous Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MagnanimousTuningCrystal;
#[allow(unused_variables)]
impl Effect for MagnanimousTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.vitality * 0.03;
        s.condition_damage += s.toughness * 0.03;
    }
}
impl Vary for MagnanimousTuningCrystal {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MagnanimousTuningCrystal {
    pub fn display_name(&self) -> &'static str {
        "Magnanimous Tuning Crystal"
    }
}

/// Master Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MasterMaintenanceOil;
#[allow(unused_variables)]
impl Effect for MasterMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.precision * 0.03;
        s.concentration += s.healing_power * 0.06;
    }
}
impl Vary for MasterMaintenanceOil {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MasterMaintenanceOil {
    pub fn display_name(&self) -> &'static str {
        "Master Maintenance Oil"
    }
}

/// Master Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MasterTuningCrystal;
#[allow(unused_variables)]
impl Effect for MasterTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.precision * 0.03;
        s.condition_damage += s.expertise * 0.08;
    }
}
impl Vary for MasterTuningCrystal {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MasterTuningCrystal {
    pub fn display_name(&self) -> &'static str {
        "Master Tuning Crystal"
    }
}

/// Ogre Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OgreSharpeningStone;
#[allow(unused_variables)]
impl Effect for OgreSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.precision * 0.03;
        s.power += s.ferocity * 0.06;
    }
}
impl Vary for OgreSharpeningStone {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OgreSharpeningStone {
    pub fn display_name(&self) -> &'static str {
        "Ogre Sharpening Stone"
    }
}

/// Peppermint Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PeppermintOil;
#[allow(unused_variables)]
impl Effect for PeppermintOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
        // unimplemented (10x): ('unimplemented', 'karma')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.precision * 0.03;
        s.concentration += s.healing_power * 0.06;
    }
}
impl Vary for PeppermintOil {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PeppermintOil {
    pub fn display_name(&self) -> &'static str {
        "Peppermint Oil"
    }
}

/// Potent Lucent Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PotentLucentOil;
#[allow(unused_variables)]
impl Effect for PotentLucentOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.power * 0.03;
        s.concentration += s.precision * 0.03;
    }
}
impl Vary for PotentLucentOil {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PotentLucentOil {
    pub fn display_name(&self) -> &'static str {
        "Potent Lucent Oil"
    }
}

/// Potent Master Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PotentMasterMaintenanceOil;
#[allow(unused_variables)]
impl Effect for PotentMasterMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.precision * 0.03;
        s.concentration += s.healing_power * 0.06;
    }
}
impl Vary for PotentMasterMaintenanceOil {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PotentMasterMaintenanceOil {
    pub fn display_name(&self) -> &'static str {
        "Potent Master Maintenance Oil"
    }
}

/// Potent Master Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PotentMasterTuningCrystal;
#[allow(unused_variables)]
impl Effect for PotentMasterTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.precision * 0.03;
        s.condition_damage += s.expertise * 0.08;
    }
}
impl Vary for PotentMasterTuningCrystal {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PotentMasterTuningCrystal {
    pub fn display_name(&self) -> &'static str {
        "Potent Master Tuning Crystal"
    }
}

/// Potent Superior Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PotentSuperiorSharpeningStone;
#[allow(unused_variables)]
impl Effect for PotentSuperiorSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.precision * 0.03;
        s.power += s.ferocity * 0.06;
    }
}
impl Vary for PotentSuperiorSharpeningStone {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PotentSuperiorSharpeningStone {
    pub fn display_name(&self) -> &'static str {
        "Potent Superior Sharpening Stone"
    }
}

/// Potion Of Karka Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PotionOfKarkaSlaying;
#[allow(unused_variables)]
impl Effect for PotionOfKarkaSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +8% damage vs. karka
        // unknown: -6% damage from karka
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PotionOfKarkaSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PotionOfKarkaSlaying {
    pub fn display_name(&self) -> &'static str {
        "Potion Of Karka Slaying"
    }
}

/// Potion Of Karka Toughness
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PotionOfKarkaToughness;
#[allow(unused_variables)]
impl Effect for PotionOfKarkaToughness {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 150.0;
    }
}
impl Vary for PotionOfKarkaToughness {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PotionOfKarkaToughness {
    pub fn display_name(&self) -> &'static str {
        "Potion Of Karka Toughness"
    }
}

/// Powerful Potion of Branded Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfBrandedSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfBrandedSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. branded
        // unknown: -10% damage from branded
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfBrandedSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfBrandedSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Branded Slaying"
    }
}

/// Powerful Potion of Centaur Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfCentaurSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfCentaurSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. centaur
        // unknown: -10% damage from centaur
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfCentaurSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfCentaurSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Centaur Slaying"
    }
}

/// Powerful Potion of Demon Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfDemonSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfDemonSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. demons
        // unknown: -10% damage from demons
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfDemonSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfDemonSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Demon Slaying"
    }
}

/// Powerful Potion of Destroyer Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfDestroyerSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfDestroyerSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. destroyers
        // unknown: -10% damage from destroyers
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfDestroyerSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfDestroyerSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Destroyer Slaying"
    }
}

/// Powerful Potion of Dredge Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfDredgeSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfDredgeSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. dredge
        // unknown: -10% damage from dredge
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfDredgeSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfDredgeSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Dredge Slaying"
    }
}

/// Powerful Potion of Elemental Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfElementalSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfElementalSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. elementals
        // unknown: -10% damage from elementals
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfElementalSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfElementalSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Elemental Slaying"
    }
}

/// Powerful Potion of Flame Legion Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfFlameLegionSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfFlameLegionSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. flame legion
        // unknown: -10% damage from flame legion
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfFlameLegionSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfFlameLegionSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Flame Legion Slaying"
    }
}

/// Powerful Potion of Grawl Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfGrawlSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfGrawlSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. grawl
        // unknown: -10% damage from grawl
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfGrawlSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfGrawlSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Grawl Slaying"
    }
}

/// Powerful Potion of Halloween Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfHalloweenSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfHalloweenSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. halloween creatures
        // unknown: -10% damage from halloween creatures
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfHalloweenSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfHalloweenSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Halloween Slaying"
    }
}

/// Powerful Potion of Ice Brood Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfIceBroodSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfIceBroodSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. ice brood
        // unknown: -10% damage from ice brood
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfIceBroodSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfIceBroodSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Ice Brood Slaying"
    }
}

/// Powerful Potion of Inquest Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfInquestSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfInquestSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. inquest
        // unknown: -10% damage from inquest
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfInquestSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfInquestSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Inquest Slaying"
    }
}

/// Powerful Potion of Krait Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfKraitSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfKraitSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. krait
        // unknown: -10% damage from krait
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfKraitSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfKraitSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Krait Slaying"
    }
}

/// Powerful Potion of Mordrem Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfMordremSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfMordremSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. mordrem
        // unknown: -10% damage from mordrem
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfMordremSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfMordremSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Mordrem Slaying"
    }
}

/// Powerful Potion of Nightmare Court Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfNightmareCourtSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfNightmareCourtSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. nightmare court
        // unknown: -10% damage from nightmare court
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfNightmareCourtSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfNightmareCourtSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Nightmare Court Slaying"
    }
}

/// Powerful Potion of Ogre Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfOgreSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfOgreSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. ogres
        // unknown: -10% damage from ogres
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfOgreSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfOgreSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Ogre Slaying"
    }
}

/// Powerful Potion of Outlaw Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfOutlawSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfOutlawSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. outlaws
        // unknown: -10% damage from outlaws
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfOutlawSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfOutlawSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Outlaw Slaying"
    }
}

/// Powerful Potion of Slaying Scarlet's Armies
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfSlayingScarletsArmies;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfSlayingScarletsArmies {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. toxic alliance, watchwork, aetherblade, and molten alliance
        // unknown: -10% damage from toxic alliance, watchwork, aetherblade, and molten alliance
        // unimplemented (15x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfSlayingScarletsArmies {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfSlayingScarletsArmies {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Slaying Scarlet's Armies"
    }
}

/// Powerful Potion of Sons of Svanir Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfSonsOfSvanirSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfSonsOfSvanirSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. sons of svanir
        // unknown: -10% damage from sons of svanir
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfSonsOfSvanirSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfSonsOfSvanirSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Sons of Svanir Slaying"
    }
}

/// Powerful Potion of Undead Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfUndeadSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfUndeadSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% damage vs. undead
        // unknown: -10% damage from undead
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PowerfulPotionOfUndeadSlaying {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PowerfulPotionOfUndeadSlaying {
    pub fn display_name(&self) -> &'static str {
        "Powerful Potion of Undead Slaying"
    }
}

/// Sharpening Skull
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SharpeningSkull;
#[allow(unused_variables)]
impl Effect for SharpeningSkull {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: reviving an ally grants feline fury to both you and your revived ally
        // unknown: feline fury increases all attributes by a small amount
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
        // unimplemented (30x): ('unimplemented', 'magic_find')
    }
}
impl Vary for SharpeningSkull {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SharpeningSkull {
    pub fn display_name(&self) -> &'static str {
        "Sharpening Skull"
    }
}

/// Superior Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SuperiorSharpeningStone;
#[allow(unused_variables)]
impl Effect for SuperiorSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.precision * 0.03;
        s.power += s.ferocity * 0.06;
    }
}
impl Vary for SuperiorSharpeningStone {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SuperiorSharpeningStone {
    pub fn display_name(&self) -> &'static str {
        "Superior Sharpening Stone"
    }
}

/// Thesis on Masterful Accuracy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ThesisOnMasterfulAccuracy;
#[allow(unused_variables)]
impl Effect for ThesisOnMasterfulAccuracy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain 200 precision when health above 90%
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for ThesisOnMasterfulAccuracy {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ThesisOnMasterfulAccuracy {
    pub fn display_name(&self) -> &'static str {
        "Thesis on Masterful Accuracy"
    }
}

/// Thesis on Masterful Malice
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ThesisOnMasterfulMalice;
#[allow(unused_variables)]
impl Effect for ThesisOnMasterfulMalice {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain 200 condition damage when health is above 90%
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for ThesisOnMasterfulMalice {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ThesisOnMasterfulMalice {
    pub fn display_name(&self) -> &'static str {
        "Thesis on Masterful Malice"
    }
}

/// Thesis on Masterful Strength
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ThesisOnMasterfulStrength;
#[allow(unused_variables)]
impl Effect for ThesisOnMasterfulStrength {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain 200 power when health above 90%
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for ThesisOnMasterfulStrength {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ThesisOnMasterfulStrength {
    pub fn display_name(&self) -> &'static str {
        "Thesis on Masterful Strength"
    }
}

/// Tin of Fruitcake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TinOfFruitcake;
#[allow(unused_variables)]
impl Effect for TinOfFruitcake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
        // unimplemented (10x): ('unimplemented', 'karma')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.precision * 0.03;
        s.power += s.ferocity * 0.06;
    }
}
impl Vary for TinOfFruitcake {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl TinOfFruitcake {
    pub fn display_name(&self) -> &'static str {
        "Tin of Fruitcake"
    }
}

/// Toxic Focusing Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ToxicFocusingCrystal;
#[allow(unused_variables)]
impl Effect for ToxicFocusingCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.power * 0.03;
        s.condition_damage += s.precision * 0.03;
    }
}
impl Vary for ToxicFocusingCrystal {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ToxicFocusingCrystal {
    pub fn display_name(&self) -> &'static str {
        "Toxic Focusing Crystal"
    }
}

/// Toxic Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ToxicMaintenanceOil;
#[allow(unused_variables)]
impl Effect for ToxicMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.power * 0.03;
        s.concentration += s.condition_damage * 0.06;
    }
}
impl Vary for ToxicMaintenanceOil {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ToxicMaintenanceOil {
    pub fn display_name(&self) -> &'static str {
        "Toxic Maintenance Oil"
    }
}

/// Toxic Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ToxicSharpeningStone;
#[allow(unused_variables)]
impl Effect for ToxicSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.condition_damage * 0.06;
        s.power += s.expertise * 0.08;
    }
}
impl Vary for ToxicSharpeningStone {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ToxicSharpeningStone {
    pub fn display_name(&self) -> &'static str {
        "Toxic Sharpening Stone"
    }
}

/// Tuning Icicle
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TuningIcicle;
#[allow(unused_variables)]
impl Effect for TuningIcicle {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
        // unimplemented (10x): ('unimplemented', 'karma')
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.precision * 0.03;
        s.condition_damage += s.expertise * 0.08;
    }
}
impl Vary for TuningIcicle {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl TuningIcicle {
    pub fn display_name(&self) -> &'static str {
        "Tuning Icicle"
    }
}

/// Writ of Masterful Accuracy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct WritOfMasterfulAccuracy;
#[allow(unused_variables)]
impl Effect for WritOfMasterfulAccuracy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain 200 precision when health above 90%
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for WritOfMasterfulAccuracy {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl WritOfMasterfulAccuracy {
    pub fn display_name(&self) -> &'static str {
        "Writ of Masterful Accuracy"
    }
}

/// Writ of Masterful Malice
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct WritOfMasterfulMalice;
#[allow(unused_variables)]
impl Effect for WritOfMasterfulMalice {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain 200 condition damage when health is above 90%
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for WritOfMasterfulMalice {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl WritOfMasterfulMalice {
    pub fn display_name(&self) -> &'static str {
        "Writ of Masterful Malice"
    }
}

/// Writ of Masterful Strength
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct WritOfMasterfulStrength;
#[allow(unused_variables)]
impl Effect for WritOfMasterfulStrength {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain 200 power when health above 90%
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for WritOfMasterfulStrength {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl WritOfMasterfulStrength {
    pub fn display_name(&self) -> &'static str {
        "Writ of Masterful Strength"
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
pub enum Utility {
    NoUtility(NoUtility),
    BountifulMaintenanceOil(BountifulMaintenanceOil),
    BountifulSharpeningStone(BountifulSharpeningStone),
    BountifulTuningCrystal(BountifulTuningCrystal),
    CorsairMaintenanceOil(CorsairMaintenanceOil),
    CorsairSharpeningStone(CorsairSharpeningStone),
    CorsairTuningCrystal(CorsairTuningCrystal),
    DragonCrystalPotion(DragonCrystalPotion),
    EnhancedLucentOil(EnhancedLucentOil),
    ExtendedPotionOfDredgeSlaying(ExtendedPotionOfDredgeSlaying),
    ExtendedPotionOfFlameLegionSlaying(ExtendedPotionOfFlameLegionSlaying),
    ExtendedPotionOfGhostSlaying(ExtendedPotionOfGhostSlaying),
    ExtendedPotionOfInquestSlaying(ExtendedPotionOfInquestSlaying),
    ExtendedPotionOfNightmareCourtSlaying(ExtendedPotionOfNightmareCourtSlaying),
    ExtendedPotionOfOutlawSlaying(ExtendedPotionOfOutlawSlaying),
    ExtendedPotionOfSonsOfSvanirSlaying(ExtendedPotionOfSonsOfSvanirSlaying),
    ExtendedPotionOfUndeadSlaying(ExtendedPotionOfUndeadSlaying),
    FlaskOfPumpkinOil(FlaskOfPumpkinOil),
    FuriousMaintenanceOil(FuriousMaintenanceOil),
    FuriousSharpeningStone(FuriousSharpeningStone),
    FuriousTuningCrystal(FuriousTuningCrystal),
    HolographicSuperApple(HolographicSuperApple),
    HolographicSuperCheese(HolographicSuperCheese),
    HolographicSuperDrumstick(HolographicSuperDrumstick),
    HylekMaintenanceOil(HylekMaintenanceOil),
    KraitTuningCrystal(KraitTuningCrystal),
    LumpOfCrystallizedNougat(LumpOfCrystallizedNougat),
    MagnanimousMaintenanceOil(MagnanimousMaintenanceOil),
    MagnanimousSharpeningStone(MagnanimousSharpeningStone),
    MagnanimousTuningCrystal(MagnanimousTuningCrystal),
    MasterMaintenanceOil(MasterMaintenanceOil),
    MasterTuningCrystal(MasterTuningCrystal),
    OgreSharpeningStone(OgreSharpeningStone),
    PeppermintOil(PeppermintOil),
    PotentLucentOil(PotentLucentOil),
    PotentMasterMaintenanceOil(PotentMasterMaintenanceOil),
    PotentMasterTuningCrystal(PotentMasterTuningCrystal),
    PotentSuperiorSharpeningStone(PotentSuperiorSharpeningStone),
    PotionOfKarkaSlaying(PotionOfKarkaSlaying),
    PotionOfKarkaToughness(PotionOfKarkaToughness),
    PowerfulPotionOfBrandedSlaying(PowerfulPotionOfBrandedSlaying),
    PowerfulPotionOfCentaurSlaying(PowerfulPotionOfCentaurSlaying),
    PowerfulPotionOfDemonSlaying(PowerfulPotionOfDemonSlaying),
    PowerfulPotionOfDestroyerSlaying(PowerfulPotionOfDestroyerSlaying),
    PowerfulPotionOfDredgeSlaying(PowerfulPotionOfDredgeSlaying),
    PowerfulPotionOfElementalSlaying(PowerfulPotionOfElementalSlaying),
    PowerfulPotionOfFlameLegionSlaying(PowerfulPotionOfFlameLegionSlaying),
    PowerfulPotionOfGrawlSlaying(PowerfulPotionOfGrawlSlaying),
    PowerfulPotionOfHalloweenSlaying(PowerfulPotionOfHalloweenSlaying),
    PowerfulPotionOfIceBroodSlaying(PowerfulPotionOfIceBroodSlaying),
    PowerfulPotionOfInquestSlaying(PowerfulPotionOfInquestSlaying),
    PowerfulPotionOfKraitSlaying(PowerfulPotionOfKraitSlaying),
    PowerfulPotionOfMordremSlaying(PowerfulPotionOfMordremSlaying),
    PowerfulPotionOfNightmareCourtSlaying(PowerfulPotionOfNightmareCourtSlaying),
    PowerfulPotionOfOgreSlaying(PowerfulPotionOfOgreSlaying),
    PowerfulPotionOfOutlawSlaying(PowerfulPotionOfOutlawSlaying),
    PowerfulPotionOfSlayingScarletsArmies(PowerfulPotionOfSlayingScarletsArmies),
    PowerfulPotionOfSonsOfSvanirSlaying(PowerfulPotionOfSonsOfSvanirSlaying),
    PowerfulPotionOfUndeadSlaying(PowerfulPotionOfUndeadSlaying),
    SharpeningSkull(SharpeningSkull),
    SuperiorSharpeningStone(SuperiorSharpeningStone),
    ThesisOnMasterfulAccuracy(ThesisOnMasterfulAccuracy),
    ThesisOnMasterfulMalice(ThesisOnMasterfulMalice),
    ThesisOnMasterfulStrength(ThesisOnMasterfulStrength),
    TinOfFruitcake(TinOfFruitcake),
    ToxicFocusingCrystal(ToxicFocusingCrystal),
    ToxicMaintenanceOil(ToxicMaintenanceOil),
    ToxicSharpeningStone(ToxicSharpeningStone),
    TuningIcicle(TuningIcicle),
    WritOfMasterfulAccuracy(WritOfMasterfulAccuracy),
    WritOfMasterfulMalice(WritOfMasterfulMalice),
    WritOfMasterfulStrength(WritOfMasterfulStrength),
}
impl Default for Utility {
    fn default() -> Utility { Utility::NoUtility(NoUtility) }
}
impl Utility {
    pub const COUNT: usize = 72;
    pub fn index(self) -> usize {
        match self {
            Utility::NoUtility(NoUtility) => 0,
            Utility::BountifulMaintenanceOil(BountifulMaintenanceOil) => 1,
            Utility::BountifulSharpeningStone(BountifulSharpeningStone) => 2,
            Utility::BountifulTuningCrystal(BountifulTuningCrystal) => 3,
            Utility::CorsairMaintenanceOil(CorsairMaintenanceOil) => 4,
            Utility::CorsairSharpeningStone(CorsairSharpeningStone) => 5,
            Utility::CorsairTuningCrystal(CorsairTuningCrystal) => 6,
            Utility::DragonCrystalPotion(DragonCrystalPotion) => 7,
            Utility::EnhancedLucentOil(EnhancedLucentOil) => 8,
            Utility::ExtendedPotionOfDredgeSlaying(ExtendedPotionOfDredgeSlaying) => 9,
            Utility::ExtendedPotionOfFlameLegionSlaying(ExtendedPotionOfFlameLegionSlaying) => 10,
            Utility::ExtendedPotionOfGhostSlaying(ExtendedPotionOfGhostSlaying) => 11,
            Utility::ExtendedPotionOfInquestSlaying(ExtendedPotionOfInquestSlaying) => 12,
            Utility::ExtendedPotionOfNightmareCourtSlaying(ExtendedPotionOfNightmareCourtSlaying) => 13,
            Utility::ExtendedPotionOfOutlawSlaying(ExtendedPotionOfOutlawSlaying) => 14,
            Utility::ExtendedPotionOfSonsOfSvanirSlaying(ExtendedPotionOfSonsOfSvanirSlaying) => 15,
            Utility::ExtendedPotionOfUndeadSlaying(ExtendedPotionOfUndeadSlaying) => 16,
            Utility::FlaskOfPumpkinOil(FlaskOfPumpkinOil) => 17,
            Utility::FuriousMaintenanceOil(FuriousMaintenanceOil) => 18,
            Utility::FuriousSharpeningStone(FuriousSharpeningStone) => 19,
            Utility::FuriousTuningCrystal(FuriousTuningCrystal) => 20,
            Utility::HolographicSuperApple(HolographicSuperApple) => 21,
            Utility::HolographicSuperCheese(HolographicSuperCheese) => 22,
            Utility::HolographicSuperDrumstick(HolographicSuperDrumstick) => 23,
            Utility::HylekMaintenanceOil(HylekMaintenanceOil) => 24,
            Utility::KraitTuningCrystal(KraitTuningCrystal) => 25,
            Utility::LumpOfCrystallizedNougat(LumpOfCrystallizedNougat) => 26,
            Utility::MagnanimousMaintenanceOil(MagnanimousMaintenanceOil) => 27,
            Utility::MagnanimousSharpeningStone(MagnanimousSharpeningStone) => 28,
            Utility::MagnanimousTuningCrystal(MagnanimousTuningCrystal) => 29,
            Utility::MasterMaintenanceOil(MasterMaintenanceOil) => 30,
            Utility::MasterTuningCrystal(MasterTuningCrystal) => 31,
            Utility::OgreSharpeningStone(OgreSharpeningStone) => 32,
            Utility::PeppermintOil(PeppermintOil) => 33,
            Utility::PotentLucentOil(PotentLucentOil) => 34,
            Utility::PotentMasterMaintenanceOil(PotentMasterMaintenanceOil) => 35,
            Utility::PotentMasterTuningCrystal(PotentMasterTuningCrystal) => 36,
            Utility::PotentSuperiorSharpeningStone(PotentSuperiorSharpeningStone) => 37,
            Utility::PotionOfKarkaSlaying(PotionOfKarkaSlaying) => 38,
            Utility::PotionOfKarkaToughness(PotionOfKarkaToughness) => 39,
            Utility::PowerfulPotionOfBrandedSlaying(PowerfulPotionOfBrandedSlaying) => 40,
            Utility::PowerfulPotionOfCentaurSlaying(PowerfulPotionOfCentaurSlaying) => 41,
            Utility::PowerfulPotionOfDemonSlaying(PowerfulPotionOfDemonSlaying) => 42,
            Utility::PowerfulPotionOfDestroyerSlaying(PowerfulPotionOfDestroyerSlaying) => 43,
            Utility::PowerfulPotionOfDredgeSlaying(PowerfulPotionOfDredgeSlaying) => 44,
            Utility::PowerfulPotionOfElementalSlaying(PowerfulPotionOfElementalSlaying) => 45,
            Utility::PowerfulPotionOfFlameLegionSlaying(PowerfulPotionOfFlameLegionSlaying) => 46,
            Utility::PowerfulPotionOfGrawlSlaying(PowerfulPotionOfGrawlSlaying) => 47,
            Utility::PowerfulPotionOfHalloweenSlaying(PowerfulPotionOfHalloweenSlaying) => 48,
            Utility::PowerfulPotionOfIceBroodSlaying(PowerfulPotionOfIceBroodSlaying) => 49,
            Utility::PowerfulPotionOfInquestSlaying(PowerfulPotionOfInquestSlaying) => 50,
            Utility::PowerfulPotionOfKraitSlaying(PowerfulPotionOfKraitSlaying) => 51,
            Utility::PowerfulPotionOfMordremSlaying(PowerfulPotionOfMordremSlaying) => 52,
            Utility::PowerfulPotionOfNightmareCourtSlaying(PowerfulPotionOfNightmareCourtSlaying) => 53,
            Utility::PowerfulPotionOfOgreSlaying(PowerfulPotionOfOgreSlaying) => 54,
            Utility::PowerfulPotionOfOutlawSlaying(PowerfulPotionOfOutlawSlaying) => 55,
            Utility::PowerfulPotionOfSlayingScarletsArmies(PowerfulPotionOfSlayingScarletsArmies) => 56,
            Utility::PowerfulPotionOfSonsOfSvanirSlaying(PowerfulPotionOfSonsOfSvanirSlaying) => 57,
            Utility::PowerfulPotionOfUndeadSlaying(PowerfulPotionOfUndeadSlaying) => 58,
            Utility::SharpeningSkull(SharpeningSkull) => 59,
            Utility::SuperiorSharpeningStone(SuperiorSharpeningStone) => 60,
            Utility::ThesisOnMasterfulAccuracy(ThesisOnMasterfulAccuracy) => 61,
            Utility::ThesisOnMasterfulMalice(ThesisOnMasterfulMalice) => 62,
            Utility::ThesisOnMasterfulStrength(ThesisOnMasterfulStrength) => 63,
            Utility::TinOfFruitcake(TinOfFruitcake) => 64,
            Utility::ToxicFocusingCrystal(ToxicFocusingCrystal) => 65,
            Utility::ToxicMaintenanceOil(ToxicMaintenanceOil) => 66,
            Utility::ToxicSharpeningStone(ToxicSharpeningStone) => 67,
            Utility::TuningIcicle(TuningIcicle) => 68,
            Utility::WritOfMasterfulAccuracy(WritOfMasterfulAccuracy) => 69,
            Utility::WritOfMasterfulMalice(WritOfMasterfulMalice) => 70,
            Utility::WritOfMasterfulStrength(WritOfMasterfulStrength) => 71,
        }
    }
    pub fn from_index(i: usize) -> Utility {
        match i {
            0 => Utility::NoUtility(NoUtility),
            1 => Utility::BountifulMaintenanceOil(BountifulMaintenanceOil),
            2 => Utility::BountifulSharpeningStone(BountifulSharpeningStone),
            3 => Utility::BountifulTuningCrystal(BountifulTuningCrystal),
            4 => Utility::CorsairMaintenanceOil(CorsairMaintenanceOil),
            5 => Utility::CorsairSharpeningStone(CorsairSharpeningStone),
            6 => Utility::CorsairTuningCrystal(CorsairTuningCrystal),
            7 => Utility::DragonCrystalPotion(DragonCrystalPotion),
            8 => Utility::EnhancedLucentOil(EnhancedLucentOil),
            9 => Utility::ExtendedPotionOfDredgeSlaying(ExtendedPotionOfDredgeSlaying),
            10 => Utility::ExtendedPotionOfFlameLegionSlaying(ExtendedPotionOfFlameLegionSlaying),
            11 => Utility::ExtendedPotionOfGhostSlaying(ExtendedPotionOfGhostSlaying),
            12 => Utility::ExtendedPotionOfInquestSlaying(ExtendedPotionOfInquestSlaying),
            13 => Utility::ExtendedPotionOfNightmareCourtSlaying(ExtendedPotionOfNightmareCourtSlaying),
            14 => Utility::ExtendedPotionOfOutlawSlaying(ExtendedPotionOfOutlawSlaying),
            15 => Utility::ExtendedPotionOfSonsOfSvanirSlaying(ExtendedPotionOfSonsOfSvanirSlaying),
            16 => Utility::ExtendedPotionOfUndeadSlaying(ExtendedPotionOfUndeadSlaying),
            17 => Utility::FlaskOfPumpkinOil(FlaskOfPumpkinOil),
            18 => Utility::FuriousMaintenanceOil(FuriousMaintenanceOil),
            19 => Utility::FuriousSharpeningStone(FuriousSharpeningStone),
            20 => Utility::FuriousTuningCrystal(FuriousTuningCrystal),
            21 => Utility::HolographicSuperApple(HolographicSuperApple),
            22 => Utility::HolographicSuperCheese(HolographicSuperCheese),
            23 => Utility::HolographicSuperDrumstick(HolographicSuperDrumstick),
            24 => Utility::HylekMaintenanceOil(HylekMaintenanceOil),
            25 => Utility::KraitTuningCrystal(KraitTuningCrystal),
            26 => Utility::LumpOfCrystallizedNougat(LumpOfCrystallizedNougat),
            27 => Utility::MagnanimousMaintenanceOil(MagnanimousMaintenanceOil),
            28 => Utility::MagnanimousSharpeningStone(MagnanimousSharpeningStone),
            29 => Utility::MagnanimousTuningCrystal(MagnanimousTuningCrystal),
            30 => Utility::MasterMaintenanceOil(MasterMaintenanceOil),
            31 => Utility::MasterTuningCrystal(MasterTuningCrystal),
            32 => Utility::OgreSharpeningStone(OgreSharpeningStone),
            33 => Utility::PeppermintOil(PeppermintOil),
            34 => Utility::PotentLucentOil(PotentLucentOil),
            35 => Utility::PotentMasterMaintenanceOil(PotentMasterMaintenanceOil),
            36 => Utility::PotentMasterTuningCrystal(PotentMasterTuningCrystal),
            37 => Utility::PotentSuperiorSharpeningStone(PotentSuperiorSharpeningStone),
            38 => Utility::PotionOfKarkaSlaying(PotionOfKarkaSlaying),
            39 => Utility::PotionOfKarkaToughness(PotionOfKarkaToughness),
            40 => Utility::PowerfulPotionOfBrandedSlaying(PowerfulPotionOfBrandedSlaying),
            41 => Utility::PowerfulPotionOfCentaurSlaying(PowerfulPotionOfCentaurSlaying),
            42 => Utility::PowerfulPotionOfDemonSlaying(PowerfulPotionOfDemonSlaying),
            43 => Utility::PowerfulPotionOfDestroyerSlaying(PowerfulPotionOfDestroyerSlaying),
            44 => Utility::PowerfulPotionOfDredgeSlaying(PowerfulPotionOfDredgeSlaying),
            45 => Utility::PowerfulPotionOfElementalSlaying(PowerfulPotionOfElementalSlaying),
            46 => Utility::PowerfulPotionOfFlameLegionSlaying(PowerfulPotionOfFlameLegionSlaying),
            47 => Utility::PowerfulPotionOfGrawlSlaying(PowerfulPotionOfGrawlSlaying),
            48 => Utility::PowerfulPotionOfHalloweenSlaying(PowerfulPotionOfHalloweenSlaying),
            49 => Utility::PowerfulPotionOfIceBroodSlaying(PowerfulPotionOfIceBroodSlaying),
            50 => Utility::PowerfulPotionOfInquestSlaying(PowerfulPotionOfInquestSlaying),
            51 => Utility::PowerfulPotionOfKraitSlaying(PowerfulPotionOfKraitSlaying),
            52 => Utility::PowerfulPotionOfMordremSlaying(PowerfulPotionOfMordremSlaying),
            53 => Utility::PowerfulPotionOfNightmareCourtSlaying(PowerfulPotionOfNightmareCourtSlaying),
            54 => Utility::PowerfulPotionOfOgreSlaying(PowerfulPotionOfOgreSlaying),
            55 => Utility::PowerfulPotionOfOutlawSlaying(PowerfulPotionOfOutlawSlaying),
            56 => Utility::PowerfulPotionOfSlayingScarletsArmies(PowerfulPotionOfSlayingScarletsArmies),
            57 => Utility::PowerfulPotionOfSonsOfSvanirSlaying(PowerfulPotionOfSonsOfSvanirSlaying),
            58 => Utility::PowerfulPotionOfUndeadSlaying(PowerfulPotionOfUndeadSlaying),
            59 => Utility::SharpeningSkull(SharpeningSkull),
            60 => Utility::SuperiorSharpeningStone(SuperiorSharpeningStone),
            61 => Utility::ThesisOnMasterfulAccuracy(ThesisOnMasterfulAccuracy),
            62 => Utility::ThesisOnMasterfulMalice(ThesisOnMasterfulMalice),
            63 => Utility::ThesisOnMasterfulStrength(ThesisOnMasterfulStrength),
            64 => Utility::TinOfFruitcake(TinOfFruitcake),
            65 => Utility::ToxicFocusingCrystal(ToxicFocusingCrystal),
            66 => Utility::ToxicMaintenanceOil(ToxicMaintenanceOil),
            67 => Utility::ToxicSharpeningStone(ToxicSharpeningStone),
            68 => Utility::TuningIcicle(TuningIcicle),
            69 => Utility::WritOfMasterfulAccuracy(WritOfMasterfulAccuracy),
            70 => Utility::WritOfMasterfulMalice(WritOfMasterfulMalice),
            71 => Utility::WritOfMasterfulStrength(WritOfMasterfulStrength),
            _ => panic!("index {} out of range for Utility", i),
        }
    }
    pub fn iter() -> impl Iterator<Item = Utility> {
        (0 .. Utility::COUNT).map(Utility::from_index)
    }
    pub fn display_name(self) -> &'static str {
        match self {
            Utility::NoUtility(x) => x.display_name(),
            Utility::BountifulMaintenanceOil(x) => x.display_name(),
            Utility::BountifulSharpeningStone(x) => x.display_name(),
            Utility::BountifulTuningCrystal(x) => x.display_name(),
            Utility::CorsairMaintenanceOil(x) => x.display_name(),
            Utility::CorsairSharpeningStone(x) => x.display_name(),
            Utility::CorsairTuningCrystal(x) => x.display_name(),
            Utility::DragonCrystalPotion(x) => x.display_name(),
            Utility::EnhancedLucentOil(x) => x.display_name(),
            Utility::ExtendedPotionOfDredgeSlaying(x) => x.display_name(),
            Utility::ExtendedPotionOfFlameLegionSlaying(x) => x.display_name(),
            Utility::ExtendedPotionOfGhostSlaying(x) => x.display_name(),
            Utility::ExtendedPotionOfInquestSlaying(x) => x.display_name(),
            Utility::ExtendedPotionOfNightmareCourtSlaying(x) => x.display_name(),
            Utility::ExtendedPotionOfOutlawSlaying(x) => x.display_name(),
            Utility::ExtendedPotionOfSonsOfSvanirSlaying(x) => x.display_name(),
            Utility::ExtendedPotionOfUndeadSlaying(x) => x.display_name(),
            Utility::FlaskOfPumpkinOil(x) => x.display_name(),
            Utility::FuriousMaintenanceOil(x) => x.display_name(),
            Utility::FuriousSharpeningStone(x) => x.display_name(),
            Utility::FuriousTuningCrystal(x) => x.display_name(),
            Utility::HolographicSuperApple(x) => x.display_name(),
            Utility::HolographicSuperCheese(x) => x.display_name(),
            Utility::HolographicSuperDrumstick(x) => x.display_name(),
            Utility::HylekMaintenanceOil(x) => x.display_name(),
            Utility::KraitTuningCrystal(x) => x.display_name(),
            Utility::LumpOfCrystallizedNougat(x) => x.display_name(),
            Utility::MagnanimousMaintenanceOil(x) => x.display_name(),
            Utility::MagnanimousSharpeningStone(x) => x.display_name(),
            Utility::MagnanimousTuningCrystal(x) => x.display_name(),
            Utility::MasterMaintenanceOil(x) => x.display_name(),
            Utility::MasterTuningCrystal(x) => x.display_name(),
            Utility::OgreSharpeningStone(x) => x.display_name(),
            Utility::PeppermintOil(x) => x.display_name(),
            Utility::PotentLucentOil(x) => x.display_name(),
            Utility::PotentMasterMaintenanceOil(x) => x.display_name(),
            Utility::PotentMasterTuningCrystal(x) => x.display_name(),
            Utility::PotentSuperiorSharpeningStone(x) => x.display_name(),
            Utility::PotionOfKarkaSlaying(x) => x.display_name(),
            Utility::PotionOfKarkaToughness(x) => x.display_name(),
            Utility::PowerfulPotionOfBrandedSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfCentaurSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfDemonSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfDestroyerSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfDredgeSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfElementalSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfFlameLegionSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfGrawlSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfHalloweenSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfIceBroodSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfInquestSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfKraitSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfMordremSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfNightmareCourtSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfOgreSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfOutlawSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfSlayingScarletsArmies(x) => x.display_name(),
            Utility::PowerfulPotionOfSonsOfSvanirSlaying(x) => x.display_name(),
            Utility::PowerfulPotionOfUndeadSlaying(x) => x.display_name(),
            Utility::SharpeningSkull(x) => x.display_name(),
            Utility::SuperiorSharpeningStone(x) => x.display_name(),
            Utility::ThesisOnMasterfulAccuracy(x) => x.display_name(),
            Utility::ThesisOnMasterfulMalice(x) => x.display_name(),
            Utility::ThesisOnMasterfulStrength(x) => x.display_name(),
            Utility::TinOfFruitcake(x) => x.display_name(),
            Utility::ToxicFocusingCrystal(x) => x.display_name(),
            Utility::ToxicMaintenanceOil(x) => x.display_name(),
            Utility::ToxicSharpeningStone(x) => x.display_name(),
            Utility::TuningIcicle(x) => x.display_name(),
            Utility::WritOfMasterfulAccuracy(x) => x.display_name(),
            Utility::WritOfMasterfulMalice(x) => x.display_name(),
            Utility::WritOfMasterfulStrength(x) => x.display_name(),
        }
    }
}
impl Effect for Utility {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Utility::NoUtility(x) => x.add_permanent(s, m),
            Utility::BountifulMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::BountifulSharpeningStone(x) => x.add_permanent(s, m),
            Utility::BountifulTuningCrystal(x) => x.add_permanent(s, m),
            Utility::CorsairMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::CorsairSharpeningStone(x) => x.add_permanent(s, m),
            Utility::CorsairTuningCrystal(x) => x.add_permanent(s, m),
            Utility::DragonCrystalPotion(x) => x.add_permanent(s, m),
            Utility::EnhancedLucentOil(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfDredgeSlaying(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfFlameLegionSlaying(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfGhostSlaying(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfInquestSlaying(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfNightmareCourtSlaying(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfOutlawSlaying(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfSonsOfSvanirSlaying(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfUndeadSlaying(x) => x.add_permanent(s, m),
            Utility::FlaskOfPumpkinOil(x) => x.add_permanent(s, m),
            Utility::FuriousMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::FuriousSharpeningStone(x) => x.add_permanent(s, m),
            Utility::FuriousTuningCrystal(x) => x.add_permanent(s, m),
            Utility::HolographicSuperApple(x) => x.add_permanent(s, m),
            Utility::HolographicSuperCheese(x) => x.add_permanent(s, m),
            Utility::HolographicSuperDrumstick(x) => x.add_permanent(s, m),
            Utility::HylekMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::KraitTuningCrystal(x) => x.add_permanent(s, m),
            Utility::LumpOfCrystallizedNougat(x) => x.add_permanent(s, m),
            Utility::MagnanimousMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::MagnanimousSharpeningStone(x) => x.add_permanent(s, m),
            Utility::MagnanimousTuningCrystal(x) => x.add_permanent(s, m),
            Utility::MasterMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::MasterTuningCrystal(x) => x.add_permanent(s, m),
            Utility::OgreSharpeningStone(x) => x.add_permanent(s, m),
            Utility::PeppermintOil(x) => x.add_permanent(s, m),
            Utility::PotentLucentOil(x) => x.add_permanent(s, m),
            Utility::PotentMasterMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::PotentMasterTuningCrystal(x) => x.add_permanent(s, m),
            Utility::PotentSuperiorSharpeningStone(x) => x.add_permanent(s, m),
            Utility::PotionOfKarkaSlaying(x) => x.add_permanent(s, m),
            Utility::PotionOfKarkaToughness(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfBrandedSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfCentaurSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfDemonSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfDestroyerSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfDredgeSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfElementalSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfFlameLegionSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfGrawlSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfHalloweenSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfIceBroodSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfInquestSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfKraitSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfMordremSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfNightmareCourtSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfOgreSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfOutlawSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfSlayingScarletsArmies(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfSonsOfSvanirSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfUndeadSlaying(x) => x.add_permanent(s, m),
            Utility::SharpeningSkull(x) => x.add_permanent(s, m),
            Utility::SuperiorSharpeningStone(x) => x.add_permanent(s, m),
            Utility::ThesisOnMasterfulAccuracy(x) => x.add_permanent(s, m),
            Utility::ThesisOnMasterfulMalice(x) => x.add_permanent(s, m),
            Utility::ThesisOnMasterfulStrength(x) => x.add_permanent(s, m),
            Utility::TinOfFruitcake(x) => x.add_permanent(s, m),
            Utility::ToxicFocusingCrystal(x) => x.add_permanent(s, m),
            Utility::ToxicMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::ToxicSharpeningStone(x) => x.add_permanent(s, m),
            Utility::TuningIcicle(x) => x.add_permanent(s, m),
            Utility::WritOfMasterfulAccuracy(x) => x.add_permanent(s, m),
            Utility::WritOfMasterfulMalice(x) => x.add_permanent(s, m),
            Utility::WritOfMasterfulStrength(x) => x.add_permanent(s, m),
        }
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Utility::NoUtility(x) => x.distribute(s, m),
            Utility::BountifulMaintenanceOil(x) => x.distribute(s, m),
            Utility::BountifulSharpeningStone(x) => x.distribute(s, m),
            Utility::BountifulTuningCrystal(x) => x.distribute(s, m),
            Utility::CorsairMaintenanceOil(x) => x.distribute(s, m),
            Utility::CorsairSharpeningStone(x) => x.distribute(s, m),
            Utility::CorsairTuningCrystal(x) => x.distribute(s, m),
            Utility::DragonCrystalPotion(x) => x.distribute(s, m),
            Utility::EnhancedLucentOil(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfDredgeSlaying(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfFlameLegionSlaying(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfGhostSlaying(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfInquestSlaying(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfNightmareCourtSlaying(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfOutlawSlaying(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfSonsOfSvanirSlaying(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfUndeadSlaying(x) => x.distribute(s, m),
            Utility::FlaskOfPumpkinOil(x) => x.distribute(s, m),
            Utility::FuriousMaintenanceOil(x) => x.distribute(s, m),
            Utility::FuriousSharpeningStone(x) => x.distribute(s, m),
            Utility::FuriousTuningCrystal(x) => x.distribute(s, m),
            Utility::HolographicSuperApple(x) => x.distribute(s, m),
            Utility::HolographicSuperCheese(x) => x.distribute(s, m),
            Utility::HolographicSuperDrumstick(x) => x.distribute(s, m),
            Utility::HylekMaintenanceOil(x) => x.distribute(s, m),
            Utility::KraitTuningCrystal(x) => x.distribute(s, m),
            Utility::LumpOfCrystallizedNougat(x) => x.distribute(s, m),
            Utility::MagnanimousMaintenanceOil(x) => x.distribute(s, m),
            Utility::MagnanimousSharpeningStone(x) => x.distribute(s, m),
            Utility::MagnanimousTuningCrystal(x) => x.distribute(s, m),
            Utility::MasterMaintenanceOil(x) => x.distribute(s, m),
            Utility::MasterTuningCrystal(x) => x.distribute(s, m),
            Utility::OgreSharpeningStone(x) => x.distribute(s, m),
            Utility::PeppermintOil(x) => x.distribute(s, m),
            Utility::PotentLucentOil(x) => x.distribute(s, m),
            Utility::PotentMasterMaintenanceOil(x) => x.distribute(s, m),
            Utility::PotentMasterTuningCrystal(x) => x.distribute(s, m),
            Utility::PotentSuperiorSharpeningStone(x) => x.distribute(s, m),
            Utility::PotionOfKarkaSlaying(x) => x.distribute(s, m),
            Utility::PotionOfKarkaToughness(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfBrandedSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfCentaurSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfDemonSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfDestroyerSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfDredgeSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfElementalSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfFlameLegionSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfGrawlSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfHalloweenSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfIceBroodSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfInquestSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfKraitSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfMordremSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfNightmareCourtSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfOgreSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfOutlawSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfSlayingScarletsArmies(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfSonsOfSvanirSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfUndeadSlaying(x) => x.distribute(s, m),
            Utility::SharpeningSkull(x) => x.distribute(s, m),
            Utility::SuperiorSharpeningStone(x) => x.distribute(s, m),
            Utility::ThesisOnMasterfulAccuracy(x) => x.distribute(s, m),
            Utility::ThesisOnMasterfulMalice(x) => x.distribute(s, m),
            Utility::ThesisOnMasterfulStrength(x) => x.distribute(s, m),
            Utility::TinOfFruitcake(x) => x.distribute(s, m),
            Utility::ToxicFocusingCrystal(x) => x.distribute(s, m),
            Utility::ToxicMaintenanceOil(x) => x.distribute(s, m),
            Utility::ToxicSharpeningStone(x) => x.distribute(s, m),
            Utility::TuningIcicle(x) => x.distribute(s, m),
            Utility::WritOfMasterfulAccuracy(x) => x.distribute(s, m),
            Utility::WritOfMasterfulMalice(x) => x.distribute(s, m),
            Utility::WritOfMasterfulStrength(x) => x.distribute(s, m),
        }
    }
    fn add_temporary(&self, s: &mut Stats, m: &mut Modifiers, c: &CombatSecond) {
        match *self {
            Utility::NoUtility(x) => x.add_temporary(s, m, c),
            Utility::BountifulMaintenanceOil(x) => x.add_temporary(s, m, c),
            Utility::BountifulSharpeningStone(x) => x.add_temporary(s, m, c),
            Utility::BountifulTuningCrystal(x) => x.add_temporary(s, m, c),
            Utility::CorsairMaintenanceOil(x) => x.add_temporary(s, m, c),
            Utility::CorsairSharpeningStone(x) => x.add_temporary(s, m, c),
            Utility::CorsairTuningCrystal(x) => x.add_temporary(s, m, c),
            Utility::DragonCrystalPotion(x) => x.add_temporary(s, m, c),
            Utility::EnhancedLucentOil(x) => x.add_temporary(s, m, c),
            Utility::ExtendedPotionOfDredgeSlaying(x) => x.add_temporary(s, m, c),
            Utility::ExtendedPotionOfFlameLegionSlaying(x) => x.add_temporary(s, m, c),
            Utility::ExtendedPotionOfGhostSlaying(x) => x.add_temporary(s, m, c),
            Utility::ExtendedPotionOfInquestSlaying(x) => x.add_temporary(s, m, c),
            Utility::ExtendedPotionOfNightmareCourtSlaying(x) => x.add_temporary(s, m, c),
            Utility::ExtendedPotionOfOutlawSlaying(x) => x.add_temporary(s, m, c),
            Utility::ExtendedPotionOfSonsOfSvanirSlaying(x) => x.add_temporary(s, m, c),
            Utility::ExtendedPotionOfUndeadSlaying(x) => x.add_temporary(s, m, c),
            Utility::FlaskOfPumpkinOil(x) => x.add_temporary(s, m, c),
            Utility::FuriousMaintenanceOil(x) => x.add_temporary(s, m, c),
            Utility::FuriousSharpeningStone(x) => x.add_temporary(s, m, c),
            Utility::FuriousTuningCrystal(x) => x.add_temporary(s, m, c),
            Utility::HolographicSuperApple(x) => x.add_temporary(s, m, c),
            Utility::HolographicSuperCheese(x) => x.add_temporary(s, m, c),
            Utility::HolographicSuperDrumstick(x) => x.add_temporary(s, m, c),
            Utility::HylekMaintenanceOil(x) => x.add_temporary(s, m, c),
            Utility::KraitTuningCrystal(x) => x.add_temporary(s, m, c),
            Utility::LumpOfCrystallizedNougat(x) => x.add_temporary(s, m, c),
            Utility::MagnanimousMaintenanceOil(x) => x.add_temporary(s, m, c),
            Utility::MagnanimousSharpeningStone(x) => x.add_temporary(s, m, c),
            Utility::MagnanimousTuningCrystal(x) => x.add_temporary(s, m, c),
            Utility::MasterMaintenanceOil(x) => x.add_temporary(s, m, c),
            Utility::MasterTuningCrystal(x) => x.add_temporary(s, m, c),
            Utility::OgreSharpeningStone(x) => x.add_temporary(s, m, c),
            Utility::PeppermintOil(x) => x.add_temporary(s, m, c),
            Utility::PotentLucentOil(x) => x.add_temporary(s, m, c),
            Utility::PotentMasterMaintenanceOil(x) => x.add_temporary(s, m, c),
            Utility::PotentMasterTuningCrystal(x) => x.add_temporary(s, m, c),
            Utility::PotentSuperiorSharpeningStone(x) => x.add_temporary(s, m, c),
            Utility::PotionOfKarkaSlaying(x) => x.add_temporary(s, m, c),
            Utility::PotionOfKarkaToughness(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfBrandedSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfCentaurSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfDemonSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfDestroyerSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfDredgeSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfElementalSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfFlameLegionSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfGrawlSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfHalloweenSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfIceBroodSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfInquestSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfKraitSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfMordremSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfNightmareCourtSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfOgreSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfOutlawSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfSlayingScarletsArmies(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfSonsOfSvanirSlaying(x) => x.add_temporary(s, m, c),
            Utility::PowerfulPotionOfUndeadSlaying(x) => x.add_temporary(s, m, c),
            Utility::SharpeningSkull(x) => x.add_temporary(s, m, c),
            Utility::SuperiorSharpeningStone(x) => x.add_temporary(s, m, c),
            Utility::ThesisOnMasterfulAccuracy(x) => x.add_temporary(s, m, c),
            Utility::ThesisOnMasterfulMalice(x) => x.add_temporary(s, m, c),
            Utility::ThesisOnMasterfulStrength(x) => x.add_temporary(s, m, c),
            Utility::TinOfFruitcake(x) => x.add_temporary(s, m, c),
            Utility::ToxicFocusingCrystal(x) => x.add_temporary(s, m, c),
            Utility::ToxicMaintenanceOil(x) => x.add_temporary(s, m, c),
            Utility::ToxicSharpeningStone(x) => x.add_temporary(s, m, c),
            Utility::TuningIcicle(x) => x.add_temporary(s, m, c),
            Utility::WritOfMasterfulAccuracy(x) => x.add_temporary(s, m, c),
            Utility::WritOfMasterfulMalice(x) => x.add_temporary(s, m, c),
            Utility::WritOfMasterfulStrength(x) => x.add_temporary(s, m, c),
        }
    }
}
impl From<NoUtility> for Utility {
    fn from(x: NoUtility) -> Utility { Utility::NoUtility(x) }
}
impl From<BountifulMaintenanceOil> for Utility {
    fn from(x: BountifulMaintenanceOil) -> Utility { Utility::BountifulMaintenanceOil(x) }
}
impl From<BountifulSharpeningStone> for Utility {
    fn from(x: BountifulSharpeningStone) -> Utility { Utility::BountifulSharpeningStone(x) }
}
impl From<BountifulTuningCrystal> for Utility {
    fn from(x: BountifulTuningCrystal) -> Utility { Utility::BountifulTuningCrystal(x) }
}
impl From<CorsairMaintenanceOil> for Utility {
    fn from(x: CorsairMaintenanceOil) -> Utility { Utility::CorsairMaintenanceOil(x) }
}
impl From<CorsairSharpeningStone> for Utility {
    fn from(x: CorsairSharpeningStone) -> Utility { Utility::CorsairSharpeningStone(x) }
}
impl From<CorsairTuningCrystal> for Utility {
    fn from(x: CorsairTuningCrystal) -> Utility { Utility::CorsairTuningCrystal(x) }
}
impl From<DragonCrystalPotion> for Utility {
    fn from(x: DragonCrystalPotion) -> Utility { Utility::DragonCrystalPotion(x) }
}
impl From<EnhancedLucentOil> for Utility {
    fn from(x: EnhancedLucentOil) -> Utility { Utility::EnhancedLucentOil(x) }
}
impl From<ExtendedPotionOfDredgeSlaying> for Utility {
    fn from(x: ExtendedPotionOfDredgeSlaying) -> Utility { Utility::ExtendedPotionOfDredgeSlaying(x) }
}
impl From<ExtendedPotionOfFlameLegionSlaying> for Utility {
    fn from(x: ExtendedPotionOfFlameLegionSlaying) -> Utility { Utility::ExtendedPotionOfFlameLegionSlaying(x) }
}
impl From<ExtendedPotionOfGhostSlaying> for Utility {
    fn from(x: ExtendedPotionOfGhostSlaying) -> Utility { Utility::ExtendedPotionOfGhostSlaying(x) }
}
impl From<ExtendedPotionOfInquestSlaying> for Utility {
    fn from(x: ExtendedPotionOfInquestSlaying) -> Utility { Utility::ExtendedPotionOfInquestSlaying(x) }
}
impl From<ExtendedPotionOfNightmareCourtSlaying> for Utility {
    fn from(x: ExtendedPotionOfNightmareCourtSlaying) -> Utility { Utility::ExtendedPotionOfNightmareCourtSlaying(x) }
}
impl From<ExtendedPotionOfOutlawSlaying> for Utility {
    fn from(x: ExtendedPotionOfOutlawSlaying) -> Utility { Utility::ExtendedPotionOfOutlawSlaying(x) }
}
impl From<ExtendedPotionOfSonsOfSvanirSlaying> for Utility {
    fn from(x: ExtendedPotionOfSonsOfSvanirSlaying) -> Utility { Utility::ExtendedPotionOfSonsOfSvanirSlaying(x) }
}
impl From<ExtendedPotionOfUndeadSlaying> for Utility {
    fn from(x: ExtendedPotionOfUndeadSlaying) -> Utility { Utility::ExtendedPotionOfUndeadSlaying(x) }
}
impl From<FlaskOfPumpkinOil> for Utility {
    fn from(x: FlaskOfPumpkinOil) -> Utility { Utility::FlaskOfPumpkinOil(x) }
}
impl From<FuriousMaintenanceOil> for Utility {
    fn from(x: FuriousMaintenanceOil) -> Utility { Utility::FuriousMaintenanceOil(x) }
}
impl From<FuriousSharpeningStone> for Utility {
    fn from(x: FuriousSharpeningStone) -> Utility { Utility::FuriousSharpeningStone(x) }
}
impl From<FuriousTuningCrystal> for Utility {
    fn from(x: FuriousTuningCrystal) -> Utility { Utility::FuriousTuningCrystal(x) }
}
impl From<HolographicSuperApple> for Utility {
    fn from(x: HolographicSuperApple) -> Utility { Utility::HolographicSuperApple(x) }
}
impl From<HolographicSuperCheese> for Utility {
    fn from(x: HolographicSuperCheese) -> Utility { Utility::HolographicSuperCheese(x) }
}
impl From<HolographicSuperDrumstick> for Utility {
    fn from(x: HolographicSuperDrumstick) -> Utility { Utility::HolographicSuperDrumstick(x) }
}
impl From<HylekMaintenanceOil> for Utility {
    fn from(x: HylekMaintenanceOil) -> Utility { Utility::HylekMaintenanceOil(x) }
}
impl From<KraitTuningCrystal> for Utility {
    fn from(x: KraitTuningCrystal) -> Utility { Utility::KraitTuningCrystal(x) }
}
impl From<LumpOfCrystallizedNougat> for Utility {
    fn from(x: LumpOfCrystallizedNougat) -> Utility { Utility::LumpOfCrystallizedNougat(x) }
}
impl From<MagnanimousMaintenanceOil> for Utility {
    fn from(x: MagnanimousMaintenanceOil) -> Utility { Utility::MagnanimousMaintenanceOil(x) }
}
impl From<MagnanimousSharpeningStone> for Utility {
    fn from(x: MagnanimousSharpeningStone) -> Utility { Utility::MagnanimousSharpeningStone(x) }
}
impl From<MagnanimousTuningCrystal> for Utility {
    fn from(x: MagnanimousTuningCrystal) -> Utility { Utility::MagnanimousTuningCrystal(x) }
}
impl From<MasterMaintenanceOil> for Utility {
    fn from(x: MasterMaintenanceOil) -> Utility { Utility::MasterMaintenanceOil(x) }
}
impl From<MasterTuningCrystal> for Utility {
    fn from(x: MasterTuningCrystal) -> Utility { Utility::MasterTuningCrystal(x) }
}
impl From<OgreSharpeningStone> for Utility {
    fn from(x: OgreSharpeningStone) -> Utility { Utility::OgreSharpeningStone(x) }
}
impl From<PeppermintOil> for Utility {
    fn from(x: PeppermintOil) -> Utility { Utility::PeppermintOil(x) }
}
impl From<PotentLucentOil> for Utility {
    fn from(x: PotentLucentOil) -> Utility { Utility::PotentLucentOil(x) }
}
impl From<PotentMasterMaintenanceOil> for Utility {
    fn from(x: PotentMasterMaintenanceOil) -> Utility { Utility::PotentMasterMaintenanceOil(x) }
}
impl From<PotentMasterTuningCrystal> for Utility {
    fn from(x: PotentMasterTuningCrystal) -> Utility { Utility::PotentMasterTuningCrystal(x) }
}
impl From<PotentSuperiorSharpeningStone> for Utility {
    fn from(x: PotentSuperiorSharpeningStone) -> Utility { Utility::PotentSuperiorSharpeningStone(x) }
}
impl From<PotionOfKarkaSlaying> for Utility {
    fn from(x: PotionOfKarkaSlaying) -> Utility { Utility::PotionOfKarkaSlaying(x) }
}
impl From<PotionOfKarkaToughness> for Utility {
    fn from(x: PotionOfKarkaToughness) -> Utility { Utility::PotionOfKarkaToughness(x) }
}
impl From<PowerfulPotionOfBrandedSlaying> for Utility {
    fn from(x: PowerfulPotionOfBrandedSlaying) -> Utility { Utility::PowerfulPotionOfBrandedSlaying(x) }
}
impl From<PowerfulPotionOfCentaurSlaying> for Utility {
    fn from(x: PowerfulPotionOfCentaurSlaying) -> Utility { Utility::PowerfulPotionOfCentaurSlaying(x) }
}
impl From<PowerfulPotionOfDemonSlaying> for Utility {
    fn from(x: PowerfulPotionOfDemonSlaying) -> Utility { Utility::PowerfulPotionOfDemonSlaying(x) }
}
impl From<PowerfulPotionOfDestroyerSlaying> for Utility {
    fn from(x: PowerfulPotionOfDestroyerSlaying) -> Utility { Utility::PowerfulPotionOfDestroyerSlaying(x) }
}
impl From<PowerfulPotionOfDredgeSlaying> for Utility {
    fn from(x: PowerfulPotionOfDredgeSlaying) -> Utility { Utility::PowerfulPotionOfDredgeSlaying(x) }
}
impl From<PowerfulPotionOfElementalSlaying> for Utility {
    fn from(x: PowerfulPotionOfElementalSlaying) -> Utility { Utility::PowerfulPotionOfElementalSlaying(x) }
}
impl From<PowerfulPotionOfFlameLegionSlaying> for Utility {
    fn from(x: PowerfulPotionOfFlameLegionSlaying) -> Utility { Utility::PowerfulPotionOfFlameLegionSlaying(x) }
}
impl From<PowerfulPotionOfGrawlSlaying> for Utility {
    fn from(x: PowerfulPotionOfGrawlSlaying) -> Utility { Utility::PowerfulPotionOfGrawlSlaying(x) }
}
impl From<PowerfulPotionOfHalloweenSlaying> for Utility {
    fn from(x: PowerfulPotionOfHalloweenSlaying) -> Utility { Utility::PowerfulPotionOfHalloweenSlaying(x) }
}
impl From<PowerfulPotionOfIceBroodSlaying> for Utility {
    fn from(x: PowerfulPotionOfIceBroodSlaying) -> Utility { Utility::PowerfulPotionOfIceBroodSlaying(x) }
}
impl From<PowerfulPotionOfInquestSlaying> for Utility {
    fn from(x: PowerfulPotionOfInquestSlaying) -> Utility { Utility::PowerfulPotionOfInquestSlaying(x) }
}
impl From<PowerfulPotionOfKraitSlaying> for Utility {
    fn from(x: PowerfulPotionOfKraitSlaying) -> Utility { Utility::PowerfulPotionOfKraitSlaying(x) }
}
impl From<PowerfulPotionOfMordremSlaying> for Utility {
    fn from(x: PowerfulPotionOfMordremSlaying) -> Utility { Utility::PowerfulPotionOfMordremSlaying(x) }
}
impl From<PowerfulPotionOfNightmareCourtSlaying> for Utility {
    fn from(x: PowerfulPotionOfNightmareCourtSlaying) -> Utility { Utility::PowerfulPotionOfNightmareCourtSlaying(x) }
}
impl From<PowerfulPotionOfOgreSlaying> for Utility {
    fn from(x: PowerfulPotionOfOgreSlaying) -> Utility { Utility::PowerfulPotionOfOgreSlaying(x) }
}
impl From<PowerfulPotionOfOutlawSlaying> for Utility {
    fn from(x: PowerfulPotionOfOutlawSlaying) -> Utility { Utility::PowerfulPotionOfOutlawSlaying(x) }
}
impl From<PowerfulPotionOfSlayingScarletsArmies> for Utility {
    fn from(x: PowerfulPotionOfSlayingScarletsArmies) -> Utility { Utility::PowerfulPotionOfSlayingScarletsArmies(x) }
}
impl From<PowerfulPotionOfSonsOfSvanirSlaying> for Utility {
    fn from(x: PowerfulPotionOfSonsOfSvanirSlaying) -> Utility { Utility::PowerfulPotionOfSonsOfSvanirSlaying(x) }
}
impl From<PowerfulPotionOfUndeadSlaying> for Utility {
    fn from(x: PowerfulPotionOfUndeadSlaying) -> Utility { Utility::PowerfulPotionOfUndeadSlaying(x) }
}
impl From<SharpeningSkull> for Utility {
    fn from(x: SharpeningSkull) -> Utility { Utility::SharpeningSkull(x) }
}
impl From<SuperiorSharpeningStone> for Utility {
    fn from(x: SuperiorSharpeningStone) -> Utility { Utility::SuperiorSharpeningStone(x) }
}
impl From<ThesisOnMasterfulAccuracy> for Utility {
    fn from(x: ThesisOnMasterfulAccuracy) -> Utility { Utility::ThesisOnMasterfulAccuracy(x) }
}
impl From<ThesisOnMasterfulMalice> for Utility {
    fn from(x: ThesisOnMasterfulMalice) -> Utility { Utility::ThesisOnMasterfulMalice(x) }
}
impl From<ThesisOnMasterfulStrength> for Utility {
    fn from(x: ThesisOnMasterfulStrength) -> Utility { Utility::ThesisOnMasterfulStrength(x) }
}
impl From<TinOfFruitcake> for Utility {
    fn from(x: TinOfFruitcake) -> Utility { Utility::TinOfFruitcake(x) }
}
impl From<ToxicFocusingCrystal> for Utility {
    fn from(x: ToxicFocusingCrystal) -> Utility { Utility::ToxicFocusingCrystal(x) }
}
impl From<ToxicMaintenanceOil> for Utility {
    fn from(x: ToxicMaintenanceOil) -> Utility { Utility::ToxicMaintenanceOil(x) }
}
impl From<ToxicSharpeningStone> for Utility {
    fn from(x: ToxicSharpeningStone) -> Utility { Utility::ToxicSharpeningStone(x) }
}
impl From<TuningIcicle> for Utility {
    fn from(x: TuningIcicle) -> Utility { Utility::TuningIcicle(x) }
}
impl From<WritOfMasterfulAccuracy> for Utility {
    fn from(x: WritOfMasterfulAccuracy) -> Utility { Utility::WritOfMasterfulAccuracy(x) }
}
impl From<WritOfMasterfulMalice> for Utility {
    fn from(x: WritOfMasterfulMalice) -> Utility { Utility::WritOfMasterfulMalice(x) }
}
impl From<WritOfMasterfulStrength> for Utility {
    fn from(x: WritOfMasterfulStrength) -> Utility { Utility::WritOfMasterfulStrength(x) }
}
impl Vary for Utility {
    fn num_fields(&self) -> usize { 1 }
    fn num_field_values(&self, _field: usize) -> u16 { 72 }
    fn get_field(&self, _field: usize) -> u16 {
        self.index() as u16
    }
    fn set_field(&mut self, _field: usize, value: u16) {
        *self = Utility::from_index(value as usize);
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
pub enum KnownUtility {
    NoUtility(NoUtility),
    BountifulSharpeningStone(BountifulSharpeningStone),
    BountifulTuningCrystal(BountifulTuningCrystal),
    CorsairMaintenanceOil(CorsairMaintenanceOil),
    CorsairSharpeningStone(CorsairSharpeningStone),
    CorsairTuningCrystal(CorsairTuningCrystal),
    EnhancedLucentOil(EnhancedLucentOil),
    FuriousMaintenanceOil(FuriousMaintenanceOil),
    FuriousSharpeningStone(FuriousSharpeningStone),
    FuriousTuningCrystal(FuriousTuningCrystal),
    HolographicSuperApple(HolographicSuperApple),
    HolographicSuperCheese(HolographicSuperCheese),
    HolographicSuperDrumstick(HolographicSuperDrumstick),
    HylekMaintenanceOil(HylekMaintenanceOil),
    KraitTuningCrystal(KraitTuningCrystal),
    MagnanimousMaintenanceOil(MagnanimousMaintenanceOil),
    MagnanimousSharpeningStone(MagnanimousSharpeningStone),
    MagnanimousTuningCrystal(MagnanimousTuningCrystal),
    OgreSharpeningStone(OgreSharpeningStone),
    PotentLucentOil(PotentLucentOil),
    PotionOfKarkaToughness(PotionOfKarkaToughness),
    ToxicFocusingCrystal(ToxicFocusingCrystal),
    ToxicMaintenanceOil(ToxicMaintenanceOil),
    ToxicSharpeningStone(ToxicSharpeningStone),
}
impl Default for KnownUtility {
    fn default() -> KnownUtility { KnownUtility::NoUtility(NoUtility) }
}
impl KnownUtility {
    pub const COUNT: usize = 24;
    pub fn index(self) -> usize {
        match self {
            KnownUtility::NoUtility(NoUtility) => 0,
            KnownUtility::BountifulSharpeningStone(BountifulSharpeningStone) => 1,
            KnownUtility::BountifulTuningCrystal(BountifulTuningCrystal) => 2,
            KnownUtility::CorsairMaintenanceOil(CorsairMaintenanceOil) => 3,
            KnownUtility::CorsairSharpeningStone(CorsairSharpeningStone) => 4,
            KnownUtility::CorsairTuningCrystal(CorsairTuningCrystal) => 5,
            KnownUtility::EnhancedLucentOil(EnhancedLucentOil) => 6,
            KnownUtility::FuriousMaintenanceOil(FuriousMaintenanceOil) => 7,
            KnownUtility::FuriousSharpeningStone(FuriousSharpeningStone) => 8,
            KnownUtility::FuriousTuningCrystal(FuriousTuningCrystal) => 9,
            KnownUtility::HolographicSuperApple(HolographicSuperApple) => 10,
            KnownUtility::HolographicSuperCheese(HolographicSuperCheese) => 11,
            KnownUtility::HolographicSuperDrumstick(HolographicSuperDrumstick) => 12,
            KnownUtility::HylekMaintenanceOil(HylekMaintenanceOil) => 13,
            KnownUtility::KraitTuningCrystal(KraitTuningCrystal) => 14,
            KnownUtility::MagnanimousMaintenanceOil(MagnanimousMaintenanceOil) => 15,
            KnownUtility::MagnanimousSharpeningStone(MagnanimousSharpeningStone) => 16,
            KnownUtility::MagnanimousTuningCrystal(MagnanimousTuningCrystal) => 17,
            KnownUtility::OgreSharpeningStone(OgreSharpeningStone) => 18,
            KnownUtility::PotentLucentOil(PotentLucentOil) => 19,
            KnownUtility::PotionOfKarkaToughness(PotionOfKarkaToughness) => 20,
            KnownUtility::ToxicFocusingCrystal(ToxicFocusingCrystal) => 21,
            KnownUtility::ToxicMaintenanceOil(ToxicMaintenanceOil) => 22,
            KnownUtility::ToxicSharpeningStone(ToxicSharpeningStone) => 23,
        }
    }
    pub fn from_index(i: usize) -> KnownUtility {
        match i {
            0 => KnownUtility::NoUtility(NoUtility),
            1 => KnownUtility::BountifulSharpeningStone(BountifulSharpeningStone),
            2 => KnownUtility::BountifulTuningCrystal(BountifulTuningCrystal),
            3 => KnownUtility::CorsairMaintenanceOil(CorsairMaintenanceOil),
            4 => KnownUtility::CorsairSharpeningStone(CorsairSharpeningStone),
            5 => KnownUtility::CorsairTuningCrystal(CorsairTuningCrystal),
            6 => KnownUtility::EnhancedLucentOil(EnhancedLucentOil),
            7 => KnownUtility::FuriousMaintenanceOil(FuriousMaintenanceOil),
            8 => KnownUtility::FuriousSharpeningStone(FuriousSharpeningStone),
            9 => KnownUtility::FuriousTuningCrystal(FuriousTuningCrystal),
            10 => KnownUtility::HolographicSuperApple(HolographicSuperApple),
            11 => KnownUtility::HolographicSuperCheese(HolographicSuperCheese),
            12 => KnownUtility::HolographicSuperDrumstick(HolographicSuperDrumstick),
            13 => KnownUtility::HylekMaintenanceOil(HylekMaintenanceOil),
            14 => KnownUtility::KraitTuningCrystal(KraitTuningCrystal),
            15 => KnownUtility::MagnanimousMaintenanceOil(MagnanimousMaintenanceOil),
            16 => KnownUtility::MagnanimousSharpeningStone(MagnanimousSharpeningStone),
            17 => KnownUtility::MagnanimousTuningCrystal(MagnanimousTuningCrystal),
            18 => KnownUtility::OgreSharpeningStone(OgreSharpeningStone),
            19 => KnownUtility::PotentLucentOil(PotentLucentOil),
            20 => KnownUtility::PotionOfKarkaToughness(PotionOfKarkaToughness),
            21 => KnownUtility::ToxicFocusingCrystal(ToxicFocusingCrystal),
            22 => KnownUtility::ToxicMaintenanceOil(ToxicMaintenanceOil),
            23 => KnownUtility::ToxicSharpeningStone(ToxicSharpeningStone),
            _ => panic!("index {} out of range for KnownUtility", i),
        }
    }
    pub fn iter() -> impl Iterator<Item = KnownUtility> {
        (0 .. KnownUtility::COUNT).map(KnownUtility::from_index)
    }
    pub fn display_name(self) -> &'static str {
        match self {
            KnownUtility::NoUtility(x) => x.display_name(),
            KnownUtility::BountifulSharpeningStone(x) => x.display_name(),
            KnownUtility::BountifulTuningCrystal(x) => x.display_name(),
            KnownUtility::CorsairMaintenanceOil(x) => x.display_name(),
            KnownUtility::CorsairSharpeningStone(x) => x.display_name(),
            KnownUtility::CorsairTuningCrystal(x) => x.display_name(),
            KnownUtility::EnhancedLucentOil(x) => x.display_name(),
            KnownUtility::FuriousMaintenanceOil(x) => x.display_name(),
            KnownUtility::FuriousSharpeningStone(x) => x.display_name(),
            KnownUtility::FuriousTuningCrystal(x) => x.display_name(),
            KnownUtility::HolographicSuperApple(x) => x.display_name(),
            KnownUtility::HolographicSuperCheese(x) => x.display_name(),
            KnownUtility::HolographicSuperDrumstick(x) => x.display_name(),
            KnownUtility::HylekMaintenanceOil(x) => x.display_name(),
            KnownUtility::KraitTuningCrystal(x) => x.display_name(),
            KnownUtility::MagnanimousMaintenanceOil(x) => x.display_name(),
            KnownUtility::MagnanimousSharpeningStone(x) => x.display_name(),
            KnownUtility::MagnanimousTuningCrystal(x) => x.display_name(),
            KnownUtility::OgreSharpeningStone(x) => x.display_name(),
            KnownUtility::PotentLucentOil(x) => x.display_name(),
            KnownUtility::PotionOfKarkaToughness(x) => x.display_name(),
            KnownUtility::ToxicFocusingCrystal(x) => x.display_name(),
            KnownUtility::ToxicMaintenanceOil(x) => x.display_name(),
            KnownUtility::ToxicSharpeningStone(x) => x.display_name(),
        }
    }
}
impl Effect for KnownUtility {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            KnownUtility::NoUtility(x) => x.add_permanent(s, m),
            KnownUtility::BountifulSharpeningStone(x) => x.add_permanent(s, m),
            KnownUtility::BountifulTuningCrystal(x) => x.add_permanent(s, m),
            KnownUtility::CorsairMaintenanceOil(x) => x.add_permanent(s, m),
            KnownUtility::CorsairSharpeningStone(x) => x.add_permanent(s, m),
            KnownUtility::CorsairTuningCrystal(x) => x.add_permanent(s, m),
            KnownUtility::EnhancedLucentOil(x) => x.add_permanent(s, m),
            KnownUtility::FuriousMaintenanceOil(x) => x.add_permanent(s, m),
            KnownUtility::FuriousSharpeningStone(x) => x.add_permanent(s, m),
            KnownUtility::FuriousTuningCrystal(x) => x.add_permanent(s, m),
            KnownUtility::HolographicSuperApple(x) => x.add_permanent(s, m),
            KnownUtility::HolographicSuperCheese(x) => x.add_permanent(s, m),
            KnownUtility::HolographicSuperDrumstick(x) => x.add_permanent(s, m),
            KnownUtility::HylekMaintenanceOil(x) => x.add_permanent(s, m),
            KnownUtility::KraitTuningCrystal(x) => x.add_permanent(s, m),
            KnownUtility::MagnanimousMaintenanceOil(x) => x.add_permanent(s, m),
            KnownUtility::MagnanimousSharpeningStone(x) => x.add_permanent(s, m),
            KnownUtility::MagnanimousTuningCrystal(x) => x.add_permanent(s, m),
            KnownUtility::OgreSharpeningStone(x) => x.add_permanent(s, m),
            KnownUtility::PotentLucentOil(x) => x.add_permanent(s, m),
            KnownUtility::PotionOfKarkaToughness(x) => x.add_permanent(s, m),
            KnownUtility::ToxicFocusingCrystal(x) => x.add_permanent(s, m),
            KnownUtility::ToxicMaintenanceOil(x) => x.add_permanent(s, m),
            KnownUtility::ToxicSharpeningStone(x) => x.add_permanent(s, m),
        }
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            KnownUtility::NoUtility(x) => x.distribute(s, m),
            KnownUtility::BountifulSharpeningStone(x) => x.distribute(s, m),
            KnownUtility::BountifulTuningCrystal(x) => x.distribute(s, m),
            KnownUtility::CorsairMaintenanceOil(x) => x.distribute(s, m),
            KnownUtility::CorsairSharpeningStone(x) => x.distribute(s, m),
            KnownUtility::CorsairTuningCrystal(x) => x.distribute(s, m),
            KnownUtility::EnhancedLucentOil(x) => x.distribute(s, m),
            KnownUtility::FuriousMaintenanceOil(x) => x.distribute(s, m),
            KnownUtility::FuriousSharpeningStone(x) => x.distribute(s, m),
            KnownUtility::FuriousTuningCrystal(x) => x.distribute(s, m),
            KnownUtility::HolographicSuperApple(x) => x.distribute(s, m),
            KnownUtility::HolographicSuperCheese(x) => x.distribute(s, m),
            KnownUtility::HolographicSuperDrumstick(x) => x.distribute(s, m),
            KnownUtility::HylekMaintenanceOil(x) => x.distribute(s, m),
            KnownUtility::KraitTuningCrystal(x) => x.distribute(s, m),
            KnownUtility::MagnanimousMaintenanceOil(x) => x.distribute(s, m),
            KnownUtility::MagnanimousSharpeningStone(x) => x.distribute(s, m),
            KnownUtility::MagnanimousTuningCrystal(x) => x.distribute(s, m),
            KnownUtility::OgreSharpeningStone(x) => x.distribute(s, m),
            KnownUtility::PotentLucentOil(x) => x.distribute(s, m),
            KnownUtility::PotionOfKarkaToughness(x) => x.distribute(s, m),
            KnownUtility::ToxicFocusingCrystal(x) => x.distribute(s, m),
            KnownUtility::ToxicMaintenanceOil(x) => x.distribute(s, m),
            KnownUtility::ToxicSharpeningStone(x) => x.distribute(s, m),
        }
    }
    fn add_temporary(&self, s: &mut Stats, m: &mut Modifiers, c: &CombatSecond) {
        match *self {
            KnownUtility::NoUtility(x) => x.add_temporary(s, m, c),
            KnownUtility::BountifulSharpeningStone(x) => x.add_temporary(s, m, c),
            KnownUtility::BountifulTuningCrystal(x) => x.add_temporary(s, m, c),
            KnownUtility::CorsairMaintenanceOil(x) => x.add_temporary(s, m, c),
            KnownUtility::CorsairSharpeningStone(x) => x.add_temporary(s, m, c),
            KnownUtility::CorsairTuningCrystal(x) => x.add_temporary(s, m, c),
            KnownUtility::EnhancedLucentOil(x) => x.add_temporary(s, m, c),
            KnownUtility::FuriousMaintenanceOil(x) => x.add_temporary(s, m, c),
            KnownUtility::FuriousSharpeningStone(x) => x.add_temporary(s, m, c),
            KnownUtility::FuriousTuningCrystal(x) => x.add_temporary(s, m, c),
            KnownUtility::HolographicSuperApple(x) => x.add_temporary(s, m, c),
            KnownUtility::HolographicSuperCheese(x) => x.add_temporary(s, m, c),
            KnownUtility::HolographicSuperDrumstick(x) => x.add_temporary(s, m, c),
            KnownUtility::HylekMaintenanceOil(x) => x.add_temporary(s, m, c),
            KnownUtility::KraitTuningCrystal(x) => x.add_temporary(s, m, c),
            KnownUtility::MagnanimousMaintenanceOil(x) => x.add_temporary(s, m, c),
            KnownUtility::MagnanimousSharpeningStone(x) => x.add_temporary(s, m, c),
            KnownUtility::MagnanimousTuningCrystal(x) => x.add_temporary(s, m, c),
            KnownUtility::OgreSharpeningStone(x) => x.add_temporary(s, m, c),
            KnownUtility::PotentLucentOil(x) => x.add_temporary(s, m, c),
            KnownUtility::PotionOfKarkaToughness(x) => x.add_temporary(s, m, c),
            KnownUtility::ToxicFocusingCrystal(x) => x.add_temporary(s, m, c),
            KnownUtility::ToxicMaintenanceOil(x) => x.add_temporary(s, m, c),
            KnownUtility::ToxicSharpeningStone(x) => x.add_temporary(s, m, c),
        }
    }
}
impl From<NoUtility> for KnownUtility {
    fn from(x: NoUtility) -> KnownUtility { KnownUtility::NoUtility(x) }
}
impl From<BountifulSharpeningStone> for KnownUtility {
    fn from(x: BountifulSharpeningStone) -> KnownUtility { KnownUtility::BountifulSharpeningStone(x) }
}
impl From<BountifulTuningCrystal> for KnownUtility {
    fn from(x: BountifulTuningCrystal) -> KnownUtility { KnownUtility::BountifulTuningCrystal(x) }
}
impl From<CorsairMaintenanceOil> for KnownUtility {
    fn from(x: CorsairMaintenanceOil) -> KnownUtility { KnownUtility::CorsairMaintenanceOil(x) }
}
impl From<CorsairSharpeningStone> for KnownUtility {
    fn from(x: CorsairSharpeningStone) -> KnownUtility { KnownUtility::CorsairSharpeningStone(x) }
}
impl From<CorsairTuningCrystal> for KnownUtility {
    fn from(x: CorsairTuningCrystal) -> KnownUtility { KnownUtility::CorsairTuningCrystal(x) }
}
impl From<EnhancedLucentOil> for KnownUtility {
    fn from(x: EnhancedLucentOil) -> KnownUtility { KnownUtility::EnhancedLucentOil(x) }
}
impl From<FuriousMaintenanceOil> for KnownUtility {
    fn from(x: FuriousMaintenanceOil) -> KnownUtility { KnownUtility::FuriousMaintenanceOil(x) }
}
impl From<FuriousSharpeningStone> for KnownUtility {
    fn from(x: FuriousSharpeningStone) -> KnownUtility { KnownUtility::FuriousSharpeningStone(x) }
}
impl From<FuriousTuningCrystal> for KnownUtility {
    fn from(x: FuriousTuningCrystal) -> KnownUtility { KnownUtility::FuriousTuningCrystal(x) }
}
impl From<HolographicSuperApple> for KnownUtility {
    fn from(x: HolographicSuperApple) -> KnownUtility { KnownUtility::HolographicSuperApple(x) }
}
impl From<HolographicSuperCheese> for KnownUtility {
    fn from(x: HolographicSuperCheese) -> KnownUtility { KnownUtility::HolographicSuperCheese(x) }
}
impl From<HolographicSuperDrumstick> for KnownUtility {
    fn from(x: HolographicSuperDrumstick) -> KnownUtility { KnownUtility::HolographicSuperDrumstick(x) }
}
impl From<HylekMaintenanceOil> for KnownUtility {
    fn from(x: HylekMaintenanceOil) -> KnownUtility { KnownUtility::HylekMaintenanceOil(x) }
}
impl From<KraitTuningCrystal> for KnownUtility {
    fn from(x: KraitTuningCrystal) -> KnownUtility { KnownUtility::KraitTuningCrystal(x) }
}
impl From<MagnanimousMaintenanceOil> for KnownUtility {
    fn from(x: MagnanimousMaintenanceOil) -> KnownUtility { KnownUtility::MagnanimousMaintenanceOil(x) }
}
impl From<MagnanimousSharpeningStone> for KnownUtility {
    fn from(x: MagnanimousSharpeningStone) -> KnownUtility { KnownUtility::MagnanimousSharpeningStone(x) }
}
impl From<MagnanimousTuningCrystal> for KnownUtility {
    fn from(x: MagnanimousTuningCrystal) -> KnownUtility { KnownUtility::MagnanimousTuningCrystal(x) }
}
impl From<OgreSharpeningStone> for KnownUtility {
    fn from(x: OgreSharpeningStone) -> KnownUtility { KnownUtility::OgreSharpeningStone(x) }
}
impl From<PotentLucentOil> for KnownUtility {
    fn from(x: PotentLucentOil) -> KnownUtility { KnownUtility::PotentLucentOil(x) }
}
impl From<PotionOfKarkaToughness> for KnownUtility {
    fn from(x: PotionOfKarkaToughness) -> KnownUtility { KnownUtility::PotionOfKarkaToughness(x) }
}
impl From<ToxicFocusingCrystal> for KnownUtility {
    fn from(x: ToxicFocusingCrystal) -> KnownUtility { KnownUtility::ToxicFocusingCrystal(x) }
}
impl From<ToxicMaintenanceOil> for KnownUtility {
    fn from(x: ToxicMaintenanceOil) -> KnownUtility { KnownUtility::ToxicMaintenanceOil(x) }
}
impl From<ToxicSharpeningStone> for KnownUtility {
    fn from(x: ToxicSharpeningStone) -> KnownUtility { KnownUtility::ToxicSharpeningStone(x) }
}
impl Vary for KnownUtility {
    fn num_fields(&self) -> usize { 1 }
    fn num_field_values(&self, _field: usize) -> u16 { 24 }
    fn get_field(&self, _field: usize) -> u16 {
        self.index() as u16
    }
    fn set_field(&mut self, _field: usize, value: u16) {
        *self = KnownUtility::from_index(value as usize);
    }
}

impl Utility {
    pub fn is_known(self) -> bool {
        match self {
            Utility::NoUtility(_) => true,
            Utility::BountifulSharpeningStone(_) => true,
            Utility::BountifulTuningCrystal(_) => true,
            Utility::CorsairMaintenanceOil(_) => true,
            Utility::CorsairSharpeningStone(_) => true,
            Utility::CorsairTuningCrystal(_) => true,
            Utility::EnhancedLucentOil(_) => true,
            Utility::FuriousMaintenanceOil(_) => true,
            Utility::FuriousSharpeningStone(_) => true,
            Utility::FuriousTuningCrystal(_) => true,
            Utility::HolographicSuperApple(_) => true,
            Utility::HolographicSuperCheese(_) => true,
            Utility::HolographicSuperDrumstick(_) => true,
            Utility::HylekMaintenanceOil(_) => true,
            Utility::KraitTuningCrystal(_) => true,
            Utility::MagnanimousMaintenanceOil(_) => true,
            Utility::MagnanimousSharpeningStone(_) => true,
            Utility::MagnanimousTuningCrystal(_) => true,
            Utility::OgreSharpeningStone(_) => true,
            Utility::PotentLucentOil(_) => true,
            Utility::PotionOfKarkaToughness(_) => true,
            Utility::ToxicFocusingCrystal(_) => true,
            Utility::ToxicMaintenanceOil(_) => true,
            Utility::ToxicSharpeningStone(_) => true,
            _ => false,
        }
    }
    pub fn as_known(self) -> KnownUtility {
        match self {
            Utility::NoUtility(NoUtility) => KnownUtility::NoUtility(NoUtility),
            Utility::BountifulMaintenanceOil(BountifulMaintenanceOil) => KnownUtility::NoUtility(NoUtility),
            Utility::BountifulSharpeningStone(BountifulSharpeningStone) => KnownUtility::BountifulSharpeningStone(BountifulSharpeningStone),
            Utility::BountifulTuningCrystal(BountifulTuningCrystal) => KnownUtility::BountifulTuningCrystal(BountifulTuningCrystal),
            Utility::CorsairMaintenanceOil(CorsairMaintenanceOil) => KnownUtility::CorsairMaintenanceOil(CorsairMaintenanceOil),
            Utility::CorsairSharpeningStone(CorsairSharpeningStone) => KnownUtility::CorsairSharpeningStone(CorsairSharpeningStone),
            Utility::CorsairTuningCrystal(CorsairTuningCrystal) => KnownUtility::CorsairTuningCrystal(CorsairTuningCrystal),
            Utility::DragonCrystalPotion(DragonCrystalPotion) => KnownUtility::NoUtility(NoUtility),
            Utility::EnhancedLucentOil(EnhancedLucentOil) => KnownUtility::EnhancedLucentOil(EnhancedLucentOil),
            Utility::ExtendedPotionOfDredgeSlaying(ExtendedPotionOfDredgeSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::ExtendedPotionOfFlameLegionSlaying(ExtendedPotionOfFlameLegionSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::ExtendedPotionOfGhostSlaying(ExtendedPotionOfGhostSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::ExtendedPotionOfInquestSlaying(ExtendedPotionOfInquestSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::ExtendedPotionOfNightmareCourtSlaying(ExtendedPotionOfNightmareCourtSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::ExtendedPotionOfOutlawSlaying(ExtendedPotionOfOutlawSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::ExtendedPotionOfSonsOfSvanirSlaying(ExtendedPotionOfSonsOfSvanirSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::ExtendedPotionOfUndeadSlaying(ExtendedPotionOfUndeadSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::FlaskOfPumpkinOil(FlaskOfPumpkinOil) => KnownUtility::NoUtility(NoUtility),
            Utility::FuriousMaintenanceOil(FuriousMaintenanceOil) => KnownUtility::FuriousMaintenanceOil(FuriousMaintenanceOil),
            Utility::FuriousSharpeningStone(FuriousSharpeningStone) => KnownUtility::FuriousSharpeningStone(FuriousSharpeningStone),
            Utility::FuriousTuningCrystal(FuriousTuningCrystal) => KnownUtility::FuriousTuningCrystal(FuriousTuningCrystal),
            Utility::HolographicSuperApple(HolographicSuperApple) => KnownUtility::HolographicSuperApple(HolographicSuperApple),
            Utility::HolographicSuperCheese(HolographicSuperCheese) => KnownUtility::HolographicSuperCheese(HolographicSuperCheese),
            Utility::HolographicSuperDrumstick(HolographicSuperDrumstick) => KnownUtility::HolographicSuperDrumstick(HolographicSuperDrumstick),
            Utility::HylekMaintenanceOil(HylekMaintenanceOil) => KnownUtility::HylekMaintenanceOil(HylekMaintenanceOil),
            Utility::KraitTuningCrystal(KraitTuningCrystal) => KnownUtility::KraitTuningCrystal(KraitTuningCrystal),
            Utility::LumpOfCrystallizedNougat(LumpOfCrystallizedNougat) => KnownUtility::NoUtility(NoUtility),
            Utility::MagnanimousMaintenanceOil(MagnanimousMaintenanceOil) => KnownUtility::MagnanimousMaintenanceOil(MagnanimousMaintenanceOil),
            Utility::MagnanimousSharpeningStone(MagnanimousSharpeningStone) => KnownUtility::MagnanimousSharpeningStone(MagnanimousSharpeningStone),
            Utility::MagnanimousTuningCrystal(MagnanimousTuningCrystal) => KnownUtility::MagnanimousTuningCrystal(MagnanimousTuningCrystal),
            Utility::MasterMaintenanceOil(MasterMaintenanceOil) => KnownUtility::HylekMaintenanceOil(HylekMaintenanceOil),
            Utility::MasterTuningCrystal(MasterTuningCrystal) => KnownUtility::KraitTuningCrystal(KraitTuningCrystal),
            Utility::OgreSharpeningStone(OgreSharpeningStone) => KnownUtility::OgreSharpeningStone(OgreSharpeningStone),
            Utility::PeppermintOil(PeppermintOil) => KnownUtility::HylekMaintenanceOil(HylekMaintenanceOil),
            Utility::PotentLucentOil(PotentLucentOil) => KnownUtility::PotentLucentOil(PotentLucentOil),
            Utility::PotentMasterMaintenanceOil(PotentMasterMaintenanceOil) => KnownUtility::HylekMaintenanceOil(HylekMaintenanceOil),
            Utility::PotentMasterTuningCrystal(PotentMasterTuningCrystal) => KnownUtility::KraitTuningCrystal(KraitTuningCrystal),
            Utility::PotentSuperiorSharpeningStone(PotentSuperiorSharpeningStone) => KnownUtility::OgreSharpeningStone(OgreSharpeningStone),
            Utility::PotionOfKarkaSlaying(PotionOfKarkaSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PotionOfKarkaToughness(PotionOfKarkaToughness) => KnownUtility::PotionOfKarkaToughness(PotionOfKarkaToughness),
            Utility::PowerfulPotionOfBrandedSlaying(PowerfulPotionOfBrandedSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfCentaurSlaying(PowerfulPotionOfCentaurSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfDemonSlaying(PowerfulPotionOfDemonSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfDestroyerSlaying(PowerfulPotionOfDestroyerSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfDredgeSlaying(PowerfulPotionOfDredgeSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfElementalSlaying(PowerfulPotionOfElementalSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfFlameLegionSlaying(PowerfulPotionOfFlameLegionSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfGrawlSlaying(PowerfulPotionOfGrawlSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfHalloweenSlaying(PowerfulPotionOfHalloweenSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfIceBroodSlaying(PowerfulPotionOfIceBroodSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfInquestSlaying(PowerfulPotionOfInquestSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfKraitSlaying(PowerfulPotionOfKraitSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfMordremSlaying(PowerfulPotionOfMordremSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfNightmareCourtSlaying(PowerfulPotionOfNightmareCourtSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfOgreSlaying(PowerfulPotionOfOgreSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfOutlawSlaying(PowerfulPotionOfOutlawSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfSlayingScarletsArmies(PowerfulPotionOfSlayingScarletsArmies) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfSonsOfSvanirSlaying(PowerfulPotionOfSonsOfSvanirSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::PowerfulPotionOfUndeadSlaying(PowerfulPotionOfUndeadSlaying) => KnownUtility::NoUtility(NoUtility),
            Utility::SharpeningSkull(SharpeningSkull) => KnownUtility::NoUtility(NoUtility),
            Utility::SuperiorSharpeningStone(SuperiorSharpeningStone) => KnownUtility::OgreSharpeningStone(OgreSharpeningStone),
            Utility::ThesisOnMasterfulAccuracy(ThesisOnMasterfulAccuracy) => KnownUtility::NoUtility(NoUtility),
            Utility::ThesisOnMasterfulMalice(ThesisOnMasterfulMalice) => KnownUtility::NoUtility(NoUtility),
            Utility::ThesisOnMasterfulStrength(ThesisOnMasterfulStrength) => KnownUtility::NoUtility(NoUtility),
            Utility::TinOfFruitcake(TinOfFruitcake) => KnownUtility::OgreSharpeningStone(OgreSharpeningStone),
            Utility::ToxicFocusingCrystal(ToxicFocusingCrystal) => KnownUtility::ToxicFocusingCrystal(ToxicFocusingCrystal),
            Utility::ToxicMaintenanceOil(ToxicMaintenanceOil) => KnownUtility::ToxicMaintenanceOil(ToxicMaintenanceOil),
            Utility::ToxicSharpeningStone(ToxicSharpeningStone) => KnownUtility::ToxicSharpeningStone(ToxicSharpeningStone),
            Utility::TuningIcicle(TuningIcicle) => KnownUtility::KraitTuningCrystal(KraitTuningCrystal),
            Utility::WritOfMasterfulAccuracy(WritOfMasterfulAccuracy) => KnownUtility::NoUtility(NoUtility),
            Utility::WritOfMasterfulMalice(WritOfMasterfulMalice) => KnownUtility::NoUtility(NoUtility),
            Utility::WritOfMasterfulStrength(WritOfMasterfulStrength) => KnownUtility::NoUtility(NoUtility),
        }
    }
}
impl NoUtility {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl BountifulMaintenanceOil {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl BountifulSharpeningStone {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::BountifulSharpeningStone(BountifulSharpeningStone)
    }
}
impl BountifulTuningCrystal {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::BountifulTuningCrystal(BountifulTuningCrystal)
    }
}
impl CorsairMaintenanceOil {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::CorsairMaintenanceOil(CorsairMaintenanceOil)
    }
}
impl CorsairSharpeningStone {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::CorsairSharpeningStone(CorsairSharpeningStone)
    }
}
impl CorsairTuningCrystal {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::CorsairTuningCrystal(CorsairTuningCrystal)
    }
}
impl DragonCrystalPotion {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl EnhancedLucentOil {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::EnhancedLucentOil(EnhancedLucentOil)
    }
}
impl ExtendedPotionOfDredgeSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl ExtendedPotionOfFlameLegionSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl ExtendedPotionOfGhostSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl ExtendedPotionOfInquestSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl ExtendedPotionOfNightmareCourtSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl ExtendedPotionOfOutlawSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl ExtendedPotionOfSonsOfSvanirSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl ExtendedPotionOfUndeadSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl FlaskOfPumpkinOil {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl FuriousMaintenanceOil {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::FuriousMaintenanceOil(FuriousMaintenanceOil)
    }
}
impl FuriousSharpeningStone {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::FuriousSharpeningStone(FuriousSharpeningStone)
    }
}
impl FuriousTuningCrystal {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::FuriousTuningCrystal(FuriousTuningCrystal)
    }
}
impl HolographicSuperApple {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::HolographicSuperApple(HolographicSuperApple)
    }
}
impl HolographicSuperCheese {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::HolographicSuperCheese(HolographicSuperCheese)
    }
}
impl HolographicSuperDrumstick {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::HolographicSuperDrumstick(HolographicSuperDrumstick)
    }
}
impl HylekMaintenanceOil {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::HylekMaintenanceOil(HylekMaintenanceOil)
    }
}
impl KraitTuningCrystal {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::KraitTuningCrystal(KraitTuningCrystal)
    }
}
impl LumpOfCrystallizedNougat {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl MagnanimousMaintenanceOil {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::MagnanimousMaintenanceOil(MagnanimousMaintenanceOil)
    }
}
impl MagnanimousSharpeningStone {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::MagnanimousSharpeningStone(MagnanimousSharpeningStone)
    }
}
impl MagnanimousTuningCrystal {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::MagnanimousTuningCrystal(MagnanimousTuningCrystal)
    }
}
impl MasterMaintenanceOil {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::HylekMaintenanceOil(HylekMaintenanceOil)
    }
}
impl MasterTuningCrystal {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::KraitTuningCrystal(KraitTuningCrystal)
    }
}
impl OgreSharpeningStone {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::OgreSharpeningStone(OgreSharpeningStone)
    }
}
impl PeppermintOil {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::HylekMaintenanceOil(HylekMaintenanceOil)
    }
}
impl PotentLucentOil {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::PotentLucentOil(PotentLucentOil)
    }
}
impl PotentMasterMaintenanceOil {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::HylekMaintenanceOil(HylekMaintenanceOil)
    }
}
impl PotentMasterTuningCrystal {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::KraitTuningCrystal(KraitTuningCrystal)
    }
}
impl PotentSuperiorSharpeningStone {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::OgreSharpeningStone(OgreSharpeningStone)
    }
}
impl PotionOfKarkaSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PotionOfKarkaToughness {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::PotionOfKarkaToughness(PotionOfKarkaToughness)
    }
}
impl PowerfulPotionOfBrandedSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfCentaurSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfDemonSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfDestroyerSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfDredgeSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfElementalSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfFlameLegionSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfGrawlSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfHalloweenSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfIceBroodSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfInquestSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfKraitSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfMordremSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfNightmareCourtSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfOgreSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfOutlawSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfSlayingScarletsArmies {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfSonsOfSvanirSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl PowerfulPotionOfUndeadSlaying {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl SharpeningSkull {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl SuperiorSharpeningStone {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::OgreSharpeningStone(OgreSharpeningStone)
    }
}
impl ThesisOnMasterfulAccuracy {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl ThesisOnMasterfulMalice {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl ThesisOnMasterfulStrength {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl TinOfFruitcake {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::OgreSharpeningStone(OgreSharpeningStone)
    }
}
impl ToxicFocusingCrystal {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::ToxicFocusingCrystal(ToxicFocusingCrystal)
    }
}
impl ToxicMaintenanceOil {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::ToxicMaintenanceOil(ToxicMaintenanceOil)
    }
}
impl ToxicSharpeningStone {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::ToxicSharpeningStone(ToxicSharpeningStone)
    }
}
impl TuningIcicle {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::KraitTuningCrystal(KraitTuningCrystal)
    }
}
impl WritOfMasterfulAccuracy {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl WritOfMasterfulMalice {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl WritOfMasterfulStrength {
    pub fn as_known(self) -> KnownUtility {
        KnownUtility::NoUtility(NoUtility)
    }
}
impl From<KnownUtility> for Utility {
    fn from(x: KnownUtility) -> Utility {
        match x {
            KnownUtility::NoUtility(y) => Utility::NoUtility(y),
            KnownUtility::BountifulSharpeningStone(y) => Utility::BountifulSharpeningStone(y),
            KnownUtility::BountifulTuningCrystal(y) => Utility::BountifulTuningCrystal(y),
            KnownUtility::CorsairMaintenanceOil(y) => Utility::CorsairMaintenanceOil(y),
            KnownUtility::CorsairSharpeningStone(y) => Utility::CorsairSharpeningStone(y),
            KnownUtility::CorsairTuningCrystal(y) => Utility::CorsairTuningCrystal(y),
            KnownUtility::EnhancedLucentOil(y) => Utility::EnhancedLucentOil(y),
            KnownUtility::FuriousMaintenanceOil(y) => Utility::FuriousMaintenanceOil(y),
            KnownUtility::FuriousSharpeningStone(y) => Utility::FuriousSharpeningStone(y),
            KnownUtility::FuriousTuningCrystal(y) => Utility::FuriousTuningCrystal(y),
            KnownUtility::HolographicSuperApple(y) => Utility::HolographicSuperApple(y),
            KnownUtility::HolographicSuperCheese(y) => Utility::HolographicSuperCheese(y),
            KnownUtility::HolographicSuperDrumstick(y) => Utility::HolographicSuperDrumstick(y),
            KnownUtility::HylekMaintenanceOil(y) => Utility::HylekMaintenanceOil(y),
            KnownUtility::KraitTuningCrystal(y) => Utility::KraitTuningCrystal(y),
            KnownUtility::MagnanimousMaintenanceOil(y) => Utility::MagnanimousMaintenanceOil(y),
            KnownUtility::MagnanimousSharpeningStone(y) => Utility::MagnanimousSharpeningStone(y),
            KnownUtility::MagnanimousTuningCrystal(y) => Utility::MagnanimousTuningCrystal(y),
            KnownUtility::OgreSharpeningStone(y) => Utility::OgreSharpeningStone(y),
            KnownUtility::PotentLucentOil(y) => Utility::PotentLucentOil(y),
            KnownUtility::PotionOfKarkaToughness(y) => Utility::PotionOfKarkaToughness(y),
            KnownUtility::ToxicFocusingCrystal(y) => Utility::ToxicFocusingCrystal(y),
            KnownUtility::ToxicMaintenanceOil(y) => Utility::ToxicMaintenanceOil(y),
            KnownUtility::ToxicSharpeningStone(y) => Utility::ToxicSharpeningStone(y),
        }
    }
}

// END GENERATED CODE
