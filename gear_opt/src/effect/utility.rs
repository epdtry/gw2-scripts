use crate::effect::Effect;
use crate::stats::{Stats, Modifiers};

// BEGIN GENERATED CODE
// Generated by gen_gear_tables.py for GW2 build 142239 at 2023-03-06T17:23:37

/// No Utility
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct NoUtility;
#[allow(unused_variables)]
impl Effect for NoUtility {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (BountifulMaintenanceOil): xp_from_kills, 10.0
        // unknown (BountifulMaintenanceOil): gain 0.6% increased healing to other allies for every 100 healing power
        // unknown (BountifulMaintenanceOil): gain 0.8% increased healing to other allies for every 100 concentration
        // unimplemented (DragonCrystalPotion): xp_from_kills, 10.0
        // unknown (DragonCrystalPotion): +10% increased damage to branded foes in thunderhead peaks
        // unimplemented (ExtendedPotionOfDredgeSlaying): xp_from_kills, 10.0
        // unknown (ExtendedPotionOfDredgeSlaying): +10% damage vs. dredge
        // unknown (ExtendedPotionOfDredgeSlaying): -10% damage from dredge
        // unimplemented (ExtendedPotionOfFlameLegionSlaying): xp_from_kills, 10.0
        // unknown (ExtendedPotionOfFlameLegionSlaying): +10% damage vs. flame legion
        // unknown (ExtendedPotionOfFlameLegionSlaying): -10% damage from flame legion
        // unimplemented (ExtendedPotionOfGhostSlaying): xp_from_kills, 10.0
        // unknown (ExtendedPotionOfGhostSlaying): +10% damage vs. ghosts
        // unknown (ExtendedPotionOfGhostSlaying): -10% damage from ghosts
        // unimplemented (ExtendedPotionOfInquestSlaying): xp_from_kills, 10.0
        // unknown (ExtendedPotionOfInquestSlaying): +10% damage vs. inquest
        // unknown (ExtendedPotionOfInquestSlaying): -10% damage from inquest
        // unimplemented (ExtendedPotionOfNightmareCourtSlaying): xp_from_kills, 10.0
        // unknown (ExtendedPotionOfNightmareCourtSlaying): +10% damage vs. nightmare court
        // unknown (ExtendedPotionOfNightmareCourtSlaying): -10% damage from nightmare court
        // unimplemented (ExtendedPotionOfOutlawSlaying): xp_from_kills, 10.0
        // unknown (ExtendedPotionOfOutlawSlaying): +10% damage vs. outlaws
        // unknown (ExtendedPotionOfOutlawSlaying): -10% damage from outlaws
        // unimplemented (ExtendedPotionOfSonsOfSvanirSlaying): xp_from_kills, 10.0
        // unknown (ExtendedPotionOfSonsOfSvanirSlaying): +10% damage vs. sons of svanir
        // unknown (ExtendedPotionOfSonsOfSvanirSlaying): -10% damage from sons of svanir
        // unimplemented (ExtendedPotionOfUndeadSlaying): xp_from_kills, 10.0
        // unknown (ExtendedPotionOfUndeadSlaying): +10% damage vs. undead
        // unknown (ExtendedPotionOfUndeadSlaying): -10% damage from undead
        // unimplemented (FlaskOfPumpkinOil): magic_find, 30.0
        // unimplemented (FlaskOfPumpkinOil): xp_from_kills, 10.0
        // unknown (FlaskOfPumpkinOil): pumpkin prowess increases power, toughness, and vitality
        // unknown (FlaskOfPumpkinOil): reviving an ally grants pumpkin prowess to both you and your revived ally
        // unimplemented (LumpOfCrystallizedNougat): magic_find, 30.0
        // unimplemented (LumpOfCrystallizedNougat): xp_from_kills, 10.0
        // unknown (LumpOfCrystallizedNougat): ghoul's grasp increases condition damage, precision, and toughness
        // unknown (LumpOfCrystallizedNougat): reviving an ally grants ghoul's grasp to both you and your revived ally
        // unimplemented (PotionOfKarkaSlaying): xp_from_kills, 10.0
        // unknown (PotionOfKarkaSlaying): +8% damage vs. karka
        // unknown (PotionOfKarkaSlaying): -6% damage from karka
        // unimplemented (PowerfulPotionOfBrandedSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfBrandedSlaying): +10% damage vs. branded
        // unknown (PowerfulPotionOfBrandedSlaying): -10% damage from branded
        // unimplemented (PowerfulPotionOfCentaurSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfCentaurSlaying): +10% damage vs. centaur
        // unknown (PowerfulPotionOfCentaurSlaying): -10% damage from centaur
        // unimplemented (PowerfulPotionOfDemonSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfDemonSlaying): +10% damage vs. demons
        // unknown (PowerfulPotionOfDemonSlaying): -10% damage from demons
        // unimplemented (PowerfulPotionOfDestroyerSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfDestroyerSlaying): +10% damage vs. destroyers
        // unknown (PowerfulPotionOfDestroyerSlaying): -10% damage from destroyers
        // unimplemented (PowerfulPotionOfDredgeSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfDredgeSlaying): +10% damage vs. dredge
        // unknown (PowerfulPotionOfDredgeSlaying): -10% damage from dredge
        // unimplemented (PowerfulPotionOfElementalSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfElementalSlaying): +10% damage vs. elementals
        // unknown (PowerfulPotionOfElementalSlaying): -10% damage from elementals
        // unimplemented (PowerfulPotionOfFlameLegionSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfFlameLegionSlaying): +10% damage vs. flame legion
        // unknown (PowerfulPotionOfFlameLegionSlaying): -10% damage from flame legion
        // unimplemented (PowerfulPotionOfGrawlSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfGrawlSlaying): +10% damage vs. grawl
        // unknown (PowerfulPotionOfGrawlSlaying): -10% damage from grawl
        // unimplemented (PowerfulPotionOfHalloweenSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfHalloweenSlaying): +10% damage vs. halloween creatures
        // unknown (PowerfulPotionOfHalloweenSlaying): -10% damage from halloween creatures
        // unimplemented (PowerfulPotionOfIceBroodSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfIceBroodSlaying): +10% damage vs. ice brood
        // unknown (PowerfulPotionOfIceBroodSlaying): -10% damage from ice brood
        // unimplemented (PowerfulPotionOfInquestSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfInquestSlaying): +10% damage vs. inquest
        // unknown (PowerfulPotionOfInquestSlaying): -10% damage from inquest
        // unimplemented (PowerfulPotionOfKraitSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfKraitSlaying): +10% damage vs. krait
        // unknown (PowerfulPotionOfKraitSlaying): -10% damage from krait
        // unimplemented (PowerfulPotionOfMordremSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfMordremSlaying): +10% damage vs. mordrem
        // unknown (PowerfulPotionOfMordremSlaying): -10% damage from mordrem
        // unimplemented (PowerfulPotionOfNightmareCourtSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfNightmareCourtSlaying): +10% damage vs. nightmare court
        // unknown (PowerfulPotionOfNightmareCourtSlaying): -10% damage from nightmare court
        // unimplemented (PowerfulPotionOfOgreSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfOgreSlaying): +10% damage vs. ogres
        // unknown (PowerfulPotionOfOgreSlaying): -10% damage from ogres
        // unimplemented (PowerfulPotionOfOutlawSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfOutlawSlaying): +10% damage vs. outlaws
        // unknown (PowerfulPotionOfOutlawSlaying): -10% damage from outlaws
        // unimplemented (PowerfulPotionOfSlayingScarletsArmies): xp_from_kills, 15.0
        // unknown (PowerfulPotionOfSlayingScarletsArmies): +10% damage vs. toxic alliance, watchwork, aetherblade, and molten alliance
        // unknown (PowerfulPotionOfSlayingScarletsArmies): -10% damage from toxic alliance, watchwork, aetherblade, and molten alliance
        // unimplemented (PowerfulPotionOfSonsOfSvanirSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfSonsOfSvanirSlaying): +10% damage vs. sons of svanir
        // unknown (PowerfulPotionOfSonsOfSvanirSlaying): -10% damage from sons of svanir
        // unimplemented (PowerfulPotionOfUndeadSlaying): xp_from_kills, 10.0
        // unknown (PowerfulPotionOfUndeadSlaying): +10% damage vs. undead
        // unknown (PowerfulPotionOfUndeadSlaying): -10% damage from undead
        // unimplemented (SharpeningSkull): magic_find, 30.0
        // unimplemented (SharpeningSkull): xp_from_kills, 10.0
        // unknown (SharpeningSkull): feline fury increases all attributes by a small amount
        // unknown (SharpeningSkull): reviving an ally grants feline fury to both you and your revived ally
        // unimplemented (ThesisOnMasterfulAccuracy): xp_from_kills, 10.0
        // unknown (ThesisOnMasterfulAccuracy): gain 200 precision when health above 90%
        // unimplemented (ThesisOnMasterfulMalice): xp_from_kills, 10.0
        // unknown (ThesisOnMasterfulMalice): gain 200 condition damage when health is above 90%
        // unimplemented (ThesisOnMasterfulStrength): xp_from_kills, 10.0
        // unknown (ThesisOnMasterfulStrength): gain 200 power when health above 90%
        // unimplemented (WritOfMasterfulAccuracy): xp_from_kills, 10.0
        // unknown (WritOfMasterfulAccuracy): gain 200 precision when health above 90%
        // unimplemented (WritOfMasterfulMalice): xp_from_kills, 10.0
        // unknown (WritOfMasterfulMalice): gain 200 condition damage when health is above 90%
        // unimplemented (WritOfMasterfulStrength): xp_from_kills, 10.0
        // unknown (WritOfMasterfulStrength): gain 200 power when health above 90%
    }
}
impl NoUtility {
    pub fn display_name(&self) -> &'static str {
        "No Utility / Bountiful Maintenance Oil / Dragon Crystal Potion / Extended Potion of Dredge Slaying / Extended Potion of Flame Legion Slaying / Extended Potion of Ghost Slaying / Extended Potion of Inquest Slaying / Extended Potion of Nightmare Court Slaying / Extended Potion of Outlaw Slaying / Extended Potion of Sons of Svanir Slaying / Extended Potion of Undead Slaying / Flask of Pumpkin Oil / Lump of Crystallized Nougat / Potion Of Karka Slaying / Powerful Potion of Branded Slaying / Powerful Potion of Centaur Slaying / Powerful Potion of Demon Slaying / Powerful Potion of Destroyer Slaying / Powerful Potion of Dredge Slaying / Powerful Potion of Elemental Slaying / Powerful Potion of Flame Legion Slaying / Powerful Potion of Grawl Slaying / Powerful Potion of Halloween Slaying / Powerful Potion of Ice Brood Slaying / Powerful Potion of Inquest Slaying / Powerful Potion of Krait Slaying / Powerful Potion of Mordrem Slaying / Powerful Potion of Nightmare Court Slaying / Powerful Potion of Ogre Slaying / Powerful Potion of Outlaw Slaying / Powerful Potion of Slaying Scarlet's Armies / Powerful Potion of Sons of Svanir Slaying / Powerful Potion of Undead Slaying / Sharpening Skull / Thesis on Masterful Accuracy / Thesis on Masterful Malice / Thesis on Masterful Strength / Writ of Masterful Accuracy / Writ of Masterful Malice / Writ of Masterful Strength"
    }
}

/// Bountiful Maintenance Oil
pub type BountifulMaintenanceOil = NoUtility;

/// Bountiful Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BountifulSharpeningStone;
#[allow(unused_variables)]
impl Effect for BountifulSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.concentration * 0.08;
        s.power += s.healing_power * 0.06;
    }
}
impl BountifulSharpeningStone {
    pub fn display_name(&self) -> &'static str {
        "Bountiful Sharpening Stone"
    }
}

/// Bountiful Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BountifulTuningCrystal;
#[allow(unused_variables)]
impl Effect for BountifulTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.concentration * 0.08;
        s.condition_damage += s.healing_power * 0.06;
    }
}
impl BountifulTuningCrystal {
    pub fn display_name(&self) -> &'static str {
        "Bountiful Tuning Crystal"
    }
}

/// Corsair Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CorsairMaintenanceOil;
#[allow(unused_variables)]
impl Effect for CorsairMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.toughness * 0.03;
        s.expertise += s.toughness * 0.03;
    }
}
impl CorsairMaintenanceOil {
    pub fn display_name(&self) -> &'static str {
        "Corsair Maintenance Oil"
    }
}

/// Corsair Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CorsairSharpeningStone;
#[allow(unused_variables)]
impl Effect for CorsairSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += s.toughness * 0.03;
        s.power += s.toughness * 0.03;
    }
}
impl CorsairSharpeningStone {
    pub fn display_name(&self) -> &'static str {
        "Corsair Sharpening Stone"
    }
}

/// Corsair Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CorsairTuningCrystal;
#[allow(unused_variables)]
impl Effect for CorsairTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.toughness * 0.03;
        s.expertise += s.toughness * 0.03;
    }
}
impl CorsairTuningCrystal {
    pub fn display_name(&self) -> &'static str {
        "Corsair Tuning Crystal"
    }
}

/// Dragon Crystal Potion
pub type DragonCrystalPotion = NoUtility;

/// Enhanced Lucent Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct EnhancedLucentOil;
#[allow(unused_variables)]
impl Effect for EnhancedLucentOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.condition_damage * 0.06;
        s.concentration += s.precision * 0.03;
    }
}
impl EnhancedLucentOil {
    pub fn display_name(&self) -> &'static str {
        "Enhanced Lucent Oil"
    }
}

/// Extended Potion of Dredge Slaying
pub type ExtendedPotionOfDredgeSlaying = NoUtility;

/// Extended Potion of Flame Legion Slaying
pub type ExtendedPotionOfFlameLegionSlaying = NoUtility;

/// Extended Potion of Ghost Slaying
pub type ExtendedPotionOfGhostSlaying = NoUtility;

/// Extended Potion of Inquest Slaying
pub type ExtendedPotionOfInquestSlaying = NoUtility;

/// Extended Potion of Nightmare Court Slaying
pub type ExtendedPotionOfNightmareCourtSlaying = NoUtility;

/// Extended Potion of Outlaw Slaying
pub type ExtendedPotionOfOutlawSlaying = NoUtility;

/// Extended Potion of Sons of Svanir Slaying
pub type ExtendedPotionOfSonsOfSvanirSlaying = NoUtility;

/// Extended Potion of Undead Slaying
pub type ExtendedPotionOfUndeadSlaying = NoUtility;

/// Flask of Pumpkin Oil
pub type FlaskOfPumpkinOil = NoUtility;

/// Furious Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FuriousMaintenanceOil;
#[allow(unused_variables)]
impl Effect for FuriousMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.precision * 0.03;
        s.healing_power += s.precision * 0.03;
    }
}
impl FuriousMaintenanceOil {
    pub fn display_name(&self) -> &'static str {
        "Furious Maintenance Oil"
    }
}

/// Furious Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FuriousSharpeningStone;
#[allow(unused_variables)]
impl Effect for FuriousSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += s.precision * 0.03;
        s.power += s.precision * 0.03;
    }
}
impl FuriousSharpeningStone {
    pub fn display_name(&self) -> &'static str {
        "Furious Sharpening Stone"
    }
}

/// Furious Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FuriousTuningCrystal;
#[allow(unused_variables)]
impl Effect for FuriousTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.precision * 0.03;
        s.expertise += s.precision * 0.03;
    }
}
impl FuriousTuningCrystal {
    pub fn display_name(&self) -> &'static str {
        "Furious Tuning Crystal"
    }
}

/// Holographic Super Apple
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HolographicSuperApple;
#[allow(unused_variables)]
impl Effect for HolographicSuperApple {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.concentration * 0.08;
        s.concentration += s.precision * 0.03;
    }
}
impl HolographicSuperApple {
    pub fn display_name(&self) -> &'static str {
        "Holographic Super Apple"
    }
}

/// Holographic Super Cheese
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HolographicSuperCheese;
#[allow(unused_variables)]
impl Effect for HolographicSuperCheese {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.concentration * 0.08;
        s.concentration += s.precision * 0.03;
    }
}
impl HolographicSuperCheese {
    pub fn display_name(&self) -> &'static str {
        "Holographic Super Cheese"
    }
}

/// Holographic Super Drumstick
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HolographicSuperDrumstick;
#[allow(unused_variables)]
impl Effect for HolographicSuperDrumstick {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += s.concentration * 0.08;
        s.concentration += s.precision * 0.03;
    }
}
impl HolographicSuperDrumstick {
    pub fn display_name(&self) -> &'static str {
        "Holographic Super Drumstick"
    }
}

/// Hylek Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HylekMaintenanceOil;
#[allow(unused_variables)]
impl Effect for HylekMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (HylekMaintenanceOil): xp_from_kills, 10.0
        // unimplemented (MasterMaintenanceOil): xp_from_kills, 10.0
        // unimplemented (PeppermintOil): karma, 10.0
        // unimplemented (PeppermintOil): xp_from_kills, 10.0
        // unimplemented (PotentMasterMaintenanceOil): xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.healing_power * 0.06;
        s.concentration += s.precision * 0.03;
    }
}
impl HylekMaintenanceOil {
    pub fn display_name(&self) -> &'static str {
        "Hylek Maintenance Oil / Master Maintenance Oil / Peppermint Oil / Potent Master Maintenance Oil"
    }
}

/// Krait Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct KraitTuningCrystal;
#[allow(unused_variables)]
impl Effect for KraitTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (KraitTuningCrystal): xp_from_kills, 10.0
        // unimplemented (MasterTuningCrystal): xp_from_kills, 10.0
        // unimplemented (PotentMasterTuningCrystal): xp_from_kills, 10.0
        // unimplemented (TuningIcicle): karma, 10.0
        // unimplemented (TuningIcicle): xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.expertise * 0.08;
        s.condition_damage += s.precision * 0.03;
    }
}
impl KraitTuningCrystal {
    pub fn display_name(&self) -> &'static str {
        "Krait Tuning Crystal / Master Tuning Crystal / Potent Master Tuning Crystal / Tuning Icicle"
    }
}

/// Lump of Crystallized Nougat
pub type LumpOfCrystallizedNougat = NoUtility;

/// Magnanimous Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MagnanimousMaintenanceOil;
#[allow(unused_variables)]
impl Effect for MagnanimousMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.toughness * 0.03;
        s.concentration += s.vitality * 0.03;
    }
}
impl MagnanimousMaintenanceOil {
    pub fn display_name(&self) -> &'static str {
        "Magnanimous Maintenance Oil"
    }
}

/// Magnanimous Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MagnanimousSharpeningStone;
#[allow(unused_variables)]
impl Effect for MagnanimousSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.toughness * 0.03;
        s.power += s.vitality * 0.03;
    }
}
impl MagnanimousSharpeningStone {
    pub fn display_name(&self) -> &'static str {
        "Magnanimous Sharpening Stone"
    }
}

/// Magnanimous Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MagnanimousTuningCrystal;
#[allow(unused_variables)]
impl Effect for MagnanimousTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.toughness * 0.03;
        s.condition_damage += s.vitality * 0.03;
    }
}
impl MagnanimousTuningCrystal {
    pub fn display_name(&self) -> &'static str {
        "Magnanimous Tuning Crystal"
    }
}

/// Master Maintenance Oil
pub type MasterMaintenanceOil = HylekMaintenanceOil;

/// Master Tuning Crystal
pub type MasterTuningCrystal = KraitTuningCrystal;

/// Ogre Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OgreSharpeningStone;
#[allow(unused_variables)]
impl Effect for OgreSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (OgreSharpeningStone): xp_from_kills, 10.0
        // unimplemented (PotentSuperiorSharpeningStone): xp_from_kills, 10.0
        // unimplemented (SuperiorSharpeningStone): xp_from_kills, 10.0
        // unimplemented (TinOfFruitcake): karma, 10.0
        // unimplemented (TinOfFruitcake): xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.ferocity * 0.06;
        s.power += s.precision * 0.03;
    }
}
impl OgreSharpeningStone {
    pub fn display_name(&self) -> &'static str {
        "Ogre Sharpening Stone / Potent Superior Sharpening Stone / Superior Sharpening Stone / Tin of Fruitcake"
    }
}

/// Peppermint Oil
pub type PeppermintOil = HylekMaintenanceOil;

/// Potent Lucent Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PotentLucentOil;
#[allow(unused_variables)]
impl Effect for PotentLucentOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.power * 0.03;
        s.concentration += s.precision * 0.03;
    }
}
impl PotentLucentOil {
    pub fn display_name(&self) -> &'static str {
        "Potent Lucent Oil"
    }
}

/// Potent Master Maintenance Oil
pub type PotentMasterMaintenanceOil = HylekMaintenanceOil;

/// Potent Master Tuning Crystal
pub type PotentMasterTuningCrystal = KraitTuningCrystal;

/// Potent Superior Sharpening Stone
pub type PotentSuperiorSharpeningStone = OgreSharpeningStone;

/// Potion Of Karka Slaying
pub type PotionOfKarkaSlaying = NoUtility;

/// Potion Of Karka Toughness
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PotionOfKarkaToughness;
#[allow(unused_variables)]
impl Effect for PotionOfKarkaToughness {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 150.0;
    }
}
impl PotionOfKarkaToughness {
    pub fn display_name(&self) -> &'static str {
        "Potion Of Karka Toughness"
    }
}

/// Powerful Potion of Branded Slaying
pub type PowerfulPotionOfBrandedSlaying = NoUtility;

/// Powerful Potion of Centaur Slaying
pub type PowerfulPotionOfCentaurSlaying = NoUtility;

/// Powerful Potion of Demon Slaying
pub type PowerfulPotionOfDemonSlaying = NoUtility;

/// Powerful Potion of Destroyer Slaying
pub type PowerfulPotionOfDestroyerSlaying = NoUtility;

/// Powerful Potion of Dredge Slaying
pub type PowerfulPotionOfDredgeSlaying = NoUtility;

/// Powerful Potion of Elemental Slaying
pub type PowerfulPotionOfElementalSlaying = NoUtility;

/// Powerful Potion of Flame Legion Slaying
pub type PowerfulPotionOfFlameLegionSlaying = NoUtility;

/// Powerful Potion of Grawl Slaying
pub type PowerfulPotionOfGrawlSlaying = NoUtility;

/// Powerful Potion of Halloween Slaying
pub type PowerfulPotionOfHalloweenSlaying = NoUtility;

/// Powerful Potion of Ice Brood Slaying
pub type PowerfulPotionOfIceBroodSlaying = NoUtility;

/// Powerful Potion of Inquest Slaying
pub type PowerfulPotionOfInquestSlaying = NoUtility;

/// Powerful Potion of Krait Slaying
pub type PowerfulPotionOfKraitSlaying = NoUtility;

/// Powerful Potion of Mordrem Slaying
pub type PowerfulPotionOfMordremSlaying = NoUtility;

/// Powerful Potion of Nightmare Court Slaying
pub type PowerfulPotionOfNightmareCourtSlaying = NoUtility;

/// Powerful Potion of Ogre Slaying
pub type PowerfulPotionOfOgreSlaying = NoUtility;

/// Powerful Potion of Outlaw Slaying
pub type PowerfulPotionOfOutlawSlaying = NoUtility;

/// Powerful Potion of Slaying Scarlet's Armies
pub type PowerfulPotionOfSlayingScarletsArmies = NoUtility;

/// Powerful Potion of Sons of Svanir Slaying
pub type PowerfulPotionOfSonsOfSvanirSlaying = NoUtility;

/// Powerful Potion of Undead Slaying
pub type PowerfulPotionOfUndeadSlaying = NoUtility;

/// Sharpening Skull
pub type SharpeningSkull = NoUtility;

/// Superior Sharpening Stone
pub type SuperiorSharpeningStone = OgreSharpeningStone;

/// Thesis on Masterful Accuracy
pub type ThesisOnMasterfulAccuracy = NoUtility;

/// Thesis on Masterful Malice
pub type ThesisOnMasterfulMalice = NoUtility;

/// Thesis on Masterful Strength
pub type ThesisOnMasterfulStrength = NoUtility;

/// Tin of Fruitcake
pub type TinOfFruitcake = OgreSharpeningStone;

/// Toxic Focusing Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ToxicFocusingCrystal;
#[allow(unused_variables)]
impl Effect for ToxicFocusingCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.power * 0.03;
        s.condition_damage += s.precision * 0.03;
    }
}
impl ToxicFocusingCrystal {
    pub fn display_name(&self) -> &'static str {
        "Toxic Focusing Crystal"
    }
}

/// Toxic Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ToxicMaintenanceOil;
#[allow(unused_variables)]
impl Effect for ToxicMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.condition_damage * 0.06;
        s.concentration += s.power * 0.03;
    }
}
impl ToxicMaintenanceOil {
    pub fn display_name(&self) -> &'static str {
        "Toxic Maintenance Oil"
    }
}

/// Toxic Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ToxicSharpeningStone;
#[allow(unused_variables)]
impl Effect for ToxicSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented: xp_from_kills, 10.0
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.condition_damage * 0.06;
        s.power += s.expertise * 0.08;
    }
}
impl ToxicSharpeningStone {
    pub fn display_name(&self) -> &'static str {
        "Toxic Sharpening Stone"
    }
}

/// Tuning Icicle
pub type TuningIcicle = KraitTuningCrystal;

/// Writ of Masterful Accuracy
pub type WritOfMasterfulAccuracy = NoUtility;

/// Writ of Masterful Malice
pub type WritOfMasterfulMalice = NoUtility;

/// Writ of Masterful Strength
pub type WritOfMasterfulStrength = NoUtility;

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
pub enum Utility {
    NoUtility(NoUtility),
    BountifulSharpeningStone(BountifulSharpeningStone),
    BountifulTuningCrystal(BountifulTuningCrystal),
    CorsairMaintenanceOil(CorsairMaintenanceOil),
    CorsairSharpeningStone(CorsairSharpeningStone),
    CorsairTuningCrystal(CorsairTuningCrystal),
    EnhancedLucentOil(EnhancedLucentOil),
    FuriousMaintenanceOil(FuriousMaintenanceOil),
    FuriousSharpeningStone(FuriousSharpeningStone),
    FuriousTuningCrystal(FuriousTuningCrystal),
    HolographicSuperApple(HolographicSuperApple),
    HolographicSuperCheese(HolographicSuperCheese),
    HolographicSuperDrumstick(HolographicSuperDrumstick),
    HylekMaintenanceOil(HylekMaintenanceOil),
    KraitTuningCrystal(KraitTuningCrystal),
    MagnanimousMaintenanceOil(MagnanimousMaintenanceOil),
    MagnanimousSharpeningStone(MagnanimousSharpeningStone),
    MagnanimousTuningCrystal(MagnanimousTuningCrystal),
    OgreSharpeningStone(OgreSharpeningStone),
    PotentLucentOil(PotentLucentOil),
    PotionOfKarkaToughness(PotionOfKarkaToughness),
    ToxicFocusingCrystal(ToxicFocusingCrystal),
    ToxicMaintenanceOil(ToxicMaintenanceOil),
    ToxicSharpeningStone(ToxicSharpeningStone),
}
impl Effect for Utility {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Utility::NoUtility(x) => x.add_permanent(s, m),
            Utility::BountifulSharpeningStone(x) => x.add_permanent(s, m),
            Utility::BountifulTuningCrystal(x) => x.add_permanent(s, m),
            Utility::CorsairMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::CorsairSharpeningStone(x) => x.add_permanent(s, m),
            Utility::CorsairTuningCrystal(x) => x.add_permanent(s, m),
            Utility::EnhancedLucentOil(x) => x.add_permanent(s, m),
            Utility::FuriousMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::FuriousSharpeningStone(x) => x.add_permanent(s, m),
            Utility::FuriousTuningCrystal(x) => x.add_permanent(s, m),
            Utility::HolographicSuperApple(x) => x.add_permanent(s, m),
            Utility::HolographicSuperCheese(x) => x.add_permanent(s, m),
            Utility::HolographicSuperDrumstick(x) => x.add_permanent(s, m),
            Utility::HylekMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::KraitTuningCrystal(x) => x.add_permanent(s, m),
            Utility::MagnanimousMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::MagnanimousSharpeningStone(x) => x.add_permanent(s, m),
            Utility::MagnanimousTuningCrystal(x) => x.add_permanent(s, m),
            Utility::OgreSharpeningStone(x) => x.add_permanent(s, m),
            Utility::PotentLucentOil(x) => x.add_permanent(s, m),
            Utility::PotionOfKarkaToughness(x) => x.add_permanent(s, m),
            Utility::ToxicFocusingCrystal(x) => x.add_permanent(s, m),
            Utility::ToxicMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::ToxicSharpeningStone(x) => x.add_permanent(s, m),
        }
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Utility::NoUtility(x) => x.distribute(s, m),
            Utility::BountifulSharpeningStone(x) => x.distribute(s, m),
            Utility::BountifulTuningCrystal(x) => x.distribute(s, m),
            Utility::CorsairMaintenanceOil(x) => x.distribute(s, m),
            Utility::CorsairSharpeningStone(x) => x.distribute(s, m),
            Utility::CorsairTuningCrystal(x) => x.distribute(s, m),
            Utility::EnhancedLucentOil(x) => x.distribute(s, m),
            Utility::FuriousMaintenanceOil(x) => x.distribute(s, m),
            Utility::FuriousSharpeningStone(x) => x.distribute(s, m),
            Utility::FuriousTuningCrystal(x) => x.distribute(s, m),
            Utility::HolographicSuperApple(x) => x.distribute(s, m),
            Utility::HolographicSuperCheese(x) => x.distribute(s, m),
            Utility::HolographicSuperDrumstick(x) => x.distribute(s, m),
            Utility::HylekMaintenanceOil(x) => x.distribute(s, m),
            Utility::KraitTuningCrystal(x) => x.distribute(s, m),
            Utility::MagnanimousMaintenanceOil(x) => x.distribute(s, m),
            Utility::MagnanimousSharpeningStone(x) => x.distribute(s, m),
            Utility::MagnanimousTuningCrystal(x) => x.distribute(s, m),
            Utility::OgreSharpeningStone(x) => x.distribute(s, m),
            Utility::PotentLucentOil(x) => x.distribute(s, m),
            Utility::PotionOfKarkaToughness(x) => x.distribute(s, m),
            Utility::ToxicFocusingCrystal(x) => x.distribute(s, m),
            Utility::ToxicMaintenanceOil(x) => x.distribute(s, m),
            Utility::ToxicSharpeningStone(x) => x.distribute(s, m),
        }
    }
    fn add_temporary(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Utility::NoUtility(x) => x.add_temporary(s, m),
            Utility::BountifulSharpeningStone(x) => x.add_temporary(s, m),
            Utility::BountifulTuningCrystal(x) => x.add_temporary(s, m),
            Utility::CorsairMaintenanceOil(x) => x.add_temporary(s, m),
            Utility::CorsairSharpeningStone(x) => x.add_temporary(s, m),
            Utility::CorsairTuningCrystal(x) => x.add_temporary(s, m),
            Utility::EnhancedLucentOil(x) => x.add_temporary(s, m),
            Utility::FuriousMaintenanceOil(x) => x.add_temporary(s, m),
            Utility::FuriousSharpeningStone(x) => x.add_temporary(s, m),
            Utility::FuriousTuningCrystal(x) => x.add_temporary(s, m),
            Utility::HolographicSuperApple(x) => x.add_temporary(s, m),
            Utility::HolographicSuperCheese(x) => x.add_temporary(s, m),
            Utility::HolographicSuperDrumstick(x) => x.add_temporary(s, m),
            Utility::HylekMaintenanceOil(x) => x.add_temporary(s, m),
            Utility::KraitTuningCrystal(x) => x.add_temporary(s, m),
            Utility::MagnanimousMaintenanceOil(x) => x.add_temporary(s, m),
            Utility::MagnanimousSharpeningStone(x) => x.add_temporary(s, m),
            Utility::MagnanimousTuningCrystal(x) => x.add_temporary(s, m),
            Utility::OgreSharpeningStone(x) => x.add_temporary(s, m),
            Utility::PotentLucentOil(x) => x.add_temporary(s, m),
            Utility::PotionOfKarkaToughness(x) => x.add_temporary(s, m),
            Utility::ToxicFocusingCrystal(x) => x.add_temporary(s, m),
            Utility::ToxicMaintenanceOil(x) => x.add_temporary(s, m),
            Utility::ToxicSharpeningStone(x) => x.add_temporary(s, m),
        }
    }
}
impl Utility {
    pub const COUNT: usize = 24;
    pub fn from_index(i: usize) -> Utility {
        match i {
            0 => Utility::NoUtility(NoUtility),
            1 => Utility::BountifulSharpeningStone(BountifulSharpeningStone),
            2 => Utility::BountifulTuningCrystal(BountifulTuningCrystal),
            3 => Utility::CorsairMaintenanceOil(CorsairMaintenanceOil),
            4 => Utility::CorsairSharpeningStone(CorsairSharpeningStone),
            5 => Utility::CorsairTuningCrystal(CorsairTuningCrystal),
            6 => Utility::EnhancedLucentOil(EnhancedLucentOil),
            7 => Utility::FuriousMaintenanceOil(FuriousMaintenanceOil),
            8 => Utility::FuriousSharpeningStone(FuriousSharpeningStone),
            9 => Utility::FuriousTuningCrystal(FuriousTuningCrystal),
            10 => Utility::HolographicSuperApple(HolographicSuperApple),
            11 => Utility::HolographicSuperCheese(HolographicSuperCheese),
            12 => Utility::HolographicSuperDrumstick(HolographicSuperDrumstick),
            13 => Utility::HylekMaintenanceOil(HylekMaintenanceOil),
            14 => Utility::KraitTuningCrystal(KraitTuningCrystal),
            15 => Utility::MagnanimousMaintenanceOil(MagnanimousMaintenanceOil),
            16 => Utility::MagnanimousSharpeningStone(MagnanimousSharpeningStone),
            17 => Utility::MagnanimousTuningCrystal(MagnanimousTuningCrystal),
            18 => Utility::OgreSharpeningStone(OgreSharpeningStone),
            19 => Utility::PotentLucentOil(PotentLucentOil),
            20 => Utility::PotionOfKarkaToughness(PotionOfKarkaToughness),
            21 => Utility::ToxicFocusingCrystal(ToxicFocusingCrystal),
            22 => Utility::ToxicMaintenanceOil(ToxicMaintenanceOil),
            23 => Utility::ToxicSharpeningStone(ToxicSharpeningStone),
            _ => panic!("index {} out of range for Utility", i),
        }
    }
    pub fn iter() -> impl Iterator<Item = Utility> {
        (0 .. Utility::COUNT).map(Utility::from_index)
    }
    pub fn display_name(self) -> &'static str {
        match self {
            Utility::NoUtility(x) => x.display_name(),
            Utility::BountifulSharpeningStone(x) => x.display_name(),
            Utility::BountifulTuningCrystal(x) => x.display_name(),
            Utility::CorsairMaintenanceOil(x) => x.display_name(),
            Utility::CorsairSharpeningStone(x) => x.display_name(),
            Utility::CorsairTuningCrystal(x) => x.display_name(),
            Utility::EnhancedLucentOil(x) => x.display_name(),
            Utility::FuriousMaintenanceOil(x) => x.display_name(),
            Utility::FuriousSharpeningStone(x) => x.display_name(),
            Utility::FuriousTuningCrystal(x) => x.display_name(),
            Utility::HolographicSuperApple(x) => x.display_name(),
            Utility::HolographicSuperCheese(x) => x.display_name(),
            Utility::HolographicSuperDrumstick(x) => x.display_name(),
            Utility::HylekMaintenanceOil(x) => x.display_name(),
            Utility::KraitTuningCrystal(x) => x.display_name(),
            Utility::MagnanimousMaintenanceOil(x) => x.display_name(),
            Utility::MagnanimousSharpeningStone(x) => x.display_name(),
            Utility::MagnanimousTuningCrystal(x) => x.display_name(),
            Utility::OgreSharpeningStone(x) => x.display_name(),
            Utility::PotentLucentOil(x) => x.display_name(),
            Utility::PotionOfKarkaToughness(x) => x.display_name(),
            Utility::ToxicFocusingCrystal(x) => x.display_name(),
            Utility::ToxicMaintenanceOil(x) => x.display_name(),
            Utility::ToxicSharpeningStone(x) => x.display_name(),
        }
    }
}
impl From<NoUtility> for Utility {
    fn from(x: NoUtility) -> Utility { Utility::NoUtility(x) }
}
impl From<BountifulSharpeningStone> for Utility {
    fn from(x: BountifulSharpeningStone) -> Utility { Utility::BountifulSharpeningStone(x) }
}
impl From<BountifulTuningCrystal> for Utility {
    fn from(x: BountifulTuningCrystal) -> Utility { Utility::BountifulTuningCrystal(x) }
}
impl From<CorsairMaintenanceOil> for Utility {
    fn from(x: CorsairMaintenanceOil) -> Utility { Utility::CorsairMaintenanceOil(x) }
}
impl From<CorsairSharpeningStone> for Utility {
    fn from(x: CorsairSharpeningStone) -> Utility { Utility::CorsairSharpeningStone(x) }
}
impl From<CorsairTuningCrystal> for Utility {
    fn from(x: CorsairTuningCrystal) -> Utility { Utility::CorsairTuningCrystal(x) }
}
impl From<EnhancedLucentOil> for Utility {
    fn from(x: EnhancedLucentOil) -> Utility { Utility::EnhancedLucentOil(x) }
}
impl From<FuriousMaintenanceOil> for Utility {
    fn from(x: FuriousMaintenanceOil) -> Utility { Utility::FuriousMaintenanceOil(x) }
}
impl From<FuriousSharpeningStone> for Utility {
    fn from(x: FuriousSharpeningStone) -> Utility { Utility::FuriousSharpeningStone(x) }
}
impl From<FuriousTuningCrystal> for Utility {
    fn from(x: FuriousTuningCrystal) -> Utility { Utility::FuriousTuningCrystal(x) }
}
impl From<HolographicSuperApple> for Utility {
    fn from(x: HolographicSuperApple) -> Utility { Utility::HolographicSuperApple(x) }
}
impl From<HolographicSuperCheese> for Utility {
    fn from(x: HolographicSuperCheese) -> Utility { Utility::HolographicSuperCheese(x) }
}
impl From<HolographicSuperDrumstick> for Utility {
    fn from(x: HolographicSuperDrumstick) -> Utility { Utility::HolographicSuperDrumstick(x) }
}
impl From<HylekMaintenanceOil> for Utility {
    fn from(x: HylekMaintenanceOil) -> Utility { Utility::HylekMaintenanceOil(x) }
}
impl From<KraitTuningCrystal> for Utility {
    fn from(x: KraitTuningCrystal) -> Utility { Utility::KraitTuningCrystal(x) }
}
impl From<MagnanimousMaintenanceOil> for Utility {
    fn from(x: MagnanimousMaintenanceOil) -> Utility { Utility::MagnanimousMaintenanceOil(x) }
}
impl From<MagnanimousSharpeningStone> for Utility {
    fn from(x: MagnanimousSharpeningStone) -> Utility { Utility::MagnanimousSharpeningStone(x) }
}
impl From<MagnanimousTuningCrystal> for Utility {
    fn from(x: MagnanimousTuningCrystal) -> Utility { Utility::MagnanimousTuningCrystal(x) }
}
impl From<OgreSharpeningStone> for Utility {
    fn from(x: OgreSharpeningStone) -> Utility { Utility::OgreSharpeningStone(x) }
}
impl From<PotentLucentOil> for Utility {
    fn from(x: PotentLucentOil) -> Utility { Utility::PotentLucentOil(x) }
}
impl From<PotionOfKarkaToughness> for Utility {
    fn from(x: PotionOfKarkaToughness) -> Utility { Utility::PotionOfKarkaToughness(x) }
}
impl From<ToxicFocusingCrystal> for Utility {
    fn from(x: ToxicFocusingCrystal) -> Utility { Utility::ToxicFocusingCrystal(x) }
}
impl From<ToxicMaintenanceOil> for Utility {
    fn from(x: ToxicMaintenanceOil) -> Utility { Utility::ToxicMaintenanceOil(x) }
}
impl From<ToxicSharpeningStone> for Utility {
    fn from(x: ToxicSharpeningStone) -> Utility { Utility::ToxicSharpeningStone(x) }
}

// END GENERATED CODE
