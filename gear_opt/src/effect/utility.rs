use crate::effect::Effect;
use crate::stats::{Stats, Modifiers};

// BEGIN GENERATED CODE
// Generated by gen_gear_tables.py for GW2 build 142239 at 2023-03-06T15:14:28

/// Bountiful Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BountifulMaintenanceOil;
#[allow(unused_variables)]
impl Effect for BountifulMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain 0.6% increased healing to other allies for every 100 healing power'
        // unknown effect: 'gain 0.8% increased healing to other allies for every 100 concentration'
        // +10.0 experience from kills
    }
}

/// Bountiful Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BountifulSharpeningStone;
#[allow(unused_variables)]
impl Effect for BountifulSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.healing_power * 0.06;
        s.power += s.concentration * 0.08;
    }
}

/// Bountiful Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BountifulTuningCrystal;
#[allow(unused_variables)]
impl Effect for BountifulTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.healing_power * 0.06;
        s.condition_damage += s.concentration * 0.08;
    }
}

/// Corsair Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CorsairMaintenanceOil;
#[allow(unused_variables)]
impl Effect for CorsairMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.toughness * 0.03;
        s.expertise += s.toughness * 0.03;
    }
}

/// Corsair Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CorsairSharpeningStone;
#[allow(unused_variables)]
impl Effect for CorsairSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.toughness * 0.03;
        s.expertise += s.toughness * 0.03;
    }
}

/// Corsair Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CorsairTuningCrystal;
#[allow(unused_variables)]
impl Effect for CorsairTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.toughness * 0.03;
        s.expertise += s.toughness * 0.03;
    }
}

/// Dragon Crystal Potion
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DragonCrystalPotion;
#[allow(unused_variables)]
impl Effect for DragonCrystalPotion {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% increased damage to branded foes in thunderhead peaks'
        // +10.0 experience from kills
    }
}

/// Enhanced Lucent Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct EnhancedLucentOil;
#[allow(unused_variables)]
impl Effect for EnhancedLucentOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.condition_damage * 0.06;
        s.concentration += s.precision * 0.03;
    }
}

/// Extended Potion of Dredge Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfDredgeSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfDredgeSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. dredge'
        // unknown effect: '-10% damage from dredge'
        // +10.0 experience from kills
    }
}

/// Extended Potion of Flame Legion Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfFlameLegionSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfFlameLegionSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. flame legion'
        // unknown effect: '-10% damage from flame legion'
        // +10.0 experience from kills
    }
}

/// Extended Potion of Ghost Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfGhostSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfGhostSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. ghosts'
        // unknown effect: '-10% damage from ghosts'
        // +10.0 experience from kills
    }
}

/// Extended Potion of Inquest Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfInquestSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfInquestSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. inquest'
        // unknown effect: '-10% damage from inquest'
        // +10.0 experience from kills
    }
}

/// Extended Potion of Nightmare Court Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfNightmareCourtSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfNightmareCourtSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. nightmare court'
        // unknown effect: '-10% damage from nightmare court'
        // +10.0 experience from kills
    }
}

/// Extended Potion of Outlaw Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfOutlawSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfOutlawSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. outlaws'
        // unknown effect: '-10% damage from outlaws'
        // +10.0 experience from kills
    }
}

/// Extended Potion of Sons of Svanir Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfSonsOfSvanirSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfSonsOfSvanirSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. sons of svanir'
        // unknown effect: '-10% damage from sons of svanir'
        // +10.0 experience from kills
    }
}

/// Extended Potion of Undead Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExtendedPotionOfUndeadSlaying;
#[allow(unused_variables)]
impl Effect for ExtendedPotionOfUndeadSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. undead'
        // unknown effect: '-10% damage from undead'
        // +10.0 experience from kills
    }
}

/// Flask of Pumpkin Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FlaskOfPumpkinOil;
#[allow(unused_variables)]
impl Effect for FlaskOfPumpkinOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'reviving an ally grants pumpkin prowess to both you and your revived ally'
        // unknown effect: 'pumpkin prowess increases power, toughness, and vitality'
        // +10.0 experience from kills
        // +30.0 magic find
    }
}

/// Furious Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FuriousMaintenanceOil;
#[allow(unused_variables)]
impl Effect for FuriousMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.precision * 0.03;
        s.healing_power += s.precision * 0.03;
    }
}

/// Furious Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FuriousSharpeningStone;
#[allow(unused_variables)]
impl Effect for FuriousSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.precision * 0.03;
        s.ferocity += s.precision * 0.03;
    }
}

/// Furious Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FuriousTuningCrystal;
#[allow(unused_variables)]
impl Effect for FuriousTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.precision * 0.03;
        s.expertise += s.precision * 0.03;
    }
}

/// Holographic Super Apple
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HolographicSuperApple;
#[allow(unused_variables)]
impl Effect for HolographicSuperApple {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.concentration * 0.08;
        s.concentration += s.precision * 0.03;
    }
}

/// Holographic Super Cheese
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HolographicSuperCheese;
#[allow(unused_variables)]
impl Effect for HolographicSuperCheese {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.concentration * 0.08;
        s.concentration += s.precision * 0.03;
    }
}

/// Holographic Super Drumstick
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HolographicSuperDrumstick;
#[allow(unused_variables)]
impl Effect for HolographicSuperDrumstick {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += s.concentration * 0.08;
        s.concentration += s.precision * 0.03;
    }
}

/// Hylek Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HylekMaintenanceOil;
#[allow(unused_variables)]
impl Effect for HylekMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.precision * 0.03;
        s.concentration += s.healing_power * 0.06;
    }
}

/// Krait Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct KraitTuningCrystal;
#[allow(unused_variables)]
impl Effect for KraitTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.precision * 0.03;
        s.condition_damage += s.expertise * 0.08;
    }
}

/// Lump of Crystallized Nougat
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct LumpOfCrystallizedNougat;
#[allow(unused_variables)]
impl Effect for LumpOfCrystallizedNougat {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: "reviving an ally grants ghoul's grasp to both you and your revived ally"
        // unknown effect: "ghoul's grasp increases condition damage, precision, and toughness"
        // +10.0 experience from kills
        // +30.0 magic find
    }
}

/// Magnanimous Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MagnanimousMaintenanceOil;
#[allow(unused_variables)]
impl Effect for MagnanimousMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.vitality * 0.03;
        s.concentration += s.toughness * 0.03;
    }
}

/// Magnanimous Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MagnanimousSharpeningStone;
#[allow(unused_variables)]
impl Effect for MagnanimousSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.vitality * 0.03;
        s.power += s.toughness * 0.03;
    }
}

/// Magnanimous Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MagnanimousTuningCrystal;
#[allow(unused_variables)]
impl Effect for MagnanimousTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.vitality * 0.03;
        s.condition_damage += s.toughness * 0.03;
    }
}

/// Master Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MasterMaintenanceOil;
#[allow(unused_variables)]
impl Effect for MasterMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.precision * 0.03;
        s.concentration += s.healing_power * 0.06;
    }
}

/// Master Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MasterTuningCrystal;
#[allow(unused_variables)]
impl Effect for MasterTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.precision * 0.03;
        s.condition_damage += s.expertise * 0.08;
    }
}

/// Ogre Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OgreSharpeningStone;
#[allow(unused_variables)]
impl Effect for OgreSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.precision * 0.03;
        s.power += s.ferocity * 0.06;
    }
}

/// Peppermint Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PeppermintOil;
#[allow(unused_variables)]
impl Effect for PeppermintOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
        // +10.0 karma
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.precision * 0.03;
        s.concentration += s.healing_power * 0.06;
    }
}

/// Potent Lucent Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PotentLucentOil;
#[allow(unused_variables)]
impl Effect for PotentLucentOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.power * 0.03;
        s.concentration += s.precision * 0.03;
    }
}

/// Potent Master Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PotentMasterMaintenanceOil;
#[allow(unused_variables)]
impl Effect for PotentMasterMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.precision * 0.03;
        s.concentration += s.healing_power * 0.06;
    }
}

/// Potent Master Tuning Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PotentMasterTuningCrystal;
#[allow(unused_variables)]
impl Effect for PotentMasterTuningCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.precision * 0.03;
        s.condition_damage += s.expertise * 0.08;
    }
}

/// Potent Superior Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PotentSuperiorSharpeningStone;
#[allow(unused_variables)]
impl Effect for PotentSuperiorSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.precision * 0.03;
        s.power += s.ferocity * 0.06;
    }
}

/// Potion Of Karka Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PotionOfKarkaSlaying;
#[allow(unused_variables)]
impl Effect for PotionOfKarkaSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+8% damage vs. karka'
        // unknown effect: '-6% damage from karka'
        // +10.0 experience from kills
    }
}

/// Potion Of Karka Toughness
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PotionOfKarkaToughness;
#[allow(unused_variables)]
impl Effect for PotionOfKarkaToughness {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 150.0;
    }
}

/// Powerful Potion of Branded Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfBrandedSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfBrandedSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. branded'
        // unknown effect: '-10% damage from branded'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Centaur Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfCentaurSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfCentaurSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. centaur'
        // unknown effect: '-10% damage from centaur'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Demon Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfDemonSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfDemonSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. demons'
        // unknown effect: '-10% damage from demons'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Destroyer Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfDestroyerSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfDestroyerSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. destroyers'
        // unknown effect: '-10% damage from destroyers'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Dredge Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfDredgeSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfDredgeSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. dredge'
        // unknown effect: '-10% damage from dredge'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Elemental Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfElementalSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfElementalSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. elementals'
        // unknown effect: '-10% damage from elementals'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Flame Legion Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfFlameLegionSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfFlameLegionSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. flame legion'
        // unknown effect: '-10% damage from flame legion'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Grawl Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfGrawlSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfGrawlSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. grawl'
        // unknown effect: '-10% damage from grawl'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Halloween Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfHalloweenSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfHalloweenSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. halloween creatures'
        // unknown effect: '-10% damage from halloween creatures'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Ice Brood Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfIceBroodSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfIceBroodSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. ice brood'
        // unknown effect: '-10% damage from ice brood'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Inquest Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfInquestSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfInquestSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. inquest'
        // unknown effect: '-10% damage from inquest'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Krait Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfKraitSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfKraitSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. krait'
        // unknown effect: '-10% damage from krait'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Mordrem Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfMordremSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfMordremSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. mordrem'
        // unknown effect: '-10% damage from mordrem'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Nightmare Court Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfNightmareCourtSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfNightmareCourtSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. nightmare court'
        // unknown effect: '-10% damage from nightmare court'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Ogre Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfOgreSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfOgreSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. ogres'
        // unknown effect: '-10% damage from ogres'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Outlaw Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfOutlawSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfOutlawSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. outlaws'
        // unknown effect: '-10% damage from outlaws'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Slaying Scarlet's Armies
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfSlayingScarletsArmies;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfSlayingScarletsArmies {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. toxic alliance, watchwork, aetherblade, and molten alliance'
        // unknown effect: '-10% damage from toxic alliance, watchwork, aetherblade, and molten alliance'
        // +15.0 experience from kills
    }
}

/// Powerful Potion of Sons of Svanir Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfSonsOfSvanirSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfSonsOfSvanirSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. sons of svanir'
        // unknown effect: '-10% damage from sons of svanir'
        // +10.0 experience from kills
    }
}

/// Powerful Potion of Undead Slaying
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PowerfulPotionOfUndeadSlaying;
#[allow(unused_variables)]
impl Effect for PowerfulPotionOfUndeadSlaying {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+10% damage vs. undead'
        // unknown effect: '-10% damage from undead'
        // +10.0 experience from kills
    }
}

/// Sharpening Skull
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SharpeningSkull;
#[allow(unused_variables)]
impl Effect for SharpeningSkull {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'reviving an ally grants feline fury to both you and your revived ally'
        // unknown effect: 'feline fury increases all attributes by a small amount'
        // +10.0 experience from kills
        // +30.0 magic find
    }
}

/// Superior Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SuperiorSharpeningStone;
#[allow(unused_variables)]
impl Effect for SuperiorSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.precision * 0.03;
        s.power += s.ferocity * 0.06;
    }
}

/// Thesis on Masterful Accuracy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ThesisOnMasterfulAccuracy;
#[allow(unused_variables)]
impl Effect for ThesisOnMasterfulAccuracy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain 200 precision when health above 90%'
        // +10.0 experience from kills
    }
}

/// Thesis on Masterful Malice
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ThesisOnMasterfulMalice;
#[allow(unused_variables)]
impl Effect for ThesisOnMasterfulMalice {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain 200 condition damage when health is above 90%'
        // +10.0 experience from kills
    }
}

/// Thesis on Masterful Strength
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ThesisOnMasterfulStrength;
#[allow(unused_variables)]
impl Effect for ThesisOnMasterfulStrength {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain 200 power when health above 90%'
        // +10.0 experience from kills
    }
}

/// Tin of Fruitcake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TinOfFruitcake;
#[allow(unused_variables)]
impl Effect for TinOfFruitcake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
        // +10.0 karma
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.precision * 0.03;
        s.power += s.ferocity * 0.06;
    }
}

/// Toxic Focusing Crystal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ToxicFocusingCrystal;
#[allow(unused_variables)]
impl Effect for ToxicFocusingCrystal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.power * 0.03;
        s.condition_damage += s.precision * 0.03;
    }
}

/// Toxic Maintenance Oil
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ToxicMaintenanceOil;
#[allow(unused_variables)]
impl Effect for ToxicMaintenanceOil {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += s.power * 0.03;
        s.concentration += s.condition_damage * 0.06;
    }
}

/// Toxic Sharpening Stone
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ToxicSharpeningStone;
#[allow(unused_variables)]
impl Effect for ToxicSharpeningStone {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += s.condition_damage * 0.06;
        s.power += s.expertise * 0.08;
    }
}

/// Tuning Icicle
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TuningIcicle;
#[allow(unused_variables)]
impl Effect for TuningIcicle {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +10.0 experience from kills
        // +10.0 karma
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += s.precision * 0.03;
        s.condition_damage += s.expertise * 0.08;
    }
}

/// Writ of Masterful Accuracy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct WritOfMasterfulAccuracy;
#[allow(unused_variables)]
impl Effect for WritOfMasterfulAccuracy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain 200 precision when health above 90%'
        // +10.0 experience from kills
    }
}

/// Writ of Masterful Malice
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct WritOfMasterfulMalice;
#[allow(unused_variables)]
impl Effect for WritOfMasterfulMalice {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain 200 condition damage when health is above 90%'
        // +10.0 experience from kills
    }
}

/// Writ of Masterful Strength
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct WritOfMasterfulStrength;
#[allow(unused_variables)]
impl Effect for WritOfMasterfulStrength {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain 200 power when health above 90%'
        // +10.0 experience from kills
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
pub enum Utility {
    ToxicFocusingCrystal(ToxicFocusingCrystal),
    WritOfMasterfulAccuracy(WritOfMasterfulAccuracy),
    MasterMaintenanceOil(MasterMaintenanceOil),
    ExtendedPotionOfDredgeSlaying(ExtendedPotionOfDredgeSlaying),
    PowerfulPotionOfInquestSlaying(PowerfulPotionOfInquestSlaying),
    FuriousMaintenanceOil(FuriousMaintenanceOil),
    ExtendedPotionOfSonsOfSvanirSlaying(ExtendedPotionOfSonsOfSvanirSlaying),
    MasterTuningCrystal(MasterTuningCrystal),
    PowerfulPotionOfDestroyerSlaying(PowerfulPotionOfDestroyerSlaying),
    ThesisOnMasterfulAccuracy(ThesisOnMasterfulAccuracy),
    PowerfulPotionOfFlameLegionSlaying(PowerfulPotionOfFlameLegionSlaying),
    TinOfFruitcake(TinOfFruitcake),
    HylekMaintenanceOil(HylekMaintenanceOil),
    PowerfulPotionOfMordremSlaying(PowerfulPotionOfMordremSlaying),
    BountifulTuningCrystal(BountifulTuningCrystal),
    SharpeningSkull(SharpeningSkull),
    BountifulMaintenanceOil(BountifulMaintenanceOil),
    PotentSuperiorSharpeningStone(PotentSuperiorSharpeningStone),
    ExtendedPotionOfNightmareCourtSlaying(ExtendedPotionOfNightmareCourtSlaying),
    PowerfulPotionOfElementalSlaying(PowerfulPotionOfElementalSlaying),
    HolographicSuperDrumstick(HolographicSuperDrumstick),
    MagnanimousSharpeningStone(MagnanimousSharpeningStone),
    SuperiorSharpeningStone(SuperiorSharpeningStone),
    PowerfulPotionOfCentaurSlaying(PowerfulPotionOfCentaurSlaying),
    MagnanimousTuningCrystal(MagnanimousTuningCrystal),
    TuningIcicle(TuningIcicle),
    DragonCrystalPotion(DragonCrystalPotion),
    PowerfulPotionOfNightmareCourtSlaying(PowerfulPotionOfNightmareCourtSlaying),
    PowerfulPotionOfOgreSlaying(PowerfulPotionOfOgreSlaying),
    ThesisOnMasterfulStrength(ThesisOnMasterfulStrength),
    BountifulSharpeningStone(BountifulSharpeningStone),
    FuriousTuningCrystal(FuriousTuningCrystal),
    ToxicSharpeningStone(ToxicSharpeningStone),
    LumpOfCrystallizedNougat(LumpOfCrystallizedNougat),
    ExtendedPotionOfInquestSlaying(ExtendedPotionOfInquestSlaying),
    FuriousSharpeningStone(FuriousSharpeningStone),
    OgreSharpeningStone(OgreSharpeningStone),
    HolographicSuperApple(HolographicSuperApple),
    CorsairMaintenanceOil(CorsairMaintenanceOil),
    WritOfMasterfulStrength(WritOfMasterfulStrength),
    PotentLucentOil(PotentLucentOil),
    PowerfulPotionOfDemonSlaying(PowerfulPotionOfDemonSlaying),
    ExtendedPotionOfFlameLegionSlaying(ExtendedPotionOfFlameLegionSlaying),
    HolographicSuperCheese(HolographicSuperCheese),
    PowerfulPotionOfUndeadSlaying(PowerfulPotionOfUndeadSlaying),
    ToxicMaintenanceOil(ToxicMaintenanceOil),
    EnhancedLucentOil(EnhancedLucentOil),
    WritOfMasterfulMalice(WritOfMasterfulMalice),
    ExtendedPotionOfOutlawSlaying(ExtendedPotionOfOutlawSlaying),
    PowerfulPotionOfKraitSlaying(PowerfulPotionOfKraitSlaying),
    PowerfulPotionOfDredgeSlaying(PowerfulPotionOfDredgeSlaying),
    CorsairTuningCrystal(CorsairTuningCrystal),
    PotentMasterTuningCrystal(PotentMasterTuningCrystal),
    PowerfulPotionOfGrawlSlaying(PowerfulPotionOfGrawlSlaying),
    PowerfulPotionOfIceBroodSlaying(PowerfulPotionOfIceBroodSlaying),
    PowerfulPotionOfOutlawSlaying(PowerfulPotionOfOutlawSlaying),
    PowerfulPotionOfSonsOfSvanirSlaying(PowerfulPotionOfSonsOfSvanirSlaying),
    ExtendedPotionOfGhostSlaying(ExtendedPotionOfGhostSlaying),
    PotionOfKarkaToughness(PotionOfKarkaToughness),
    MagnanimousMaintenanceOil(MagnanimousMaintenanceOil),
    PotionOfKarkaSlaying(PotionOfKarkaSlaying),
    KraitTuningCrystal(KraitTuningCrystal),
    FlaskOfPumpkinOil(FlaskOfPumpkinOil),
    ThesisOnMasterfulMalice(ThesisOnMasterfulMalice),
    PotentMasterMaintenanceOil(PotentMasterMaintenanceOil),
    PowerfulPotionOfHalloweenSlaying(PowerfulPotionOfHalloweenSlaying),
    ExtendedPotionOfUndeadSlaying(ExtendedPotionOfUndeadSlaying),
    PowerfulPotionOfBrandedSlaying(PowerfulPotionOfBrandedSlaying),
    PeppermintOil(PeppermintOil),
    CorsairSharpeningStone(CorsairSharpeningStone),
    PowerfulPotionOfSlayingScarletsArmies(PowerfulPotionOfSlayingScarletsArmies),
}
impl Effect for Utility {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Utility::ToxicFocusingCrystal(x) => x.add_permanent(s, m),
            Utility::WritOfMasterfulAccuracy(x) => x.add_permanent(s, m),
            Utility::MasterMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfDredgeSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfInquestSlaying(x) => x.add_permanent(s, m),
            Utility::FuriousMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfSonsOfSvanirSlaying(x) => x.add_permanent(s, m),
            Utility::MasterTuningCrystal(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfDestroyerSlaying(x) => x.add_permanent(s, m),
            Utility::ThesisOnMasterfulAccuracy(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfFlameLegionSlaying(x) => x.add_permanent(s, m),
            Utility::TinOfFruitcake(x) => x.add_permanent(s, m),
            Utility::HylekMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfMordremSlaying(x) => x.add_permanent(s, m),
            Utility::BountifulTuningCrystal(x) => x.add_permanent(s, m),
            Utility::SharpeningSkull(x) => x.add_permanent(s, m),
            Utility::BountifulMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::PotentSuperiorSharpeningStone(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfNightmareCourtSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfElementalSlaying(x) => x.add_permanent(s, m),
            Utility::HolographicSuperDrumstick(x) => x.add_permanent(s, m),
            Utility::MagnanimousSharpeningStone(x) => x.add_permanent(s, m),
            Utility::SuperiorSharpeningStone(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfCentaurSlaying(x) => x.add_permanent(s, m),
            Utility::MagnanimousTuningCrystal(x) => x.add_permanent(s, m),
            Utility::TuningIcicle(x) => x.add_permanent(s, m),
            Utility::DragonCrystalPotion(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfNightmareCourtSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfOgreSlaying(x) => x.add_permanent(s, m),
            Utility::ThesisOnMasterfulStrength(x) => x.add_permanent(s, m),
            Utility::BountifulSharpeningStone(x) => x.add_permanent(s, m),
            Utility::FuriousTuningCrystal(x) => x.add_permanent(s, m),
            Utility::ToxicSharpeningStone(x) => x.add_permanent(s, m),
            Utility::LumpOfCrystallizedNougat(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfInquestSlaying(x) => x.add_permanent(s, m),
            Utility::FuriousSharpeningStone(x) => x.add_permanent(s, m),
            Utility::OgreSharpeningStone(x) => x.add_permanent(s, m),
            Utility::HolographicSuperApple(x) => x.add_permanent(s, m),
            Utility::CorsairMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::WritOfMasterfulStrength(x) => x.add_permanent(s, m),
            Utility::PotentLucentOil(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfDemonSlaying(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfFlameLegionSlaying(x) => x.add_permanent(s, m),
            Utility::HolographicSuperCheese(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfUndeadSlaying(x) => x.add_permanent(s, m),
            Utility::ToxicMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::EnhancedLucentOil(x) => x.add_permanent(s, m),
            Utility::WritOfMasterfulMalice(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfOutlawSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfKraitSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfDredgeSlaying(x) => x.add_permanent(s, m),
            Utility::CorsairTuningCrystal(x) => x.add_permanent(s, m),
            Utility::PotentMasterTuningCrystal(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfGrawlSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfIceBroodSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfOutlawSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfSonsOfSvanirSlaying(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfGhostSlaying(x) => x.add_permanent(s, m),
            Utility::PotionOfKarkaToughness(x) => x.add_permanent(s, m),
            Utility::MagnanimousMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::PotionOfKarkaSlaying(x) => x.add_permanent(s, m),
            Utility::KraitTuningCrystal(x) => x.add_permanent(s, m),
            Utility::FlaskOfPumpkinOil(x) => x.add_permanent(s, m),
            Utility::ThesisOnMasterfulMalice(x) => x.add_permanent(s, m),
            Utility::PotentMasterMaintenanceOil(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfHalloweenSlaying(x) => x.add_permanent(s, m),
            Utility::ExtendedPotionOfUndeadSlaying(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfBrandedSlaying(x) => x.add_permanent(s, m),
            Utility::PeppermintOil(x) => x.add_permanent(s, m),
            Utility::CorsairSharpeningStone(x) => x.add_permanent(s, m),
            Utility::PowerfulPotionOfSlayingScarletsArmies(x) => x.add_permanent(s, m),
        }
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Utility::ToxicFocusingCrystal(x) => x.distribute(s, m),
            Utility::WritOfMasterfulAccuracy(x) => x.distribute(s, m),
            Utility::MasterMaintenanceOil(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfDredgeSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfInquestSlaying(x) => x.distribute(s, m),
            Utility::FuriousMaintenanceOil(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfSonsOfSvanirSlaying(x) => x.distribute(s, m),
            Utility::MasterTuningCrystal(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfDestroyerSlaying(x) => x.distribute(s, m),
            Utility::ThesisOnMasterfulAccuracy(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfFlameLegionSlaying(x) => x.distribute(s, m),
            Utility::TinOfFruitcake(x) => x.distribute(s, m),
            Utility::HylekMaintenanceOil(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfMordremSlaying(x) => x.distribute(s, m),
            Utility::BountifulTuningCrystal(x) => x.distribute(s, m),
            Utility::SharpeningSkull(x) => x.distribute(s, m),
            Utility::BountifulMaintenanceOil(x) => x.distribute(s, m),
            Utility::PotentSuperiorSharpeningStone(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfNightmareCourtSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfElementalSlaying(x) => x.distribute(s, m),
            Utility::HolographicSuperDrumstick(x) => x.distribute(s, m),
            Utility::MagnanimousSharpeningStone(x) => x.distribute(s, m),
            Utility::SuperiorSharpeningStone(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfCentaurSlaying(x) => x.distribute(s, m),
            Utility::MagnanimousTuningCrystal(x) => x.distribute(s, m),
            Utility::TuningIcicle(x) => x.distribute(s, m),
            Utility::DragonCrystalPotion(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfNightmareCourtSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfOgreSlaying(x) => x.distribute(s, m),
            Utility::ThesisOnMasterfulStrength(x) => x.distribute(s, m),
            Utility::BountifulSharpeningStone(x) => x.distribute(s, m),
            Utility::FuriousTuningCrystal(x) => x.distribute(s, m),
            Utility::ToxicSharpeningStone(x) => x.distribute(s, m),
            Utility::LumpOfCrystallizedNougat(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfInquestSlaying(x) => x.distribute(s, m),
            Utility::FuriousSharpeningStone(x) => x.distribute(s, m),
            Utility::OgreSharpeningStone(x) => x.distribute(s, m),
            Utility::HolographicSuperApple(x) => x.distribute(s, m),
            Utility::CorsairMaintenanceOil(x) => x.distribute(s, m),
            Utility::WritOfMasterfulStrength(x) => x.distribute(s, m),
            Utility::PotentLucentOil(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfDemonSlaying(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfFlameLegionSlaying(x) => x.distribute(s, m),
            Utility::HolographicSuperCheese(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfUndeadSlaying(x) => x.distribute(s, m),
            Utility::ToxicMaintenanceOil(x) => x.distribute(s, m),
            Utility::EnhancedLucentOil(x) => x.distribute(s, m),
            Utility::WritOfMasterfulMalice(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfOutlawSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfKraitSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfDredgeSlaying(x) => x.distribute(s, m),
            Utility::CorsairTuningCrystal(x) => x.distribute(s, m),
            Utility::PotentMasterTuningCrystal(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfGrawlSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfIceBroodSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfOutlawSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfSonsOfSvanirSlaying(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfGhostSlaying(x) => x.distribute(s, m),
            Utility::PotionOfKarkaToughness(x) => x.distribute(s, m),
            Utility::MagnanimousMaintenanceOil(x) => x.distribute(s, m),
            Utility::PotionOfKarkaSlaying(x) => x.distribute(s, m),
            Utility::KraitTuningCrystal(x) => x.distribute(s, m),
            Utility::FlaskOfPumpkinOil(x) => x.distribute(s, m),
            Utility::ThesisOnMasterfulMalice(x) => x.distribute(s, m),
            Utility::PotentMasterMaintenanceOil(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfHalloweenSlaying(x) => x.distribute(s, m),
            Utility::ExtendedPotionOfUndeadSlaying(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfBrandedSlaying(x) => x.distribute(s, m),
            Utility::PeppermintOil(x) => x.distribute(s, m),
            Utility::CorsairSharpeningStone(x) => x.distribute(s, m),
            Utility::PowerfulPotionOfSlayingScarletsArmies(x) => x.distribute(s, m),
        }
    }
    fn add_temporary(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Utility::ToxicFocusingCrystal(x) => x.add_temporary(s, m),
            Utility::WritOfMasterfulAccuracy(x) => x.add_temporary(s, m),
            Utility::MasterMaintenanceOil(x) => x.add_temporary(s, m),
            Utility::ExtendedPotionOfDredgeSlaying(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfInquestSlaying(x) => x.add_temporary(s, m),
            Utility::FuriousMaintenanceOil(x) => x.add_temporary(s, m),
            Utility::ExtendedPotionOfSonsOfSvanirSlaying(x) => x.add_temporary(s, m),
            Utility::MasterTuningCrystal(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfDestroyerSlaying(x) => x.add_temporary(s, m),
            Utility::ThesisOnMasterfulAccuracy(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfFlameLegionSlaying(x) => x.add_temporary(s, m),
            Utility::TinOfFruitcake(x) => x.add_temporary(s, m),
            Utility::HylekMaintenanceOil(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfMordremSlaying(x) => x.add_temporary(s, m),
            Utility::BountifulTuningCrystal(x) => x.add_temporary(s, m),
            Utility::SharpeningSkull(x) => x.add_temporary(s, m),
            Utility::BountifulMaintenanceOil(x) => x.add_temporary(s, m),
            Utility::PotentSuperiorSharpeningStone(x) => x.add_temporary(s, m),
            Utility::ExtendedPotionOfNightmareCourtSlaying(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfElementalSlaying(x) => x.add_temporary(s, m),
            Utility::HolographicSuperDrumstick(x) => x.add_temporary(s, m),
            Utility::MagnanimousSharpeningStone(x) => x.add_temporary(s, m),
            Utility::SuperiorSharpeningStone(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfCentaurSlaying(x) => x.add_temporary(s, m),
            Utility::MagnanimousTuningCrystal(x) => x.add_temporary(s, m),
            Utility::TuningIcicle(x) => x.add_temporary(s, m),
            Utility::DragonCrystalPotion(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfNightmareCourtSlaying(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfOgreSlaying(x) => x.add_temporary(s, m),
            Utility::ThesisOnMasterfulStrength(x) => x.add_temporary(s, m),
            Utility::BountifulSharpeningStone(x) => x.add_temporary(s, m),
            Utility::FuriousTuningCrystal(x) => x.add_temporary(s, m),
            Utility::ToxicSharpeningStone(x) => x.add_temporary(s, m),
            Utility::LumpOfCrystallizedNougat(x) => x.add_temporary(s, m),
            Utility::ExtendedPotionOfInquestSlaying(x) => x.add_temporary(s, m),
            Utility::FuriousSharpeningStone(x) => x.add_temporary(s, m),
            Utility::OgreSharpeningStone(x) => x.add_temporary(s, m),
            Utility::HolographicSuperApple(x) => x.add_temporary(s, m),
            Utility::CorsairMaintenanceOil(x) => x.add_temporary(s, m),
            Utility::WritOfMasterfulStrength(x) => x.add_temporary(s, m),
            Utility::PotentLucentOil(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfDemonSlaying(x) => x.add_temporary(s, m),
            Utility::ExtendedPotionOfFlameLegionSlaying(x) => x.add_temporary(s, m),
            Utility::HolographicSuperCheese(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfUndeadSlaying(x) => x.add_temporary(s, m),
            Utility::ToxicMaintenanceOil(x) => x.add_temporary(s, m),
            Utility::EnhancedLucentOil(x) => x.add_temporary(s, m),
            Utility::WritOfMasterfulMalice(x) => x.add_temporary(s, m),
            Utility::ExtendedPotionOfOutlawSlaying(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfKraitSlaying(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfDredgeSlaying(x) => x.add_temporary(s, m),
            Utility::CorsairTuningCrystal(x) => x.add_temporary(s, m),
            Utility::PotentMasterTuningCrystal(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfGrawlSlaying(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfIceBroodSlaying(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfOutlawSlaying(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfSonsOfSvanirSlaying(x) => x.add_temporary(s, m),
            Utility::ExtendedPotionOfGhostSlaying(x) => x.add_temporary(s, m),
            Utility::PotionOfKarkaToughness(x) => x.add_temporary(s, m),
            Utility::MagnanimousMaintenanceOil(x) => x.add_temporary(s, m),
            Utility::PotionOfKarkaSlaying(x) => x.add_temporary(s, m),
            Utility::KraitTuningCrystal(x) => x.add_temporary(s, m),
            Utility::FlaskOfPumpkinOil(x) => x.add_temporary(s, m),
            Utility::ThesisOnMasterfulMalice(x) => x.add_temporary(s, m),
            Utility::PotentMasterMaintenanceOil(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfHalloweenSlaying(x) => x.add_temporary(s, m),
            Utility::ExtendedPotionOfUndeadSlaying(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfBrandedSlaying(x) => x.add_temporary(s, m),
            Utility::PeppermintOil(x) => x.add_temporary(s, m),
            Utility::CorsairSharpeningStone(x) => x.add_temporary(s, m),
            Utility::PowerfulPotionOfSlayingScarletsArmies(x) => x.add_temporary(s, m),
        }
    }
}
impl Utility {
    pub const COUNT: usize = 71;
    pub fn from_index(i: usize) -> Utility {
        match i {
            0 => Utility::ToxicFocusingCrystal(ToxicFocusingCrystal),
            1 => Utility::WritOfMasterfulAccuracy(WritOfMasterfulAccuracy),
            2 => Utility::MasterMaintenanceOil(MasterMaintenanceOil),
            3 => Utility::ExtendedPotionOfDredgeSlaying(ExtendedPotionOfDredgeSlaying),
            4 => Utility::PowerfulPotionOfInquestSlaying(PowerfulPotionOfInquestSlaying),
            5 => Utility::FuriousMaintenanceOil(FuriousMaintenanceOil),
            6 => Utility::ExtendedPotionOfSonsOfSvanirSlaying(ExtendedPotionOfSonsOfSvanirSlaying),
            7 => Utility::MasterTuningCrystal(MasterTuningCrystal),
            8 => Utility::PowerfulPotionOfDestroyerSlaying(PowerfulPotionOfDestroyerSlaying),
            9 => Utility::ThesisOnMasterfulAccuracy(ThesisOnMasterfulAccuracy),
            10 => Utility::PowerfulPotionOfFlameLegionSlaying(PowerfulPotionOfFlameLegionSlaying),
            11 => Utility::TinOfFruitcake(TinOfFruitcake),
            12 => Utility::HylekMaintenanceOil(HylekMaintenanceOil),
            13 => Utility::PowerfulPotionOfMordremSlaying(PowerfulPotionOfMordremSlaying),
            14 => Utility::BountifulTuningCrystal(BountifulTuningCrystal),
            15 => Utility::SharpeningSkull(SharpeningSkull),
            16 => Utility::BountifulMaintenanceOil(BountifulMaintenanceOil),
            17 => Utility::PotentSuperiorSharpeningStone(PotentSuperiorSharpeningStone),
            18 => Utility::ExtendedPotionOfNightmareCourtSlaying(ExtendedPotionOfNightmareCourtSlaying),
            19 => Utility::PowerfulPotionOfElementalSlaying(PowerfulPotionOfElementalSlaying),
            20 => Utility::HolographicSuperDrumstick(HolographicSuperDrumstick),
            21 => Utility::MagnanimousSharpeningStone(MagnanimousSharpeningStone),
            22 => Utility::SuperiorSharpeningStone(SuperiorSharpeningStone),
            23 => Utility::PowerfulPotionOfCentaurSlaying(PowerfulPotionOfCentaurSlaying),
            24 => Utility::MagnanimousTuningCrystal(MagnanimousTuningCrystal),
            25 => Utility::TuningIcicle(TuningIcicle),
            26 => Utility::DragonCrystalPotion(DragonCrystalPotion),
            27 => Utility::PowerfulPotionOfNightmareCourtSlaying(PowerfulPotionOfNightmareCourtSlaying),
            28 => Utility::PowerfulPotionOfOgreSlaying(PowerfulPotionOfOgreSlaying),
            29 => Utility::ThesisOnMasterfulStrength(ThesisOnMasterfulStrength),
            30 => Utility::BountifulSharpeningStone(BountifulSharpeningStone),
            31 => Utility::FuriousTuningCrystal(FuriousTuningCrystal),
            32 => Utility::ToxicSharpeningStone(ToxicSharpeningStone),
            33 => Utility::LumpOfCrystallizedNougat(LumpOfCrystallizedNougat),
            34 => Utility::ExtendedPotionOfInquestSlaying(ExtendedPotionOfInquestSlaying),
            35 => Utility::FuriousSharpeningStone(FuriousSharpeningStone),
            36 => Utility::OgreSharpeningStone(OgreSharpeningStone),
            37 => Utility::HolographicSuperApple(HolographicSuperApple),
            38 => Utility::CorsairMaintenanceOil(CorsairMaintenanceOil),
            39 => Utility::WritOfMasterfulStrength(WritOfMasterfulStrength),
            40 => Utility::PotentLucentOil(PotentLucentOil),
            41 => Utility::PowerfulPotionOfDemonSlaying(PowerfulPotionOfDemonSlaying),
            42 => Utility::ExtendedPotionOfFlameLegionSlaying(ExtendedPotionOfFlameLegionSlaying),
            43 => Utility::HolographicSuperCheese(HolographicSuperCheese),
            44 => Utility::PowerfulPotionOfUndeadSlaying(PowerfulPotionOfUndeadSlaying),
            45 => Utility::ToxicMaintenanceOil(ToxicMaintenanceOil),
            46 => Utility::EnhancedLucentOil(EnhancedLucentOil),
            47 => Utility::WritOfMasterfulMalice(WritOfMasterfulMalice),
            48 => Utility::ExtendedPotionOfOutlawSlaying(ExtendedPotionOfOutlawSlaying),
            49 => Utility::PowerfulPotionOfKraitSlaying(PowerfulPotionOfKraitSlaying),
            50 => Utility::PowerfulPotionOfDredgeSlaying(PowerfulPotionOfDredgeSlaying),
            51 => Utility::CorsairTuningCrystal(CorsairTuningCrystal),
            52 => Utility::PotentMasterTuningCrystal(PotentMasterTuningCrystal),
            53 => Utility::PowerfulPotionOfGrawlSlaying(PowerfulPotionOfGrawlSlaying),
            54 => Utility::PowerfulPotionOfIceBroodSlaying(PowerfulPotionOfIceBroodSlaying),
            55 => Utility::PowerfulPotionOfOutlawSlaying(PowerfulPotionOfOutlawSlaying),
            56 => Utility::PowerfulPotionOfSonsOfSvanirSlaying(PowerfulPotionOfSonsOfSvanirSlaying),
            57 => Utility::ExtendedPotionOfGhostSlaying(ExtendedPotionOfGhostSlaying),
            58 => Utility::PotionOfKarkaToughness(PotionOfKarkaToughness),
            59 => Utility::MagnanimousMaintenanceOil(MagnanimousMaintenanceOil),
            60 => Utility::PotionOfKarkaSlaying(PotionOfKarkaSlaying),
            61 => Utility::KraitTuningCrystal(KraitTuningCrystal),
            62 => Utility::FlaskOfPumpkinOil(FlaskOfPumpkinOil),
            63 => Utility::ThesisOnMasterfulMalice(ThesisOnMasterfulMalice),
            64 => Utility::PotentMasterMaintenanceOil(PotentMasterMaintenanceOil),
            65 => Utility::PowerfulPotionOfHalloweenSlaying(PowerfulPotionOfHalloweenSlaying),
            66 => Utility::ExtendedPotionOfUndeadSlaying(ExtendedPotionOfUndeadSlaying),
            67 => Utility::PowerfulPotionOfBrandedSlaying(PowerfulPotionOfBrandedSlaying),
            68 => Utility::PeppermintOil(PeppermintOil),
            69 => Utility::CorsairSharpeningStone(CorsairSharpeningStone),
            70 => Utility::PowerfulPotionOfSlayingScarletsArmies(PowerfulPotionOfSlayingScarletsArmies),
            _ => panic!("index {} out of range for Utility", i),
        }
    }
    pub fn iter() -> impl Iterator<Item = Utility> {
        (0 .. Utility::COUNT).map(Utility::from_index)
    }
}
impl From<ToxicFocusingCrystal> for Utility {
    fn from(x: ToxicFocusingCrystal) -> Utility { Utility::ToxicFocusingCrystal(x) }
}
impl From<WritOfMasterfulAccuracy> for Utility {
    fn from(x: WritOfMasterfulAccuracy) -> Utility { Utility::WritOfMasterfulAccuracy(x) }
}
impl From<MasterMaintenanceOil> for Utility {
    fn from(x: MasterMaintenanceOil) -> Utility { Utility::MasterMaintenanceOil(x) }
}
impl From<ExtendedPotionOfDredgeSlaying> for Utility {
    fn from(x: ExtendedPotionOfDredgeSlaying) -> Utility { Utility::ExtendedPotionOfDredgeSlaying(x) }
}
impl From<PowerfulPotionOfInquestSlaying> for Utility {
    fn from(x: PowerfulPotionOfInquestSlaying) -> Utility { Utility::PowerfulPotionOfInquestSlaying(x) }
}
impl From<FuriousMaintenanceOil> for Utility {
    fn from(x: FuriousMaintenanceOil) -> Utility { Utility::FuriousMaintenanceOil(x) }
}
impl From<ExtendedPotionOfSonsOfSvanirSlaying> for Utility {
    fn from(x: ExtendedPotionOfSonsOfSvanirSlaying) -> Utility { Utility::ExtendedPotionOfSonsOfSvanirSlaying(x) }
}
impl From<MasterTuningCrystal> for Utility {
    fn from(x: MasterTuningCrystal) -> Utility { Utility::MasterTuningCrystal(x) }
}
impl From<PowerfulPotionOfDestroyerSlaying> for Utility {
    fn from(x: PowerfulPotionOfDestroyerSlaying) -> Utility { Utility::PowerfulPotionOfDestroyerSlaying(x) }
}
impl From<ThesisOnMasterfulAccuracy> for Utility {
    fn from(x: ThesisOnMasterfulAccuracy) -> Utility { Utility::ThesisOnMasterfulAccuracy(x) }
}
impl From<PowerfulPotionOfFlameLegionSlaying> for Utility {
    fn from(x: PowerfulPotionOfFlameLegionSlaying) -> Utility { Utility::PowerfulPotionOfFlameLegionSlaying(x) }
}
impl From<TinOfFruitcake> for Utility {
    fn from(x: TinOfFruitcake) -> Utility { Utility::TinOfFruitcake(x) }
}
impl From<HylekMaintenanceOil> for Utility {
    fn from(x: HylekMaintenanceOil) -> Utility { Utility::HylekMaintenanceOil(x) }
}
impl From<PowerfulPotionOfMordremSlaying> for Utility {
    fn from(x: PowerfulPotionOfMordremSlaying) -> Utility { Utility::PowerfulPotionOfMordremSlaying(x) }
}
impl From<BountifulTuningCrystal> for Utility {
    fn from(x: BountifulTuningCrystal) -> Utility { Utility::BountifulTuningCrystal(x) }
}
impl From<SharpeningSkull> for Utility {
    fn from(x: SharpeningSkull) -> Utility { Utility::SharpeningSkull(x) }
}
impl From<BountifulMaintenanceOil> for Utility {
    fn from(x: BountifulMaintenanceOil) -> Utility { Utility::BountifulMaintenanceOil(x) }
}
impl From<PotentSuperiorSharpeningStone> for Utility {
    fn from(x: PotentSuperiorSharpeningStone) -> Utility { Utility::PotentSuperiorSharpeningStone(x) }
}
impl From<ExtendedPotionOfNightmareCourtSlaying> for Utility {
    fn from(x: ExtendedPotionOfNightmareCourtSlaying) -> Utility { Utility::ExtendedPotionOfNightmareCourtSlaying(x) }
}
impl From<PowerfulPotionOfElementalSlaying> for Utility {
    fn from(x: PowerfulPotionOfElementalSlaying) -> Utility { Utility::PowerfulPotionOfElementalSlaying(x) }
}
impl From<HolographicSuperDrumstick> for Utility {
    fn from(x: HolographicSuperDrumstick) -> Utility { Utility::HolographicSuperDrumstick(x) }
}
impl From<MagnanimousSharpeningStone> for Utility {
    fn from(x: MagnanimousSharpeningStone) -> Utility { Utility::MagnanimousSharpeningStone(x) }
}
impl From<SuperiorSharpeningStone> for Utility {
    fn from(x: SuperiorSharpeningStone) -> Utility { Utility::SuperiorSharpeningStone(x) }
}
impl From<PowerfulPotionOfCentaurSlaying> for Utility {
    fn from(x: PowerfulPotionOfCentaurSlaying) -> Utility { Utility::PowerfulPotionOfCentaurSlaying(x) }
}
impl From<MagnanimousTuningCrystal> for Utility {
    fn from(x: MagnanimousTuningCrystal) -> Utility { Utility::MagnanimousTuningCrystal(x) }
}
impl From<TuningIcicle> for Utility {
    fn from(x: TuningIcicle) -> Utility { Utility::TuningIcicle(x) }
}
impl From<DragonCrystalPotion> for Utility {
    fn from(x: DragonCrystalPotion) -> Utility { Utility::DragonCrystalPotion(x) }
}
impl From<PowerfulPotionOfNightmareCourtSlaying> for Utility {
    fn from(x: PowerfulPotionOfNightmareCourtSlaying) -> Utility { Utility::PowerfulPotionOfNightmareCourtSlaying(x) }
}
impl From<PowerfulPotionOfOgreSlaying> for Utility {
    fn from(x: PowerfulPotionOfOgreSlaying) -> Utility { Utility::PowerfulPotionOfOgreSlaying(x) }
}
impl From<ThesisOnMasterfulStrength> for Utility {
    fn from(x: ThesisOnMasterfulStrength) -> Utility { Utility::ThesisOnMasterfulStrength(x) }
}
impl From<BountifulSharpeningStone> for Utility {
    fn from(x: BountifulSharpeningStone) -> Utility { Utility::BountifulSharpeningStone(x) }
}
impl From<FuriousTuningCrystal> for Utility {
    fn from(x: FuriousTuningCrystal) -> Utility { Utility::FuriousTuningCrystal(x) }
}
impl From<ToxicSharpeningStone> for Utility {
    fn from(x: ToxicSharpeningStone) -> Utility { Utility::ToxicSharpeningStone(x) }
}
impl From<LumpOfCrystallizedNougat> for Utility {
    fn from(x: LumpOfCrystallizedNougat) -> Utility { Utility::LumpOfCrystallizedNougat(x) }
}
impl From<ExtendedPotionOfInquestSlaying> for Utility {
    fn from(x: ExtendedPotionOfInquestSlaying) -> Utility { Utility::ExtendedPotionOfInquestSlaying(x) }
}
impl From<FuriousSharpeningStone> for Utility {
    fn from(x: FuriousSharpeningStone) -> Utility { Utility::FuriousSharpeningStone(x) }
}
impl From<OgreSharpeningStone> for Utility {
    fn from(x: OgreSharpeningStone) -> Utility { Utility::OgreSharpeningStone(x) }
}
impl From<HolographicSuperApple> for Utility {
    fn from(x: HolographicSuperApple) -> Utility { Utility::HolographicSuperApple(x) }
}
impl From<CorsairMaintenanceOil> for Utility {
    fn from(x: CorsairMaintenanceOil) -> Utility { Utility::CorsairMaintenanceOil(x) }
}
impl From<WritOfMasterfulStrength> for Utility {
    fn from(x: WritOfMasterfulStrength) -> Utility { Utility::WritOfMasterfulStrength(x) }
}
impl From<PotentLucentOil> for Utility {
    fn from(x: PotentLucentOil) -> Utility { Utility::PotentLucentOil(x) }
}
impl From<PowerfulPotionOfDemonSlaying> for Utility {
    fn from(x: PowerfulPotionOfDemonSlaying) -> Utility { Utility::PowerfulPotionOfDemonSlaying(x) }
}
impl From<ExtendedPotionOfFlameLegionSlaying> for Utility {
    fn from(x: ExtendedPotionOfFlameLegionSlaying) -> Utility { Utility::ExtendedPotionOfFlameLegionSlaying(x) }
}
impl From<HolographicSuperCheese> for Utility {
    fn from(x: HolographicSuperCheese) -> Utility { Utility::HolographicSuperCheese(x) }
}
impl From<PowerfulPotionOfUndeadSlaying> for Utility {
    fn from(x: PowerfulPotionOfUndeadSlaying) -> Utility { Utility::PowerfulPotionOfUndeadSlaying(x) }
}
impl From<ToxicMaintenanceOil> for Utility {
    fn from(x: ToxicMaintenanceOil) -> Utility { Utility::ToxicMaintenanceOil(x) }
}
impl From<EnhancedLucentOil> for Utility {
    fn from(x: EnhancedLucentOil) -> Utility { Utility::EnhancedLucentOil(x) }
}
impl From<WritOfMasterfulMalice> for Utility {
    fn from(x: WritOfMasterfulMalice) -> Utility { Utility::WritOfMasterfulMalice(x) }
}
impl From<ExtendedPotionOfOutlawSlaying> for Utility {
    fn from(x: ExtendedPotionOfOutlawSlaying) -> Utility { Utility::ExtendedPotionOfOutlawSlaying(x) }
}
impl From<PowerfulPotionOfKraitSlaying> for Utility {
    fn from(x: PowerfulPotionOfKraitSlaying) -> Utility { Utility::PowerfulPotionOfKraitSlaying(x) }
}
impl From<PowerfulPotionOfDredgeSlaying> for Utility {
    fn from(x: PowerfulPotionOfDredgeSlaying) -> Utility { Utility::PowerfulPotionOfDredgeSlaying(x) }
}
impl From<CorsairTuningCrystal> for Utility {
    fn from(x: CorsairTuningCrystal) -> Utility { Utility::CorsairTuningCrystal(x) }
}
impl From<PotentMasterTuningCrystal> for Utility {
    fn from(x: PotentMasterTuningCrystal) -> Utility { Utility::PotentMasterTuningCrystal(x) }
}
impl From<PowerfulPotionOfGrawlSlaying> for Utility {
    fn from(x: PowerfulPotionOfGrawlSlaying) -> Utility { Utility::PowerfulPotionOfGrawlSlaying(x) }
}
impl From<PowerfulPotionOfIceBroodSlaying> for Utility {
    fn from(x: PowerfulPotionOfIceBroodSlaying) -> Utility { Utility::PowerfulPotionOfIceBroodSlaying(x) }
}
impl From<PowerfulPotionOfOutlawSlaying> for Utility {
    fn from(x: PowerfulPotionOfOutlawSlaying) -> Utility { Utility::PowerfulPotionOfOutlawSlaying(x) }
}
impl From<PowerfulPotionOfSonsOfSvanirSlaying> for Utility {
    fn from(x: PowerfulPotionOfSonsOfSvanirSlaying) -> Utility { Utility::PowerfulPotionOfSonsOfSvanirSlaying(x) }
}
impl From<ExtendedPotionOfGhostSlaying> for Utility {
    fn from(x: ExtendedPotionOfGhostSlaying) -> Utility { Utility::ExtendedPotionOfGhostSlaying(x) }
}
impl From<PotionOfKarkaToughness> for Utility {
    fn from(x: PotionOfKarkaToughness) -> Utility { Utility::PotionOfKarkaToughness(x) }
}
impl From<MagnanimousMaintenanceOil> for Utility {
    fn from(x: MagnanimousMaintenanceOil) -> Utility { Utility::MagnanimousMaintenanceOil(x) }
}
impl From<PotionOfKarkaSlaying> for Utility {
    fn from(x: PotionOfKarkaSlaying) -> Utility { Utility::PotionOfKarkaSlaying(x) }
}
impl From<KraitTuningCrystal> for Utility {
    fn from(x: KraitTuningCrystal) -> Utility { Utility::KraitTuningCrystal(x) }
}
impl From<FlaskOfPumpkinOil> for Utility {
    fn from(x: FlaskOfPumpkinOil) -> Utility { Utility::FlaskOfPumpkinOil(x) }
}
impl From<ThesisOnMasterfulMalice> for Utility {
    fn from(x: ThesisOnMasterfulMalice) -> Utility { Utility::ThesisOnMasterfulMalice(x) }
}
impl From<PotentMasterMaintenanceOil> for Utility {
    fn from(x: PotentMasterMaintenanceOil) -> Utility { Utility::PotentMasterMaintenanceOil(x) }
}
impl From<PowerfulPotionOfHalloweenSlaying> for Utility {
    fn from(x: PowerfulPotionOfHalloweenSlaying) -> Utility { Utility::PowerfulPotionOfHalloweenSlaying(x) }
}
impl From<ExtendedPotionOfUndeadSlaying> for Utility {
    fn from(x: ExtendedPotionOfUndeadSlaying) -> Utility { Utility::ExtendedPotionOfUndeadSlaying(x) }
}
impl From<PowerfulPotionOfBrandedSlaying> for Utility {
    fn from(x: PowerfulPotionOfBrandedSlaying) -> Utility { Utility::PowerfulPotionOfBrandedSlaying(x) }
}
impl From<PeppermintOil> for Utility {
    fn from(x: PeppermintOil) -> Utility { Utility::PeppermintOil(x) }
}
impl From<CorsairSharpeningStone> for Utility {
    fn from(x: CorsairSharpeningStone) -> Utility { Utility::CorsairSharpeningStone(x) }
}
impl From<PowerfulPotionOfSlayingScarletsArmies> for Utility {
    fn from(x: PowerfulPotionOfSlayingScarletsArmies) -> Utility { Utility::PowerfulPotionOfSlayingScarletsArmies(x) }
}

// END GENERATED CODE
