use crate::character::Vary;
use crate::effect::Effect;
use crate::stats::{Stats, Modifiers};

// BEGIN GENERATED CODE
// Generated by gen_gear_tables.py for GW2 build 142239 at 2023-03-07T15:52:59

/// No Food
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct NoFood;
#[allow(unused_variables)]
impl Effect for NoFood {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (CurryMusselSoup): incoming_condi_damage, condition, -5.0
        // unimplemented (CurryMusselSoup): incoming_damage, -10.0
        // unimplemented (CurryMusselSoup): xp_from_kills, 10.0
        // unimplemented (ExperimentalRemnant): xp_from_kills, 10.0
        // unknown (ExperimentalRemnant): +4% damage while moving
        // unknown (ExperimentalRemnant): 50% to gain swiftness on kill
        // unimplemented (FireSalsa): xp_from_kills, 10.0
        // unknown (FireSalsa): +100% downed health
        // unknown (FireSalsa): +20% damage while downed
        // unimplemented (FriedOysters): incoming_damage, -10.0
        // unimplemented (FriedOysters): xp_from_kills, 10.0
        // unimplemented (GhostPepperPopper): xp_from_kills, 10.0
        // unknown (GhostPepperPopper): 40% chance to gain might on critical hit during the day
        // unknown (GhostPepperPopper): 40% chance to inflict chill on critical hit during the night
        // unimplemented (HolographicSuperCake): magic_find, 20.0
        // unknown (HolographicSuperCake): +30% to endurance regeneration
        // unknown (HolographicSuperCake): gain health every second
        // unimplemented (IslandPudding): magic_find, 30.0
        // unimplemented (IslandPudding): xp_from_kills, 15.0
        // unknown (IslandPudding): +10% karma
        // unimplemented (JerkPoultryFlatbreadSandwich): xp_from_kills, 10.0
        // unknown (JerkPoultryFlatbreadSandwich): +150 power and vitality for 30 seconds on kill
        // unimplemented (OmnomberryBar): xp_from_kills, 10.0
        // unknown (OmnomberryBar): 30% magic find
        // unknown (OmnomberryBar): 40% gold from monsters
        // unimplemented (OrrianTruffleAndMeatStew): xp_from_kills, 10.0
        // unknown (OrrianTruffleAndMeatStew): +40% to endurance regeneration
        // unknown (OrrianTruffleAndMeatStew): 100% chance to gain might on dodge
        // unimplemented (PeppermintOmnomberryBar): magic_find, 30.0
        // unimplemented (PeppermintOmnomberryBar): xp_from_kills, 10.0
        // unknown (PeppermintOmnomberryBar): +10% karma
        // unknown (PeppermintOmnomberryBar): +40% gold from monsters
        // unimplemented (RedfishSushi): magic_find, 30.0
        // unimplemented (RedfishSushi): xp_from_kills, 10.0
        // unknown (RedfishSushi): +150 fishing power
        // unimplemented (SaffronBread): incoming_condi_duration, condition, -20.0
        // unimplemented (SaffronBread): xp_from_kills, 10.0
        // unknown (SaffronBread): -20% incoming damage while stunned, knocked down, or knocked back
        // unimplemented (SeaweedSalad): xp_from_kills, 10.0
        // unknown (SeaweedSalad): +5% damage while moving
        // unknown (SeaweedSalad): 60% to gain swiftness on kill
        // unknown (SteamedRedDumpling): +140 condition damage for 30 seconds on kill
        // unknown (SteamedRedDumpling): +200 power for 30 seconds on kill
        // unknown (SteamedRedDumpling): +25% magic find during lunar new year
        // unimplemented (SwiftlyScrambledEggs): xp_from_kills, 10.0
        // unknown (SwiftlyScrambledEggs): +5% damage while moving
        // unknown (SwiftlyScrambledEggs): 60% to gain swiftness on kill
        // unimplemented (TapiocaPudding): xp_from_kills, 10.0
        // unknown (TapiocaPudding): +10% healing to other allies
        // unknown (TapiocaPudding): +200 healing power for 10 seconds on using a heal skill (cooldown: 20 seconds)
        // unimplemented (WinterberrySeaweedSalad): magic_find, 30.0
        // unimplemented (WinterberrySeaweedSalad): xp_from_kills, 10.0
        // unknown (WinterberrySeaweedSalad): +5% damage while moving
        // unknown (WinterberrySeaweedSalad): 60% to gain swiftness on kill
    }
}
impl Vary for NoFood {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl NoFood {
    pub fn display_name(&self) -> &'static str {
        "No Food / Bowl of Curry Mussel Soup / Experimental Remnant / Bowl of Fire Salsa / Fried Oysters / Ghost Pepper Popper / Holographic Super Cake / Plate of Island Pudding / Jerk Poultry Flatbread Sandwich / Omnomberry Bar / Bowl of Orrian Truffle and Meat Stew / Peppermint Omnomberry Bar / Redfish Sushi / Loaf of Saffron Bread / Bowl of Seaweed Salad / Steamed Red Dumpling / Swiftly Scrambled Eggs / Bowl of Tapioca Pudding / Bowl of Winterberry Seaweed Salad"
    }
}

/// Plate of Beef Rendang
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BeefRendang;
#[allow(unused_variables)]
impl Effect for BeefRendang {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.expertise += 70.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for BeefRendang {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl BeefRendang {
    pub fn display_name(&self) -> &'static str {
        "Plate of Beef Rendang"
    }
}

/// Bowl of Black Pepper Cactus Salad
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BlackPepperCactusSalad;
#[allow(unused_variables)]
impl Effect for BlackPepperCactusSalad {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 70.0;
        // unimplemented (BlackPepperCactusSalad): xp_from_kills, 10.0
        // unknown (BlackPepperCactusSalad): gain health every second
        // unimplemented (CactusSoup): xp_from_kills, 10.0
        // unknown (CactusSoup): gain health every second
        // unimplemented (LemongrassMusselPasta): incoming_damage, -10.0
        // unimplemented (LemongrassMusselPasta): xp_from_kills, 10.0
        // unimplemented (MashedPurplePotatoes): incoming_condi_duration, stun, -40.0
        // unimplemented (MashedPurplePotatoes): xp_from_kills, 10.0
        // unimplemented (RoastedLotusRoot): incoming_condi_duration, stun, -40.0
        // unimplemented (RoastedLotusRoot): xp_from_kills, 10.0
    }
}
impl Vary for BlackPepperCactusSalad {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl BlackPepperCactusSalad {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Black Pepper Cactus Salad / Bowl of Cactus Soup / Bowl of Lemongrass Mussel Pasta / Mashed Purple Potatoes / Bowl of Roasted Lotus Root"
    }
}

/// Block of Tofu
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BlockOfTofu;
#[allow(unused_variables)]
impl Effect for BlockOfTofu {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 70.0;
        // unimplemented (BlockOfTofu): xp_from_kills, 10.0
        // unknown (BlockOfTofu): +100 power and ferocity for 30 seconds on kill
        // unimplemented (IndigoMushroomMilkshake): xp_from_kills, 10.0
        // unknown (IndigoMushroomMilkshake): 66% chance to steal life on critical hit
        // unimplemented (JerkPoultryAndNopalFlatbreadSandwich): xp_from_kills, 10.0
        // unknown (JerkPoultryAndNopalFlatbreadSandwich): +200 power for 10 seconds on using a heal skill (cooldown: 20 seconds)
        // unimplemented (OmnomberryGhost): xp_from_kills, 15.0
        // unknown (OmnomberryGhost): 66% chance to steal life on critical hit
        // unimplemented (OmnomberryPie): xp_from_kills, 10.0
        // unknown (OmnomberryPie): 66% chance to steal life on critical hit
        // unimplemented (OystersWithCocktailSauce): incoming_damage, -10.0
        // unimplemented (OystersWithCocktailSauce): xp_from_kills, 10.0
        // unimplemented (SaffronStuffedMushroom): xp_from_kills, 10.0
        // unknown (SaffronStuffedMushroom): +200 condition damage for 30 seconds on kill
        // unimplemented (ScoopOfMintberrySwirlIceCream): xp_from_kills, 10.0
        // unknown (ScoopOfMintberrySwirlIceCream): +10% karma
        // unknown (ScoopOfMintberrySwirlIceCream): 66% chance to steal life on critical hit
        // unimplemented (SliceOfCandiedDragonRoll): xp_from_kills, 10.0
        // unknown (SliceOfCandiedDragonRoll): 66% chance to steal life on critical hit
        // unimplemented (WinterberryPie): magic_find, 30.0
        // unimplemented (WinterberryPie): xp_from_kills, 10.0
        // unknown (WinterberryPie): 66% chance to steal life on critical hit
    }
}
impl Vary for BlockOfTofu {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl BlockOfTofu {
    pub fn display_name(&self) -> &'static str {
        "Block of Tofu / Indigo Mushroom Milkshake / Jerk Poultry and Nopal Flatbread Sandwich / Omnomberry Ghost / Omnomberry Pie / Oysters with Cocktail Sauce / Saffron Stuffed Mushroom / Scoop of Mintberry Swirl Ice Cream / Slice of Candied Dragon Roll / Winterberry Pie"
    }
}

/// Bowl of Cactus Fruit Salad
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CactusFruitSalad;
#[allow(unused_variables)]
impl Effect for CactusFruitSalad {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        // unimplemented (CactusFruitSalad): xp_from_kills, 10.0
        // unknown (CactusFruitSalad): 33% chance to steal life on critical hit
        // unimplemented (PricklyPearPie): xp_from_kills, 10.0
        // unknown (PricklyPearPie): 33% chance to steal life on critical hit
    }
}
impl Vary for CactusFruitSalad {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl CactusFruitSalad {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Cactus Fruit Salad / Prickly Pear Pie"
    }
}

/// Bowl of Cactus Soup
pub type CactusSoup = BlackPepperCactusSalad;

/// Loaf of Candy Cactus Cornbread
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CandyCactusCornbread;
#[allow(unused_variables)]
impl Effect for CandyCactusCornbread {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 100.0;
        s.toughness += 70.0;
        // unimplemented (CandyCactusCornbread): xp_from_kills, 10.0
        // unimplemented (NopalitosSaut): xp_from_kills, 10.0
    }
}
impl Vary for CandyCactusCornbread {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl CandyCactusCornbread {
    pub fn display_name(&self) -> &'static str {
        "Loaf of Candy Cactus Cornbread / Bowl of Nopalitos Sauté"
    }
}

/// Carrot Soufflé
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CarrotSouffl;
#[allow(unused_variables)]
impl Effect for CarrotSouffl {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 70.0;
        // unimplemented (CarrotSouffl): xp_from_kills, 10.0
        // unknown (CarrotSouffl): +200 power for 30 seconds on kill
        // unimplemented (DragonsBreathBun): xp_from_kills, 10.0
        // unknown (DragonsBreathBun): +200 power for 30 seconds on kill
        // unimplemented (EggInACloud): xp_from_kills, 10.0
        // unknown (EggInACloud): 100% chance to gain might on kill
        // unimplemented (OystersWithZestySauce): incoming_damage, -10.0
        // unimplemented (OystersWithZestySauce): xp_from_kills, 10.0
        // unimplemented (SweetCurriedMussels): xp_from_kills, 10.0
        // unknown (SweetCurriedMussels): 100% chance to gain fury on kill
        // unimplemented (TruffleSautee): xp_from_kills, 10.0
        // unknown (TruffleSautee): 100% chance to gain might on kill
        // unimplemented (TruffleSteakDinner): xp_from_kills, 10.0
        // unknown (TruffleSteakDinner): +200 power for 30 seconds on kill
    }
}
impl Vary for CarrotSouffl {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl CarrotSouffl {
    pub fn display_name(&self) -> &'static str {
        "Carrot Soufflé / Dragon's Breath Bun / Egg in a Cloud / Oysters with Zesty Sauce / Plate of Sweet Curried Mussels / Bowl of Truffle Sautee / Plate of Truffle Steak Dinner"
    }
}

/// Cheesy Cassava Roll
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CheesyCassavaRoll;
#[allow(unused_variables)]
impl Effect for CheesyCassavaRoll {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 70.0;
        // unimplemented (CheesyCassavaRoll): xp_from_kills, 10.0
        // unknown (CheesyCassavaRoll): +200 toughness for 10 seconds on using a heal skill (cooldown: 20 seconds)
        // unimplemented (OmnomberryCompote): xp_from_kills, 10.0
        // unknown (OmnomberryCompote): 100% chance to gain health on kill
        // unimplemented (OystersWithPestoSauce): incoming_damage, -10.0
        // unimplemented (OystersWithPestoSauce): xp_from_kills, 10.0
        // unimplemented (SaffronscentedPoultrySoup): xp_from_kills, 10.0
        // unknown (SaffronscentedPoultrySoup): 100% chance to remove a condition on using a heal skill (cooldown: 10 seconds)
        // unimplemented (SuperHotSaffronScentedPoultrySoup): xp_from_kills, 10.0
        // unknown (SuperHotSaffronScentedPoultrySoup): 100% chance to remove a condition on using a heal skill (cooldown: 10 seconds)
    }
}
impl Vary for CheesyCassavaRoll {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl CheesyCassavaRoll {
    pub fn display_name(&self) -> &'static str {
        "Cheesy Cassava Roll / Omnomberry Compote / Oysters with Pesto Sauce / Bowl of Saffron-scented Poultry Soup / Super-Hot Saffron-Scented Poultry Soup"
    }
}

/// Chocolate Omnomberry Cake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ChocolateOmnomberryCake;
#[allow(unused_variables)]
impl Effect for ChocolateOmnomberryCake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 70.0;
        // unimplemented (ChocolateOmnomberryCake): condi_duration, chill, 15.0
        // unimplemented (ChocolateOmnomberryCake): xp_from_kills, 10.0
        // unimplemented (DragonflyCupcake): xp_from_kills, 10.0
        // unknown (DragonflyCupcake): 30% magic find
        // unimplemented (FriedOysterSandwich): incoming_damage, -10.0
        // unimplemented (FriedOysterSandwich): xp_from_kills, 10.0
        // unimplemented (LotusStirfry): xp_from_kills, 10.0
        // unknown (LotusStirfry): 100% chance to gain might on kill
        // unimplemented (MushroomsYakkington): xp_from_kills, 10.0
        // unknown (MushroomsYakkington): 100% chance to gain might on kill
        // unimplemented (OmnomberryTart): xp_from_kills, 10.0
        // unknown (OmnomberryTart): 30% magic find
        // unimplemented (SliceOfAllspiceCake): xp_from_kills, 10.0
        // unknown (SliceOfAllspiceCake): 66% chance to steal life on critical hit
    }
}
impl Vary for ChocolateOmnomberryCake {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl ChocolateOmnomberryCake {
    pub fn display_name(&self) -> &'static str {
        "Chocolate Omnomberry Cake / Dragonfly Cupcake / Fried Oyster Sandwich / Bowl of Lotus Stirfry / Plate of Mushrooms Yakkington / Omnomberry Tart / Slice of Allspice Cake"
    }
}

/// Chocolate Omnomberry Cream
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ChocolateOmnomberryCream;
#[allow(unused_variables)]
impl Effect for ChocolateOmnomberryCream {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 100.0;
        // unimplemented (ChocolateOmnomberryCream): xp_from_kills, 10.0
        // unknown (ChocolateOmnomberryCream): +40% magic find while under the effect of a boon
        // unknown (FriedGoldenDumpling): +25% magic find during lunar new year
        // unknown (FriedGoldenDumpling): 33% chance for might (5 seconds) on critical hit
        // unknown (SpringRoll): +25% magic find during lunar new year
        // unknown (SpringRoll): swiftness for 30 seconds on kill
    }
}
impl Vary for ChocolateOmnomberryCream {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl ChocolateOmnomberryCream {
    pub fn display_name(&self) -> &'static str {
        "Chocolate Omnomberry Cream / Fried Golden Dumpling / Spring Roll"
    }
}

/// Bowl of Chocolate Tapioca Pudding
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ChocolateTapiocaPudding;
#[allow(unused_variables)]
impl Effect for ChocolateTapiocaPudding {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 70.0;
        s.toughness += 100.0;
        // unimplemented: xp, 10.0
    }
}
impl Vary for ChocolateTapiocaPudding {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl ChocolateTapiocaPudding {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Chocolate Tapioca Pudding"
    }
}

/// Cup of Lotus Fries
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CupOfLotusFries;
#[allow(unused_variables)]
impl Effect for CupOfLotusFries {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 70.0;
        // unimplemented (CupOfLotusFries): xp_from_kills, 10.0
        // unknown (CupOfLotusFries): 30% magic find
        // unimplemented (FishyRiceBowl): xp_from_kills, 10.0
        // unknown (FishyRiceBowl): +15% increased burning duration
        // unimplemented (KimchiPancakes): xp_from_kills, 10.0
        // unknown (KimchiPancakes): +15% increased bleeding duration
        // unimplemented (KimchiTofuStew): xp_from_kills, 10.0
        // unknown (KimchiTofuStew): +15% increased poison duration
        // unimplemented (MeatyAsparagusSkewer): xp_from_kills, 10.0
        // unknown (MeatyAsparagusSkewer): +15% increased torment duration
        // unimplemented (MeatyRiceBowl): xp_from_kills, 10.0
        // unknown (MeatyRiceBowl): +15% increased confusion duration
        // unimplemented (OystersWithSpicySauce): incoming_damage, -10.0
        // unimplemented (OystersWithSpicySauce): xp_from_kills, 10.0
        // unimplemented (SliceOfAllspiceCakeWithIceCream): xp_from_kills, 10.0
        // unknown (SliceOfAllspiceCakeWithIceCream): 66% chance to steal life on critical hit
        // unimplemented (SpicyPumpkinCookie): xp_from_kills, 15.0
        // unknown (SpicyPumpkinCookie): 30% magic find
    }
}
impl Vary for CupOfLotusFries {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl CupOfLotusFries {
    pub fn display_name(&self) -> &'static str {
        "Cup of Lotus Fries / Fishy Rice Bowl / Plate of Kimchi Pancakes / Bowl of Kimchi Tofu Stew / Meaty Asparagus Skewer / Meaty Rice Bowl / Oysters with Spicy Sauce / Slice of Allspice Cake with Ice Cream / Spicy Pumpkin Cookie"
    }
}

/// Bowl of Curry Butternut Squash Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CurryButternutSquashSoup;
#[allow(unused_variables)]
impl Effect for CurryButternutSquashSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 70.0;
        s.precision += 100.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for CurryButternutSquashSoup {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl CurryButternutSquashSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Curry Butternut Squash Soup"
    }
}

/// Bowl of Curry Mussel Soup
pub type CurryMusselSoup = NoFood;

/// Bowl of Curry Pumpkin Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CurryPumpkinSoup;
#[allow(unused_variables)]
impl Effect for CurryPumpkinSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 100.0;
        s.vitality += 70.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for CurryPumpkinSoup {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl CurryPumpkinSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Curry Pumpkin Soup"
    }
}

/// Delicious Rice Ball
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DeliciousRiceBall;
#[allow(unused_variables)]
impl Effect for DeliciousRiceBall {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        // unknown: +10% outgoing healing
        // unknown: +25% magic find during lunar new year
    }
}
impl Vary for DeliciousRiceBall {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl DeliciousRiceBall {
    pub fn display_name(&self) -> &'static str {
        "Delicious Rice Ball"
    }
}

/// Dragonfish Candy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DragonfishCandy;
#[allow(unused_variables)]
impl Effect for DragonfishCandy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 100.0;
        // unimplemented (DragonfishCandy): xp_from_kills, 10.0
        // unknown (DragonfishCandy): +200 power when health below 50%
        // unimplemented (LemongrassPoultry): xp_from_kills, 10.0
        // unknown (LemongrassPoultry): +200 power when health below 50%
        // unknown (ZestyTurnipSoup): +10 experience from kills
        // unknown (ZestyTurnipSoup): 20% magic find
    }
}
impl Vary for DragonfishCandy {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl DragonfishCandy {
    pub fn display_name(&self) -> &'static str {
        "Dragonfish Candy / Plate of Lemongrass Poultry / Bowl of Zesty Turnip Soup"
    }
}

/// Dragonfly Cupcake
pub type DragonflyCupcake = ChocolateOmnomberryCake;

/// Dragon's Breath Bun
pub type DragonsBreathBun = CarrotSouffl;

/// Dragon's Revelry Starcake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DragonsRevelryStarcake;
#[allow(unused_variables)]
impl Effect for DragonsRevelryStarcake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        *s += 45.0;
        // unimplemented: magic_find, 20.0
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for DragonsRevelryStarcake {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl DragonsRevelryStarcake {
    pub fn display_name(&self) -> &'static str {
        "Dragon's Revelry Starcake"
    }
}

/// Egg in a Cloud
pub type EggInACloud = CarrotSouffl;

/// Experimental Remnant
pub type ExperimentalRemnant = NoFood;

/// Bowl of Fancy Potato and Leek Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FancyPotatoAndLeekSoup;
#[allow(unused_variables)]
impl Effect for FancyPotatoAndLeekSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 70.0;
        s.precision += 100.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for FancyPotatoAndLeekSoup {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl FancyPotatoAndLeekSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Fancy Potato and Leek Soup"
    }
}

/// Fancy Truffle Burger
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FancyTruffleBurger;
#[allow(unused_variables)]
impl Effect for FancyTruffleBurger {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.poison += 15.0;
        s.precision += 70.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for FancyTruffleBurger {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl FancyTruffleBurger {
    pub fn display_name(&self) -> &'static str {
        "Fancy Truffle Burger"
    }
}

/// Plate of Fire Flank Steak
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FireFlankSteak;
#[allow(unused_variables)]
impl Effect for FireFlankSteak {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 70.0;
        s.power += 100.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for FireFlankSteak {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl FireFlankSteak {
    pub fn display_name(&self) -> &'static str {
        "Plate of Fire Flank Steak"
    }
}

/// Bowl of Fire Meat Chili
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FireMeatChili;
#[allow(unused_variables)]
impl Effect for FireMeatChili {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.burn += 15.0;
        s.precision += 70.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for FireMeatChili {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl FireMeatChili {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Fire Meat Chili"
    }
}

/// Bowl of Fire Salsa
pub type FireSalsa = NoFood;

/// Bowl of Fire Veggie Chili
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FireVeggieChili;
#[allow(unused_variables)]
impl Effect for FireVeggieChili {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 50.0;
        // unimplemented: xp_from_kills, 10.0
        // unknown: day: 20% chance to burn on critical hit
        // unknown: night: 20% chance to steal life on critical hit
    }
}
impl Vary for FireVeggieChili {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl FireVeggieChili {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Fire Veggie Chili"
    }
}

/// Bowl of Fish Stew
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FishStew;
#[allow(unused_variables)]
impl Effect for FishStew {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 70.0;
        // unimplemented (FishStew): xp_from_kills, 10.0
        // unknown (FishStew): +150 fishing power
        // unimplemented (LemongrassPoultrySoup): incoming_condi_duration, condition, -20.0
        // unimplemented (LemongrassPoultrySoup): xp_from_kills, 10.0
        // unimplemented (MangoPie): xp_from_kills, 10.0
        // unknown (MangoPie): gain health every second
        // unimplemented (MusselSoup): incoming_damage, -10.0
        // unimplemented (MusselSoup): xp_from_kills, 10.0
        // unimplemented (QuicheOfDarkness): incoming_condi_duration, condition, -20.0
        // unimplemented (QuicheOfDarkness): xp_from_kills, 10.0
        // unimplemented (SuperHotLemongrassPoultrySoup): incoming_condi_duration, condition, -20.0
        // unimplemented (SuperHotLemongrassPoultrySoup): xp_from_kills, 10.0
        // unimplemented (TropicalPeppermintCake): xp_from_kills, 10.0
        // unknown (TropicalPeppermintCake): +10% karma
        // unknown (TropicalPeppermintCake): gain health every second
    }
}
impl Vary for FishStew {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl FishStew {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Fish Stew / Bowl of Lemongrass Poultry Soup / Mango Pie / Bowl of Mussel Soup / Quiche of Darkness / Super-Hot Lemongrass Poultry Soup / Tropical Peppermint Cake"
    }
}

/// Fishy Rice Bowl
pub type FishyRiceBowl = CupOfLotusFries;

/// Flatbread
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Flatbread;
#[allow(unused_variables)]
impl Effect for Flatbread {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 150.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for Flatbread {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl Flatbread {
    pub fn display_name(&self) -> &'static str {
        "Flatbread"
    }
}

/// Fried Golden Dumpling
pub type FriedGoldenDumpling = ChocolateOmnomberryCream;

/// Fried Oyster Sandwich
pub type FriedOysterSandwich = ChocolateOmnomberryCake;

/// Fried Oysters
pub type FriedOysters = NoFood;

/// Plate of Frostgorge Clams
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FrostgorgeClams;
#[allow(unused_variables)]
impl Effect for FrostgorgeClams {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 70.0;
        s.toughness += 100.0;
        // unimplemented (FrostgorgeClams): xp_from_kills, 10.0
        // unimplemented (TruffleRavioli): xp_from_kills, 10.0
    }
}
impl Vary for FrostgorgeClams {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl FrostgorgeClams {
    pub fn display_name(&self) -> &'static str {
        "Plate of Frostgorge Clams / Bowl of Truffle Ravioli"
    }
}

/// Bowl of Garlic Kale Sautee
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct GarlicKaleSautee;
#[allow(unused_variables)]
impl Effect for GarlicKaleSautee {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 70.0;
        s.expertise += 100.0;
        // unimplemented (GarlicKaleSautee): xp_from_kills, 10.0
        // unimplemented (KoiCake): xp_from_kills, 10.0
        // unimplemented (RareVeggiePizza): xp_from_kills, 10.0
        // unimplemented (RedLentilSaobosa): xp, 1.0
    }
}
impl Vary for GarlicKaleSautee {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl GarlicKaleSautee {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Garlic Kale Sautee / Koi Cake / Rare Veggie Pizza / Red-Lentil Saobosa"
    }
}

/// Ghost Pepper Popper
pub type GhostPepperPopper = NoFood;

/// Holographic Super Cake
pub type HolographicSuperCake = NoFood;

/// Icy Fish Snack
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct IcyFishSnack;
#[allow(unused_variables)]
impl Effect for IcyFishSnack {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 80.0;
        // unimplemented: xp_from_kills, 10.0
        // unknown: +160 power while health is below 50%
    }
}
impl Vary for IcyFishSnack {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl IcyFishSnack {
    pub fn display_name(&self) -> &'static str {
        "Icy Fish Snack"
    }
}

/// Indigo Mushroom Milkshake
pub type IndigoMushroomMilkshake = BlockOfTofu;

/// Plate of Island Pudding
pub type IslandPudding = NoFood;

/// Plate of Jerk Poultry
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct JerkPoultry;
#[allow(unused_variables)]
impl Effect for JerkPoultry {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 150.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for JerkPoultry {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl JerkPoultry {
    pub fn display_name(&self) -> &'static str {
        "Plate of Jerk Poultry"
    }
}

/// Jerk Poultry and Nopal Flatbread Sandwich
pub type JerkPoultryAndNopalFlatbreadSandwich = BlockOfTofu;

/// Jerk Poultry Flatbread Sandwich
pub type JerkPoultryFlatbreadSandwich = NoFood;

/// Plate of Kimchi Pancakes
pub type KimchiPancakes = CupOfLotusFries;

/// Bowl of Kimchi Tofu Stew
pub type KimchiTofuStew = CupOfLotusFries;

/// Koi Cake
pub type KoiCake = GarlicKaleSautee;

/// Kralkachocolate Bar
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct KralkachocolateBar;
#[allow(unused_variables)]
impl Effect for KralkachocolateBar {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.toughness += 70.0;
        // unknown (KralkachocolateBar): +5% karma
        // unknown (SaffronMangoIceCream): +5% karma
    }
}
impl Vary for KralkachocolateBar {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl KralkachocolateBar {
    pub fn display_name(&self) -> &'static str {
        "Kralkachocolate Bar / Bowl of Saffron-Mango Ice Cream"
    }
}

/// Lake Doric Mussels
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct LakeDoricMussels;
#[allow(unused_variables)]
impl Effect for LakeDoricMussels {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 70.0;
        s.precision += 100.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for LakeDoricMussels {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl LakeDoricMussels {
    pub fn display_name(&self) -> &'static str {
        "Lake Doric Mussels"
    }
}

/// Bowl of Lemongrass Mussel Pasta
pub type LemongrassMusselPasta = BlackPepperCactusSalad;

/// Plate of Lemongrass Poultry
pub type LemongrassPoultry = DragonfishCandy;

/// Bowl of Lemongrass Poultry Soup
pub type LemongrassPoultrySoup = FishStew;

/// Bowl of Lotus Stirfry
pub type LotusStirfry = ChocolateOmnomberryCake;

/// Mango Pie
pub type MangoPie = FishStew;

/// Bowl of Marjory's Experimental Chili
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MarjorysExperimentalChili;
#[allow(unused_variables)]
impl Effect for MarjorysExperimentalChili {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 50.0;
        s.power += 50.0;
        // unimplemented: xp_from_kills, 10.0
        // unknown: gain might when using a heal skill
    }
}
impl Vary for MarjorysExperimentalChili {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl MarjorysExperimentalChili {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Marjory's Experimental Chili"
    }
}

/// Mashed Purple Potatoes
pub type MashedPurplePotatoes = BlackPepperCactusSalad;

/// Meaty Asparagus Skewer
pub type MeatyAsparagusSkewer = CupOfLotusFries;

/// Meaty Rice Bowl
pub type MeatyRiceBowl = CupOfLotusFries;

/// Mushroom Loaf
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MushroomLoaf;
#[allow(unused_variables)]
impl Effect for MushroomLoaf {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 70.0;
        s.vitality += 100.0;
        // unknown: +10 experience from kills
    }
}
impl Vary for MushroomLoaf {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl MushroomLoaf {
    pub fn display_name(&self) -> &'static str {
        "Mushroom Loaf"
    }
}

/// Plate of Mushrooms Yakkington
pub type MushroomsYakkington = ChocolateOmnomberryCake;

/// Bowl of Mussel Soup
pub type MusselSoup = FishStew;

/// Plate of Mussels Gnashblade
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MusselsGnashblade;
#[allow(unused_variables)]
impl Effect for MusselsGnashblade {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 70.0;
        // unimplemented: incoming_damage, -10.0
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for MusselsGnashblade {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl MusselsGnashblade {
    pub fn display_name(&self) -> &'static str {
        "Plate of Mussels Gnashblade"
    }
}

/// Bowl of Nopalitos Sauté
pub type NopalitosSaut = CandyCactusCornbread;

/// Omnomberry Bar
pub type OmnomberryBar = NoFood;

/// Loaf of Omnomberry Bread
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryBread;
#[allow(unused_variables)]
impl Effect for OmnomberryBread {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 70.0;
        s.vitality += 100.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for OmnomberryBread {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl OmnomberryBread {
    pub fn display_name(&self) -> &'static str {
        "Loaf of Omnomberry Bread"
    }
}

/// Omnomberry Compote
pub type OmnomberryCompote = CheesyCassavaRoll;

/// Omnomberry Cookie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryCookie;
#[allow(unused_variables)]
impl Effect for OmnomberryCookie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.vitality += 70.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for OmnomberryCookie {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl OmnomberryCookie {
    pub fn display_name(&self) -> &'static str {
        "Omnomberry Cookie"
    }
}

/// Omnomberry Ghost
pub type OmnomberryGhost = BlockOfTofu;

/// Omnomberry Pie
pub type OmnomberryPie = BlockOfTofu;

/// Omnomberry Tart
pub type OmnomberryTart = ChocolateOmnomberryCake;

/// Plate of Orrian Steak Frittes
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OrrianSteakFrittes;
#[allow(unused_variables)]
impl Effect for OrrianSteakFrittes {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.vitality += 70.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for OrrianSteakFrittes {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl OrrianSteakFrittes {
    pub fn display_name(&self) -> &'static str {
        "Plate of Orrian Steak Frittes"
    }
}

/// Bowl of Orrian Truffle and Meat Stew
pub type OrrianTruffleAndMeatStew = NoFood;

/// Bowl of Orrian Truffle Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OrrianTruffleSoup;
#[allow(unused_variables)]
impl Effect for OrrianTruffleSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.vitality += 70.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for OrrianTruffleSoup {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl OrrianTruffleSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Orrian Truffle Soup"
    }
}

/// Oysters Gnashblade
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OystersGnashblade;
#[allow(unused_variables)]
impl Effect for OystersGnashblade {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 70.0;
        // unimplemented (OystersGnashblade): incoming_damage, -10.0
        // unimplemented (OystersGnashblade): xp_from_kills, 10.0
        // unimplemented (SweetBeanBun): incoming_condi_duration, condition, -20.0
        // unknown (SweetBeanBun): +25% magic find during lunar new year
    }
}
impl Vary for OystersGnashblade {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl OystersGnashblade {
    pub fn display_name(&self) -> &'static str {
        "Oysters Gnashblade / Sweet Bean Bun"
    }
}

/// Oysters with Cocktail Sauce
pub type OystersWithCocktailSauce = BlockOfTofu;

/// Oysters with Pesto Sauce
pub type OystersWithPestoSauce = CheesyCassavaRoll;

/// Oysters with Spicy Sauce
pub type OystersWithSpicySauce = CupOfLotusFries;

/// Oysters with Zesty Sauce
pub type OystersWithZestySauce = CarrotSouffl;

/// Bowl of Passion Fruit Tapioca Pudding
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PassionFruitTapiocaPudding;
#[allow(unused_variables)]
impl Effect for PassionFruitTapiocaPudding {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 70.0;
        s.power += 100.0;
        // unimplemented: xp, 10.0
    }
}
impl Vary for PassionFruitTapiocaPudding {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl PassionFruitTapiocaPudding {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Passion Fruit Tapioca Pudding"
    }
}

/// Peppermint Omnomberry Bar
pub type PeppermintOmnomberryBar = NoFood;

/// Bowl of Poultry Satay
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PoultrySatay;
#[allow(unused_variables)]
impl Effect for PoultrySatay {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 70.0;
        s.healing_power += 100.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for PoultrySatay {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl PoultrySatay {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Poultry Satay"
    }
}

/// Prickly Pear Pie
pub type PricklyPearPie = CactusFruitSalad;

/// Bowl of Prickly Pear Sorbet
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PricklyPearSorbet;
#[allow(unused_variables)]
impl Effect for PricklyPearSorbet {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 100.0;
        // unimplemented (PricklyPearSorbet): xp_from_kills, 10.0
        // unknown (PricklyPearSorbet): 33% chance to gain might on critical hit
        // unimplemented (RoastedCactus): xp_from_kills, 10.0
        // unknown (RoastedCactus): 33% chance to gain might on critical hit
        // unimplemented (WinterberrySorbet): magic_find, 30.0
        // unimplemented (WinterberrySorbet): xp_from_kills, 10.0
        // unknown (WinterberrySorbet): 28% chance to gain might on critical hit
    }
}
impl Vary for PricklyPearSorbet {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl PricklyPearSorbet {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Prickly Pear Sorbet / Plate of Roasted Cactus / Winterberry Sorbet"
    }
}

/// Prickly Pear Stuffed Nopal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PricklyPearStuffedNopal;
#[allow(unused_variables)]
impl Effect for PricklyPearStuffedNopal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.power += 70.0;
        // unimplemented (PricklyPearStuffedNopal): xp_from_kills, 10.0
        // unimplemented (SweetAndSpicyBeans): xp_from_kills, 10.0
    }
}
impl Vary for PricklyPearStuffedNopal {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl PricklyPearStuffedNopal {
    pub fn display_name(&self) -> &'static str {
        "Prickly Pear Stuffed Nopal / Bowl of Sweet and Spicy Beans"
    }
}

/// Bowl of Prickly Pear Tapioca Pudding
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PricklyPearTapiocaPudding;
#[allow(unused_variables)]
impl Effect for PricklyPearTapiocaPudding {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.healing_power += 70.0;
        // unimplemented (PricklyPearTapiocaPudding): xp_from_kills, 10.0
        // unimplemented (SaffronMussels): xp_from_kills, 10.0
    }
}
impl Vary for PricklyPearTapiocaPudding {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl PricklyPearTapiocaPudding {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Prickly Pear Tapioca Pudding / Saffron Mussels"
    }
}

/// Quiche of Darkness
pub type QuicheOfDarkness = FishStew;

/// Rare Veggie Pizza
pub type RareVeggiePizza = GarlicKaleSautee;

/// Red-Lentil Saobosa
pub type RedLentilSaobosa = GarlicKaleSautee;

/// Redfish Sushi
pub type RedfishSushi = NoFood;

/// Bowl of Refugee's Beet Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct RefugeesBeetSoup;
#[allow(unused_variables)]
impl Effect for RefugeesBeetSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 100.0;
        // unknown: +10 experience from kills
        // unknown: 20% magic find
    }
}
impl Vary for RefugeesBeetSoup {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl RefugeesBeetSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Refugee's Beet Soup"
    }
}

/// Plate of Roasted Cactus
pub type RoastedCactus = PricklyPearSorbet;

/// Bowl of Roasted Lotus Root
pub type RoastedLotusRoot = BlackPepperCactusSalad;

/// Loaf of Saffron Bread
pub type SaffronBread = NoFood;

/// Bowl of Saffron-Mango Ice Cream
pub type SaffronMangoIceCream = KralkachocolateBar;

/// Saffron Mussels
pub type SaffronMussels = PricklyPearTapiocaPudding;

/// Saffron Stuffed Mushroom
pub type SaffronStuffedMushroom = BlockOfTofu;

/// Bowl of Saffron-scented Poultry Soup
pub type SaffronscentedPoultrySoup = CheesyCassavaRoll;

/// Saint Bones
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SaintBones;
#[allow(unused_variables)]
impl Effect for SaintBones {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.precision += 70.0;
        // unimplemented: xp_from_kills, 15.0
    }
}
impl Vary for SaintBones {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl SaintBones {
    pub fn display_name(&self) -> &'static str {
        "Saint Bones"
    }
}

/// Scoop of Mintberry Swirl Ice Cream
pub type ScoopOfMintberrySwirlIceCream = BlockOfTofu;

/// Bowl of Seaweed Salad
pub type SeaweedSalad = NoFood;

/// Slice of Allspice Cake
pub type SliceOfAllspiceCake = ChocolateOmnomberryCake;

/// Slice of Allspice Cake with Ice Cream
pub type SliceOfAllspiceCakeWithIceCream = CupOfLotusFries;

/// Slice of Candied Dragon Roll
pub type SliceOfCandiedDragonRoll = BlockOfTofu;

/// Soul Cake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SoulCake;
#[allow(unused_variables)]
impl Effect for SoulCake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.vitality += 70.0;
        // unimplemented: xp_from_kills, 15.0
    }
}
impl Vary for SoulCake {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl SoulCake {
    pub fn display_name(&self) -> &'static str {
        "Soul Cake"
    }
}

/// Soul Pastry
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SoulPastry;
#[allow(unused_variables)]
impl Effect for SoulPastry {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 100.0;
        s.power += 70.0;
        // unimplemented: xp_from_kills, 15.0
    }
}
impl Vary for SoulPastry {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl SoulPastry {
    pub fn display_name(&self) -> &'static str {
        "Soul Pastry"
    }
}

/// Spicy Chocolate Cookie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SpicyChocolateCookie;
#[allow(unused_variables)]
impl Effect for SpicyChocolateCookie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.precision += 70.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for SpicyChocolateCookie {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl SpicyChocolateCookie {
    pub fn display_name(&self) -> &'static str {
        "Spicy Chocolate Cookie"
    }
}

/// Plate of Spicy Herbed Chicken
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SpicyHerbedChicken;
#[allow(unused_variables)]
impl Effect for SpicyHerbedChicken {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 70.0;
        s.toughness += 100.0;
        // unknown: +10 experience from kills
    }
}
impl Vary for SpicyHerbedChicken {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl SpicyHerbedChicken {
    pub fn display_name(&self) -> &'static str {
        "Plate of Spicy Herbed Chicken"
    }
}

/// Spicy Marinated Mushroom
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SpicyMarinatedMushroom;
#[allow(unused_variables)]
impl Effect for SpicyMarinatedMushroom {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.toughness += 70.0;
        // unknown: +10 experience from kills
    }
}
impl Vary for SpicyMarinatedMushroom {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl SpicyMarinatedMushroom {
    pub fn display_name(&self) -> &'static str {
        "Spicy Marinated Mushroom"
    }
}

/// Spicy Pumpkin Cookie
pub type SpicyPumpkinCookie = CupOfLotusFries;

/// Spring Roll
pub type SpringRoll = ChocolateOmnomberryCream;

/// Steak with Winterberry Sauce
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SteakWithWinterberrySauce;
#[allow(unused_variables)]
impl Effect for SteakWithWinterberrySauce {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.precision += 70.0;
        // unimplemented (SteakWithWinterberrySauce): magic_find, 30.0
        // unimplemented (SteakWithWinterberrySauce): xp_from_kills, 10.0
        // unimplemented (TruffleSteak): xp_from_kills, 10.0
    }
}
impl Vary for SteakWithWinterberrySauce {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl SteakWithWinterberrySauce {
    pub fn display_name(&self) -> &'static str {
        "Steak with Winterberry Sauce / Plate of Truffle Steak"
    }
}

/// Steamed Red Dumpling
pub type SteamedRedDumpling = NoFood;

/// Super-Hot Lemongrass Poultry Soup
pub type SuperHotLemongrassPoultrySoup = FishStew;

/// Super-Hot Saffron-Scented Poultry Soup
pub type SuperHotSaffronScentedPoultrySoup = CheesyCassavaRoll;

/// Bowl of Sweet and Spicy Beans
pub type SweetAndSpicyBeans = PricklyPearStuffedNopal;

/// Bowl of Sweet and Spicy Butternut Squash Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SweetAndSpicyButternutSquashSoup;
#[allow(unused_variables)]
impl Effect for SweetAndSpicyButternutSquashSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 70.0;
        s.power += 100.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for SweetAndSpicyButternutSquashSoup {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl SweetAndSpicyButternutSquashSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Sweet and Spicy Butternut Squash Soup"
    }
}

/// Sweet Bean Bun
pub type SweetBeanBun = OystersGnashblade;

/// Plate of Sweet Curried Mussels
pub type SweetCurriedMussels = CarrotSouffl;

/// Swiftly Scrambled Eggs
pub type SwiftlyScrambledEggs = NoFood;

/// Bowl of Tapioca Pudding
pub type TapiocaPudding = NoFood;

/// Bowl of Tropical Fruit Salad
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TropicalFruitSalad;
#[allow(unused_variables)]
impl Effect for TropicalFruitSalad {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 70.0;
        s.healing_power += 100.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for TropicalFruitSalad {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl TropicalFruitSalad {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Tropical Fruit Salad"
    }
}

/// Bowl of Tropical Mousse
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TropicalMousse;
#[allow(unused_variables)]
impl Effect for TropicalMousse {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 70.0;
        s.toughness += 100.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for TropicalMousse {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl TropicalMousse {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Tropical Mousse"
    }
}

/// Tropical Peppermint Cake
pub type TropicalPeppermintCake = FishStew;

/// Bowl of Truffle Ravioli
pub type TruffleRavioli = FrostgorgeClams;

/// Bowl of Truffle Risotto
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TruffleRisotto;
#[allow(unused_variables)]
impl Effect for TruffleRisotto {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.precision += 70.0;
        // unimplemented: xp_from_kills, 10.0
    }
}
impl Vary for TruffleRisotto {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        _proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        f(base);
    }
}
impl TruffleRisotto {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Truffle Risotto"
    }
}

/// Bowl of Truffle Sautee
pub type TruffleSautee = CarrotSouffl;

/// Plate of Truffle Steak
pub type TruffleSteak = SteakWithWinterberrySauce;

/// Plate of Truffle Steak Dinner
pub type TruffleSteakDinner = CarrotSouffl;

/// Winterberry Pie
pub type WinterberryPie = BlockOfTofu;

/// Bowl of Winterberry Seaweed Salad
pub type WinterberrySeaweedSalad = NoFood;

/// Winterberry Sorbet
pub type WinterberrySorbet = PricklyPearSorbet;

/// Bowl of Zesty Turnip Soup
pub type ZestyTurnipSoup = DragonfishCandy;

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
pub enum Food {
    NoFood(NoFood),
    BlockOfTofu(BlockOfTofu),
    BlackPepperCactusSalad(BlackPepperCactusSalad),
    CactusFruitSalad(CactusFruitSalad),
    ChocolateTapiocaPudding(ChocolateTapiocaPudding),
    CurryButternutSquashSoup(CurryButternutSquashSoup),
    CurryPumpkinSoup(CurryPumpkinSoup),
    FancyPotatoAndLeekSoup(FancyPotatoAndLeekSoup),
    FireMeatChili(FireMeatChili),
    FireVeggieChili(FireVeggieChili),
    FishStew(FishStew),
    GarlicKaleSautee(GarlicKaleSautee),
    CupOfLotusFries(CupOfLotusFries),
    ChocolateOmnomberryCake(ChocolateOmnomberryCake),
    MarjorysExperimentalChili(MarjorysExperimentalChili),
    CandyCactusCornbread(CandyCactusCornbread),
    OrrianTruffleSoup(OrrianTruffleSoup),
    PassionFruitTapiocaPudding(PassionFruitTapiocaPudding),
    PoultrySatay(PoultrySatay),
    PricklyPearSorbet(PricklyPearSorbet),
    PricklyPearTapiocaPudding(PricklyPearTapiocaPudding),
    RefugeesBeetSoup(RefugeesBeetSoup),
    KralkachocolateBar(KralkachocolateBar),
    CheesyCassavaRoll(CheesyCassavaRoll),
    PricklyPearStuffedNopal(PricklyPearStuffedNopal),
    SweetAndSpicyButternutSquashSoup(SweetAndSpicyButternutSquashSoup),
    TropicalFruitSalad(TropicalFruitSalad),
    TropicalMousse(TropicalMousse),
    FrostgorgeClams(FrostgorgeClams),
    TruffleRisotto(TruffleRisotto),
    CarrotSouffl(CarrotSouffl),
    DragonfishCandy(DragonfishCandy),
    ChocolateOmnomberryCream(ChocolateOmnomberryCream),
    DeliciousRiceBall(DeliciousRiceBall),
    DragonsRevelryStarcake(DragonsRevelryStarcake),
    FancyTruffleBurger(FancyTruffleBurger),
    Flatbread(Flatbread),
    IcyFishSnack(IcyFishSnack),
    LakeDoricMussels(LakeDoricMussels),
    OmnomberryBread(OmnomberryBread),
    MushroomLoaf(MushroomLoaf),
    OmnomberryCookie(OmnomberryCookie),
    OystersGnashblade(OystersGnashblade),
    BeefRendang(BeefRendang),
    FireFlankSteak(FireFlankSteak),
    JerkPoultry(JerkPoultry),
    MusselsGnashblade(MusselsGnashblade),
    OrrianSteakFrittes(OrrianSteakFrittes),
    SpicyHerbedChicken(SpicyHerbedChicken),
    SteakWithWinterberrySauce(SteakWithWinterberrySauce),
    SaintBones(SaintBones),
    SoulCake(SoulCake),
    SoulPastry(SoulPastry),
    SpicyChocolateCookie(SpicyChocolateCookie),
    SpicyMarinatedMushroom(SpicyMarinatedMushroom),
}
impl Effect for Food {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Food::NoFood(x) => x.add_permanent(s, m),
            Food::BlockOfTofu(x) => x.add_permanent(s, m),
            Food::BlackPepperCactusSalad(x) => x.add_permanent(s, m),
            Food::CactusFruitSalad(x) => x.add_permanent(s, m),
            Food::ChocolateTapiocaPudding(x) => x.add_permanent(s, m),
            Food::CurryButternutSquashSoup(x) => x.add_permanent(s, m),
            Food::CurryPumpkinSoup(x) => x.add_permanent(s, m),
            Food::FancyPotatoAndLeekSoup(x) => x.add_permanent(s, m),
            Food::FireMeatChili(x) => x.add_permanent(s, m),
            Food::FireVeggieChili(x) => x.add_permanent(s, m),
            Food::FishStew(x) => x.add_permanent(s, m),
            Food::GarlicKaleSautee(x) => x.add_permanent(s, m),
            Food::CupOfLotusFries(x) => x.add_permanent(s, m),
            Food::ChocolateOmnomberryCake(x) => x.add_permanent(s, m),
            Food::MarjorysExperimentalChili(x) => x.add_permanent(s, m),
            Food::CandyCactusCornbread(x) => x.add_permanent(s, m),
            Food::OrrianTruffleSoup(x) => x.add_permanent(s, m),
            Food::PassionFruitTapiocaPudding(x) => x.add_permanent(s, m),
            Food::PoultrySatay(x) => x.add_permanent(s, m),
            Food::PricklyPearSorbet(x) => x.add_permanent(s, m),
            Food::PricklyPearTapiocaPudding(x) => x.add_permanent(s, m),
            Food::RefugeesBeetSoup(x) => x.add_permanent(s, m),
            Food::KralkachocolateBar(x) => x.add_permanent(s, m),
            Food::CheesyCassavaRoll(x) => x.add_permanent(s, m),
            Food::PricklyPearStuffedNopal(x) => x.add_permanent(s, m),
            Food::SweetAndSpicyButternutSquashSoup(x) => x.add_permanent(s, m),
            Food::TropicalFruitSalad(x) => x.add_permanent(s, m),
            Food::TropicalMousse(x) => x.add_permanent(s, m),
            Food::FrostgorgeClams(x) => x.add_permanent(s, m),
            Food::TruffleRisotto(x) => x.add_permanent(s, m),
            Food::CarrotSouffl(x) => x.add_permanent(s, m),
            Food::DragonfishCandy(x) => x.add_permanent(s, m),
            Food::ChocolateOmnomberryCream(x) => x.add_permanent(s, m),
            Food::DeliciousRiceBall(x) => x.add_permanent(s, m),
            Food::DragonsRevelryStarcake(x) => x.add_permanent(s, m),
            Food::FancyTruffleBurger(x) => x.add_permanent(s, m),
            Food::Flatbread(x) => x.add_permanent(s, m),
            Food::IcyFishSnack(x) => x.add_permanent(s, m),
            Food::LakeDoricMussels(x) => x.add_permanent(s, m),
            Food::OmnomberryBread(x) => x.add_permanent(s, m),
            Food::MushroomLoaf(x) => x.add_permanent(s, m),
            Food::OmnomberryCookie(x) => x.add_permanent(s, m),
            Food::OystersGnashblade(x) => x.add_permanent(s, m),
            Food::BeefRendang(x) => x.add_permanent(s, m),
            Food::FireFlankSteak(x) => x.add_permanent(s, m),
            Food::JerkPoultry(x) => x.add_permanent(s, m),
            Food::MusselsGnashblade(x) => x.add_permanent(s, m),
            Food::OrrianSteakFrittes(x) => x.add_permanent(s, m),
            Food::SpicyHerbedChicken(x) => x.add_permanent(s, m),
            Food::SteakWithWinterberrySauce(x) => x.add_permanent(s, m),
            Food::SaintBones(x) => x.add_permanent(s, m),
            Food::SoulCake(x) => x.add_permanent(s, m),
            Food::SoulPastry(x) => x.add_permanent(s, m),
            Food::SpicyChocolateCookie(x) => x.add_permanent(s, m),
            Food::SpicyMarinatedMushroom(x) => x.add_permanent(s, m),
        }
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Food::NoFood(x) => x.distribute(s, m),
            Food::BlockOfTofu(x) => x.distribute(s, m),
            Food::BlackPepperCactusSalad(x) => x.distribute(s, m),
            Food::CactusFruitSalad(x) => x.distribute(s, m),
            Food::ChocolateTapiocaPudding(x) => x.distribute(s, m),
            Food::CurryButternutSquashSoup(x) => x.distribute(s, m),
            Food::CurryPumpkinSoup(x) => x.distribute(s, m),
            Food::FancyPotatoAndLeekSoup(x) => x.distribute(s, m),
            Food::FireMeatChili(x) => x.distribute(s, m),
            Food::FireVeggieChili(x) => x.distribute(s, m),
            Food::FishStew(x) => x.distribute(s, m),
            Food::GarlicKaleSautee(x) => x.distribute(s, m),
            Food::CupOfLotusFries(x) => x.distribute(s, m),
            Food::ChocolateOmnomberryCake(x) => x.distribute(s, m),
            Food::MarjorysExperimentalChili(x) => x.distribute(s, m),
            Food::CandyCactusCornbread(x) => x.distribute(s, m),
            Food::OrrianTruffleSoup(x) => x.distribute(s, m),
            Food::PassionFruitTapiocaPudding(x) => x.distribute(s, m),
            Food::PoultrySatay(x) => x.distribute(s, m),
            Food::PricklyPearSorbet(x) => x.distribute(s, m),
            Food::PricklyPearTapiocaPudding(x) => x.distribute(s, m),
            Food::RefugeesBeetSoup(x) => x.distribute(s, m),
            Food::KralkachocolateBar(x) => x.distribute(s, m),
            Food::CheesyCassavaRoll(x) => x.distribute(s, m),
            Food::PricklyPearStuffedNopal(x) => x.distribute(s, m),
            Food::SweetAndSpicyButternutSquashSoup(x) => x.distribute(s, m),
            Food::TropicalFruitSalad(x) => x.distribute(s, m),
            Food::TropicalMousse(x) => x.distribute(s, m),
            Food::FrostgorgeClams(x) => x.distribute(s, m),
            Food::TruffleRisotto(x) => x.distribute(s, m),
            Food::CarrotSouffl(x) => x.distribute(s, m),
            Food::DragonfishCandy(x) => x.distribute(s, m),
            Food::ChocolateOmnomberryCream(x) => x.distribute(s, m),
            Food::DeliciousRiceBall(x) => x.distribute(s, m),
            Food::DragonsRevelryStarcake(x) => x.distribute(s, m),
            Food::FancyTruffleBurger(x) => x.distribute(s, m),
            Food::Flatbread(x) => x.distribute(s, m),
            Food::IcyFishSnack(x) => x.distribute(s, m),
            Food::LakeDoricMussels(x) => x.distribute(s, m),
            Food::OmnomberryBread(x) => x.distribute(s, m),
            Food::MushroomLoaf(x) => x.distribute(s, m),
            Food::OmnomberryCookie(x) => x.distribute(s, m),
            Food::OystersGnashblade(x) => x.distribute(s, m),
            Food::BeefRendang(x) => x.distribute(s, m),
            Food::FireFlankSteak(x) => x.distribute(s, m),
            Food::JerkPoultry(x) => x.distribute(s, m),
            Food::MusselsGnashblade(x) => x.distribute(s, m),
            Food::OrrianSteakFrittes(x) => x.distribute(s, m),
            Food::SpicyHerbedChicken(x) => x.distribute(s, m),
            Food::SteakWithWinterberrySauce(x) => x.distribute(s, m),
            Food::SaintBones(x) => x.distribute(s, m),
            Food::SoulCake(x) => x.distribute(s, m),
            Food::SoulPastry(x) => x.distribute(s, m),
            Food::SpicyChocolateCookie(x) => x.distribute(s, m),
            Food::SpicyMarinatedMushroom(x) => x.distribute(s, m),
        }
    }
    fn add_temporary(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Food::NoFood(x) => x.add_temporary(s, m),
            Food::BlockOfTofu(x) => x.add_temporary(s, m),
            Food::BlackPepperCactusSalad(x) => x.add_temporary(s, m),
            Food::CactusFruitSalad(x) => x.add_temporary(s, m),
            Food::ChocolateTapiocaPudding(x) => x.add_temporary(s, m),
            Food::CurryButternutSquashSoup(x) => x.add_temporary(s, m),
            Food::CurryPumpkinSoup(x) => x.add_temporary(s, m),
            Food::FancyPotatoAndLeekSoup(x) => x.add_temporary(s, m),
            Food::FireMeatChili(x) => x.add_temporary(s, m),
            Food::FireVeggieChili(x) => x.add_temporary(s, m),
            Food::FishStew(x) => x.add_temporary(s, m),
            Food::GarlicKaleSautee(x) => x.add_temporary(s, m),
            Food::CupOfLotusFries(x) => x.add_temporary(s, m),
            Food::ChocolateOmnomberryCake(x) => x.add_temporary(s, m),
            Food::MarjorysExperimentalChili(x) => x.add_temporary(s, m),
            Food::CandyCactusCornbread(x) => x.add_temporary(s, m),
            Food::OrrianTruffleSoup(x) => x.add_temporary(s, m),
            Food::PassionFruitTapiocaPudding(x) => x.add_temporary(s, m),
            Food::PoultrySatay(x) => x.add_temporary(s, m),
            Food::PricklyPearSorbet(x) => x.add_temporary(s, m),
            Food::PricklyPearTapiocaPudding(x) => x.add_temporary(s, m),
            Food::RefugeesBeetSoup(x) => x.add_temporary(s, m),
            Food::KralkachocolateBar(x) => x.add_temporary(s, m),
            Food::CheesyCassavaRoll(x) => x.add_temporary(s, m),
            Food::PricklyPearStuffedNopal(x) => x.add_temporary(s, m),
            Food::SweetAndSpicyButternutSquashSoup(x) => x.add_temporary(s, m),
            Food::TropicalFruitSalad(x) => x.add_temporary(s, m),
            Food::TropicalMousse(x) => x.add_temporary(s, m),
            Food::FrostgorgeClams(x) => x.add_temporary(s, m),
            Food::TruffleRisotto(x) => x.add_temporary(s, m),
            Food::CarrotSouffl(x) => x.add_temporary(s, m),
            Food::DragonfishCandy(x) => x.add_temporary(s, m),
            Food::ChocolateOmnomberryCream(x) => x.add_temporary(s, m),
            Food::DeliciousRiceBall(x) => x.add_temporary(s, m),
            Food::DragonsRevelryStarcake(x) => x.add_temporary(s, m),
            Food::FancyTruffleBurger(x) => x.add_temporary(s, m),
            Food::Flatbread(x) => x.add_temporary(s, m),
            Food::IcyFishSnack(x) => x.add_temporary(s, m),
            Food::LakeDoricMussels(x) => x.add_temporary(s, m),
            Food::OmnomberryBread(x) => x.add_temporary(s, m),
            Food::MushroomLoaf(x) => x.add_temporary(s, m),
            Food::OmnomberryCookie(x) => x.add_temporary(s, m),
            Food::OystersGnashblade(x) => x.add_temporary(s, m),
            Food::BeefRendang(x) => x.add_temporary(s, m),
            Food::FireFlankSteak(x) => x.add_temporary(s, m),
            Food::JerkPoultry(x) => x.add_temporary(s, m),
            Food::MusselsGnashblade(x) => x.add_temporary(s, m),
            Food::OrrianSteakFrittes(x) => x.add_temporary(s, m),
            Food::SpicyHerbedChicken(x) => x.add_temporary(s, m),
            Food::SteakWithWinterberrySauce(x) => x.add_temporary(s, m),
            Food::SaintBones(x) => x.add_temporary(s, m),
            Food::SoulCake(x) => x.add_temporary(s, m),
            Food::SoulPastry(x) => x.add_temporary(s, m),
            Food::SpicyChocolateCookie(x) => x.add_temporary(s, m),
            Food::SpicyMarinatedMushroom(x) => x.add_temporary(s, m),
        }
    }
}
impl Food {
    pub const COUNT: usize = 55;
    pub fn from_index(i: usize) -> Food {
        match i {
            0 => Food::NoFood(NoFood),
            1 => Food::BlockOfTofu(BlockOfTofu),
            2 => Food::BlackPepperCactusSalad(BlackPepperCactusSalad),
            3 => Food::CactusFruitSalad(CactusFruitSalad),
            4 => Food::ChocolateTapiocaPudding(ChocolateTapiocaPudding),
            5 => Food::CurryButternutSquashSoup(CurryButternutSquashSoup),
            6 => Food::CurryPumpkinSoup(CurryPumpkinSoup),
            7 => Food::FancyPotatoAndLeekSoup(FancyPotatoAndLeekSoup),
            8 => Food::FireMeatChili(FireMeatChili),
            9 => Food::FireVeggieChili(FireVeggieChili),
            10 => Food::FishStew(FishStew),
            11 => Food::GarlicKaleSautee(GarlicKaleSautee),
            12 => Food::CupOfLotusFries(CupOfLotusFries),
            13 => Food::ChocolateOmnomberryCake(ChocolateOmnomberryCake),
            14 => Food::MarjorysExperimentalChili(MarjorysExperimentalChili),
            15 => Food::CandyCactusCornbread(CandyCactusCornbread),
            16 => Food::OrrianTruffleSoup(OrrianTruffleSoup),
            17 => Food::PassionFruitTapiocaPudding(PassionFruitTapiocaPudding),
            18 => Food::PoultrySatay(PoultrySatay),
            19 => Food::PricklyPearSorbet(PricklyPearSorbet),
            20 => Food::PricklyPearTapiocaPudding(PricklyPearTapiocaPudding),
            21 => Food::RefugeesBeetSoup(RefugeesBeetSoup),
            22 => Food::KralkachocolateBar(KralkachocolateBar),
            23 => Food::CheesyCassavaRoll(CheesyCassavaRoll),
            24 => Food::PricklyPearStuffedNopal(PricklyPearStuffedNopal),
            25 => Food::SweetAndSpicyButternutSquashSoup(SweetAndSpicyButternutSquashSoup),
            26 => Food::TropicalFruitSalad(TropicalFruitSalad),
            27 => Food::TropicalMousse(TropicalMousse),
            28 => Food::FrostgorgeClams(FrostgorgeClams),
            29 => Food::TruffleRisotto(TruffleRisotto),
            30 => Food::CarrotSouffl(CarrotSouffl),
            31 => Food::DragonfishCandy(DragonfishCandy),
            32 => Food::ChocolateOmnomberryCream(ChocolateOmnomberryCream),
            33 => Food::DeliciousRiceBall(DeliciousRiceBall),
            34 => Food::DragonsRevelryStarcake(DragonsRevelryStarcake),
            35 => Food::FancyTruffleBurger(FancyTruffleBurger),
            36 => Food::Flatbread(Flatbread),
            37 => Food::IcyFishSnack(IcyFishSnack),
            38 => Food::LakeDoricMussels(LakeDoricMussels),
            39 => Food::OmnomberryBread(OmnomberryBread),
            40 => Food::MushroomLoaf(MushroomLoaf),
            41 => Food::OmnomberryCookie(OmnomberryCookie),
            42 => Food::OystersGnashblade(OystersGnashblade),
            43 => Food::BeefRendang(BeefRendang),
            44 => Food::FireFlankSteak(FireFlankSteak),
            45 => Food::JerkPoultry(JerkPoultry),
            46 => Food::MusselsGnashblade(MusselsGnashblade),
            47 => Food::OrrianSteakFrittes(OrrianSteakFrittes),
            48 => Food::SpicyHerbedChicken(SpicyHerbedChicken),
            49 => Food::SteakWithWinterberrySauce(SteakWithWinterberrySauce),
            50 => Food::SaintBones(SaintBones),
            51 => Food::SoulCake(SoulCake),
            52 => Food::SoulPastry(SoulPastry),
            53 => Food::SpicyChocolateCookie(SpicyChocolateCookie),
            54 => Food::SpicyMarinatedMushroom(SpicyMarinatedMushroom),
            _ => panic!("index {} out of range for Food", i),
        }
    }
    pub fn iter() -> impl Iterator<Item = Food> {
        (0 .. Food::COUNT).map(Food::from_index)
    }
    pub fn display_name(self) -> &'static str {
        match self {
            Food::NoFood(x) => x.display_name(),
            Food::BlockOfTofu(x) => x.display_name(),
            Food::BlackPepperCactusSalad(x) => x.display_name(),
            Food::CactusFruitSalad(x) => x.display_name(),
            Food::ChocolateTapiocaPudding(x) => x.display_name(),
            Food::CurryButternutSquashSoup(x) => x.display_name(),
            Food::CurryPumpkinSoup(x) => x.display_name(),
            Food::FancyPotatoAndLeekSoup(x) => x.display_name(),
            Food::FireMeatChili(x) => x.display_name(),
            Food::FireVeggieChili(x) => x.display_name(),
            Food::FishStew(x) => x.display_name(),
            Food::GarlicKaleSautee(x) => x.display_name(),
            Food::CupOfLotusFries(x) => x.display_name(),
            Food::ChocolateOmnomberryCake(x) => x.display_name(),
            Food::MarjorysExperimentalChili(x) => x.display_name(),
            Food::CandyCactusCornbread(x) => x.display_name(),
            Food::OrrianTruffleSoup(x) => x.display_name(),
            Food::PassionFruitTapiocaPudding(x) => x.display_name(),
            Food::PoultrySatay(x) => x.display_name(),
            Food::PricklyPearSorbet(x) => x.display_name(),
            Food::PricklyPearTapiocaPudding(x) => x.display_name(),
            Food::RefugeesBeetSoup(x) => x.display_name(),
            Food::KralkachocolateBar(x) => x.display_name(),
            Food::CheesyCassavaRoll(x) => x.display_name(),
            Food::PricklyPearStuffedNopal(x) => x.display_name(),
            Food::SweetAndSpicyButternutSquashSoup(x) => x.display_name(),
            Food::TropicalFruitSalad(x) => x.display_name(),
            Food::TropicalMousse(x) => x.display_name(),
            Food::FrostgorgeClams(x) => x.display_name(),
            Food::TruffleRisotto(x) => x.display_name(),
            Food::CarrotSouffl(x) => x.display_name(),
            Food::DragonfishCandy(x) => x.display_name(),
            Food::ChocolateOmnomberryCream(x) => x.display_name(),
            Food::DeliciousRiceBall(x) => x.display_name(),
            Food::DragonsRevelryStarcake(x) => x.display_name(),
            Food::FancyTruffleBurger(x) => x.display_name(),
            Food::Flatbread(x) => x.display_name(),
            Food::IcyFishSnack(x) => x.display_name(),
            Food::LakeDoricMussels(x) => x.display_name(),
            Food::OmnomberryBread(x) => x.display_name(),
            Food::MushroomLoaf(x) => x.display_name(),
            Food::OmnomberryCookie(x) => x.display_name(),
            Food::OystersGnashblade(x) => x.display_name(),
            Food::BeefRendang(x) => x.display_name(),
            Food::FireFlankSteak(x) => x.display_name(),
            Food::JerkPoultry(x) => x.display_name(),
            Food::MusselsGnashblade(x) => x.display_name(),
            Food::OrrianSteakFrittes(x) => x.display_name(),
            Food::SpicyHerbedChicken(x) => x.display_name(),
            Food::SteakWithWinterberrySauce(x) => x.display_name(),
            Food::SaintBones(x) => x.display_name(),
            Food::SoulCake(x) => x.display_name(),
            Food::SoulPastry(x) => x.display_name(),
            Food::SpicyChocolateCookie(x) => x.display_name(),
            Food::SpicyMarinatedMushroom(x) => x.display_name(),
        }
    }
}
impl From<NoFood> for Food {
    fn from(x: NoFood) -> Food { Food::NoFood(x) }
}
impl From<BlockOfTofu> for Food {
    fn from(x: BlockOfTofu) -> Food { Food::BlockOfTofu(x) }
}
impl From<BlackPepperCactusSalad> for Food {
    fn from(x: BlackPepperCactusSalad) -> Food { Food::BlackPepperCactusSalad(x) }
}
impl From<CactusFruitSalad> for Food {
    fn from(x: CactusFruitSalad) -> Food { Food::CactusFruitSalad(x) }
}
impl From<ChocolateTapiocaPudding> for Food {
    fn from(x: ChocolateTapiocaPudding) -> Food { Food::ChocolateTapiocaPudding(x) }
}
impl From<CurryButternutSquashSoup> for Food {
    fn from(x: CurryButternutSquashSoup) -> Food { Food::CurryButternutSquashSoup(x) }
}
impl From<CurryPumpkinSoup> for Food {
    fn from(x: CurryPumpkinSoup) -> Food { Food::CurryPumpkinSoup(x) }
}
impl From<FancyPotatoAndLeekSoup> for Food {
    fn from(x: FancyPotatoAndLeekSoup) -> Food { Food::FancyPotatoAndLeekSoup(x) }
}
impl From<FireMeatChili> for Food {
    fn from(x: FireMeatChili) -> Food { Food::FireMeatChili(x) }
}
impl From<FireVeggieChili> for Food {
    fn from(x: FireVeggieChili) -> Food { Food::FireVeggieChili(x) }
}
impl From<FishStew> for Food {
    fn from(x: FishStew) -> Food { Food::FishStew(x) }
}
impl From<GarlicKaleSautee> for Food {
    fn from(x: GarlicKaleSautee) -> Food { Food::GarlicKaleSautee(x) }
}
impl From<CupOfLotusFries> for Food {
    fn from(x: CupOfLotusFries) -> Food { Food::CupOfLotusFries(x) }
}
impl From<ChocolateOmnomberryCake> for Food {
    fn from(x: ChocolateOmnomberryCake) -> Food { Food::ChocolateOmnomberryCake(x) }
}
impl From<MarjorysExperimentalChili> for Food {
    fn from(x: MarjorysExperimentalChili) -> Food { Food::MarjorysExperimentalChili(x) }
}
impl From<CandyCactusCornbread> for Food {
    fn from(x: CandyCactusCornbread) -> Food { Food::CandyCactusCornbread(x) }
}
impl From<OrrianTruffleSoup> for Food {
    fn from(x: OrrianTruffleSoup) -> Food { Food::OrrianTruffleSoup(x) }
}
impl From<PassionFruitTapiocaPudding> for Food {
    fn from(x: PassionFruitTapiocaPudding) -> Food { Food::PassionFruitTapiocaPudding(x) }
}
impl From<PoultrySatay> for Food {
    fn from(x: PoultrySatay) -> Food { Food::PoultrySatay(x) }
}
impl From<PricklyPearSorbet> for Food {
    fn from(x: PricklyPearSorbet) -> Food { Food::PricklyPearSorbet(x) }
}
impl From<PricklyPearTapiocaPudding> for Food {
    fn from(x: PricklyPearTapiocaPudding) -> Food { Food::PricklyPearTapiocaPudding(x) }
}
impl From<RefugeesBeetSoup> for Food {
    fn from(x: RefugeesBeetSoup) -> Food { Food::RefugeesBeetSoup(x) }
}
impl From<KralkachocolateBar> for Food {
    fn from(x: KralkachocolateBar) -> Food { Food::KralkachocolateBar(x) }
}
impl From<CheesyCassavaRoll> for Food {
    fn from(x: CheesyCassavaRoll) -> Food { Food::CheesyCassavaRoll(x) }
}
impl From<PricklyPearStuffedNopal> for Food {
    fn from(x: PricklyPearStuffedNopal) -> Food { Food::PricklyPearStuffedNopal(x) }
}
impl From<SweetAndSpicyButternutSquashSoup> for Food {
    fn from(x: SweetAndSpicyButternutSquashSoup) -> Food { Food::SweetAndSpicyButternutSquashSoup(x) }
}
impl From<TropicalFruitSalad> for Food {
    fn from(x: TropicalFruitSalad) -> Food { Food::TropicalFruitSalad(x) }
}
impl From<TropicalMousse> for Food {
    fn from(x: TropicalMousse) -> Food { Food::TropicalMousse(x) }
}
impl From<FrostgorgeClams> for Food {
    fn from(x: FrostgorgeClams) -> Food { Food::FrostgorgeClams(x) }
}
impl From<TruffleRisotto> for Food {
    fn from(x: TruffleRisotto) -> Food { Food::TruffleRisotto(x) }
}
impl From<CarrotSouffl> for Food {
    fn from(x: CarrotSouffl) -> Food { Food::CarrotSouffl(x) }
}
impl From<DragonfishCandy> for Food {
    fn from(x: DragonfishCandy) -> Food { Food::DragonfishCandy(x) }
}
impl From<ChocolateOmnomberryCream> for Food {
    fn from(x: ChocolateOmnomberryCream) -> Food { Food::ChocolateOmnomberryCream(x) }
}
impl From<DeliciousRiceBall> for Food {
    fn from(x: DeliciousRiceBall) -> Food { Food::DeliciousRiceBall(x) }
}
impl From<DragonsRevelryStarcake> for Food {
    fn from(x: DragonsRevelryStarcake) -> Food { Food::DragonsRevelryStarcake(x) }
}
impl From<FancyTruffleBurger> for Food {
    fn from(x: FancyTruffleBurger) -> Food { Food::FancyTruffleBurger(x) }
}
impl From<Flatbread> for Food {
    fn from(x: Flatbread) -> Food { Food::Flatbread(x) }
}
impl From<IcyFishSnack> for Food {
    fn from(x: IcyFishSnack) -> Food { Food::IcyFishSnack(x) }
}
impl From<LakeDoricMussels> for Food {
    fn from(x: LakeDoricMussels) -> Food { Food::LakeDoricMussels(x) }
}
impl From<OmnomberryBread> for Food {
    fn from(x: OmnomberryBread) -> Food { Food::OmnomberryBread(x) }
}
impl From<MushroomLoaf> for Food {
    fn from(x: MushroomLoaf) -> Food { Food::MushroomLoaf(x) }
}
impl From<OmnomberryCookie> for Food {
    fn from(x: OmnomberryCookie) -> Food { Food::OmnomberryCookie(x) }
}
impl From<OystersGnashblade> for Food {
    fn from(x: OystersGnashblade) -> Food { Food::OystersGnashblade(x) }
}
impl From<BeefRendang> for Food {
    fn from(x: BeefRendang) -> Food { Food::BeefRendang(x) }
}
impl From<FireFlankSteak> for Food {
    fn from(x: FireFlankSteak) -> Food { Food::FireFlankSteak(x) }
}
impl From<JerkPoultry> for Food {
    fn from(x: JerkPoultry) -> Food { Food::JerkPoultry(x) }
}
impl From<MusselsGnashblade> for Food {
    fn from(x: MusselsGnashblade) -> Food { Food::MusselsGnashblade(x) }
}
impl From<OrrianSteakFrittes> for Food {
    fn from(x: OrrianSteakFrittes) -> Food { Food::OrrianSteakFrittes(x) }
}
impl From<SpicyHerbedChicken> for Food {
    fn from(x: SpicyHerbedChicken) -> Food { Food::SpicyHerbedChicken(x) }
}
impl From<SteakWithWinterberrySauce> for Food {
    fn from(x: SteakWithWinterberrySauce) -> Food { Food::SteakWithWinterberrySauce(x) }
}
impl From<SaintBones> for Food {
    fn from(x: SaintBones) -> Food { Food::SaintBones(x) }
}
impl From<SoulCake> for Food {
    fn from(x: SoulCake) -> Food { Food::SoulCake(x) }
}
impl From<SoulPastry> for Food {
    fn from(x: SoulPastry) -> Food { Food::SoulPastry(x) }
}
impl From<SpicyChocolateCookie> for Food {
    fn from(x: SpicyChocolateCookie) -> Food { Food::SpicyChocolateCookie(x) }
}
impl From<SpicyMarinatedMushroom> for Food {
    fn from(x: SpicyMarinatedMushroom) -> Food { Food::SpicyMarinatedMushroom(x) }
}
impl Default for Food {
    fn default() -> Food { Food::NoFood(NoFood) }
}
impl Vary for Food {
    fn vary_at<T: ?Sized>(
        base: &mut T,
        mut proj: impl FnMut(&mut T) -> &mut Self,
        mut f: impl FnMut(&T),
    ) {
        let old = *proj(base);
        *proj(base) = Food::NoFood(NoFood);
        f(base);
        *proj(base) = Food::BlockOfTofu(BlockOfTofu);
        f(base);
        *proj(base) = Food::BlackPepperCactusSalad(BlackPepperCactusSalad);
        f(base);
        *proj(base) = Food::CactusFruitSalad(CactusFruitSalad);
        f(base);
        *proj(base) = Food::ChocolateTapiocaPudding(ChocolateTapiocaPudding);
        f(base);
        *proj(base) = Food::CurryButternutSquashSoup(CurryButternutSquashSoup);
        f(base);
        *proj(base) = Food::CurryPumpkinSoup(CurryPumpkinSoup);
        f(base);
        *proj(base) = Food::FancyPotatoAndLeekSoup(FancyPotatoAndLeekSoup);
        f(base);
        *proj(base) = Food::FireMeatChili(FireMeatChili);
        f(base);
        *proj(base) = Food::FireVeggieChili(FireVeggieChili);
        f(base);
        *proj(base) = Food::FishStew(FishStew);
        f(base);
        *proj(base) = Food::GarlicKaleSautee(GarlicKaleSautee);
        f(base);
        *proj(base) = Food::CupOfLotusFries(CupOfLotusFries);
        f(base);
        *proj(base) = Food::ChocolateOmnomberryCake(ChocolateOmnomberryCake);
        f(base);
        *proj(base) = Food::MarjorysExperimentalChili(MarjorysExperimentalChili);
        f(base);
        *proj(base) = Food::CandyCactusCornbread(CandyCactusCornbread);
        f(base);
        *proj(base) = Food::OrrianTruffleSoup(OrrianTruffleSoup);
        f(base);
        *proj(base) = Food::PassionFruitTapiocaPudding(PassionFruitTapiocaPudding);
        f(base);
        *proj(base) = Food::PoultrySatay(PoultrySatay);
        f(base);
        *proj(base) = Food::PricklyPearSorbet(PricklyPearSorbet);
        f(base);
        *proj(base) = Food::PricklyPearTapiocaPudding(PricklyPearTapiocaPudding);
        f(base);
        *proj(base) = Food::RefugeesBeetSoup(RefugeesBeetSoup);
        f(base);
        *proj(base) = Food::KralkachocolateBar(KralkachocolateBar);
        f(base);
        *proj(base) = Food::CheesyCassavaRoll(CheesyCassavaRoll);
        f(base);
        *proj(base) = Food::PricklyPearStuffedNopal(PricklyPearStuffedNopal);
        f(base);
        *proj(base) = Food::SweetAndSpicyButternutSquashSoup(SweetAndSpicyButternutSquashSoup);
        f(base);
        *proj(base) = Food::TropicalFruitSalad(TropicalFruitSalad);
        f(base);
        *proj(base) = Food::TropicalMousse(TropicalMousse);
        f(base);
        *proj(base) = Food::FrostgorgeClams(FrostgorgeClams);
        f(base);
        *proj(base) = Food::TruffleRisotto(TruffleRisotto);
        f(base);
        *proj(base) = Food::CarrotSouffl(CarrotSouffl);
        f(base);
        *proj(base) = Food::DragonfishCandy(DragonfishCandy);
        f(base);
        *proj(base) = Food::ChocolateOmnomberryCream(ChocolateOmnomberryCream);
        f(base);
        *proj(base) = Food::DeliciousRiceBall(DeliciousRiceBall);
        f(base);
        *proj(base) = Food::DragonsRevelryStarcake(DragonsRevelryStarcake);
        f(base);
        *proj(base) = Food::FancyTruffleBurger(FancyTruffleBurger);
        f(base);
        *proj(base) = Food::Flatbread(Flatbread);
        f(base);
        *proj(base) = Food::IcyFishSnack(IcyFishSnack);
        f(base);
        *proj(base) = Food::LakeDoricMussels(LakeDoricMussels);
        f(base);
        *proj(base) = Food::OmnomberryBread(OmnomberryBread);
        f(base);
        *proj(base) = Food::MushroomLoaf(MushroomLoaf);
        f(base);
        *proj(base) = Food::OmnomberryCookie(OmnomberryCookie);
        f(base);
        *proj(base) = Food::OystersGnashblade(OystersGnashblade);
        f(base);
        *proj(base) = Food::BeefRendang(BeefRendang);
        f(base);
        *proj(base) = Food::FireFlankSteak(FireFlankSteak);
        f(base);
        *proj(base) = Food::JerkPoultry(JerkPoultry);
        f(base);
        *proj(base) = Food::MusselsGnashblade(MusselsGnashblade);
        f(base);
        *proj(base) = Food::OrrianSteakFrittes(OrrianSteakFrittes);
        f(base);
        *proj(base) = Food::SpicyHerbedChicken(SpicyHerbedChicken);
        f(base);
        *proj(base) = Food::SteakWithWinterberrySauce(SteakWithWinterberrySauce);
        f(base);
        *proj(base) = Food::SaintBones(SaintBones);
        f(base);
        *proj(base) = Food::SoulCake(SoulCake);
        f(base);
        *proj(base) = Food::SoulPastry(SoulPastry);
        f(base);
        *proj(base) = Food::SpicyChocolateCookie(SpicyChocolateCookie);
        f(base);
        *proj(base) = Food::SpicyMarinatedMushroom(SpicyMarinatedMushroom);
        f(base);
        *proj(base) = old;
    }
}

// END GENERATED CODE
