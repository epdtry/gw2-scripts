use crate::character::{Vary, CombatSecond};
use crate::effect::Effect;
use crate::stats::{Stats, Modifiers};

// BEGIN GENERATED CODE
// Generated by gen_gear_tables.py for GW2 build 142239 at 2023-03-12T18:38:00

/// No Food
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct NoFood;
#[allow(unused_variables)]
impl Effect for NoFood {
}
impl Vary for NoFood {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl NoFood {
    pub fn display_name(&self) -> &'static str {
        "No Food"
    }
}

/// Plate of Beef Rendang
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BeefRendang;
#[allow(unused_variables)]
impl Effect for BeefRendang {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.expertise += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for BeefRendang {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl BeefRendang {
    pub fn display_name(&self) -> &'static str {
        "Plate of Beef Rendang"
    }
}

/// Bowl of Black Pepper Cactus Salad
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BlackPepperCactusSalad;
#[allow(unused_variables)]
impl Effect for BlackPepperCactusSalad {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain health every second
        s.toughness += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for BlackPepperCactusSalad {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl BlackPepperCactusSalad {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Black Pepper Cactus Salad"
    }
}

/// Block of Tofu
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BlockOfTofu;
#[allow(unused_variables)]
impl Effect for BlockOfTofu {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +100 power and ferocity for 30 seconds on kill
        s.precision += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for BlockOfTofu {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl BlockOfTofu {
    pub fn display_name(&self) -> &'static str {
        "Block of Tofu"
    }
}

/// Bowl of Cactus Fruit Salad
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CactusFruitSalad;
#[allow(unused_variables)]
impl Effect for CactusFruitSalad {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        // unknown: 33% chance to steal life on critical hit
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for CactusFruitSalad {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl CactusFruitSalad {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Cactus Fruit Salad"
    }
}

/// Bowl of Cactus Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CactusSoup;
#[allow(unused_variables)]
impl Effect for CactusSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain health every second
        s.toughness += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for CactusSoup {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl CactusSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Cactus Soup"
    }
}

/// Loaf of Candy Cactus Cornbread
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CandyCactusCornbread;
#[allow(unused_variables)]
impl Effect for CandyCactusCornbread {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 100.0;
        s.toughness += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for CandyCactusCornbread {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl CandyCactusCornbread {
    pub fn display_name(&self) -> &'static str {
        "Loaf of Candy Cactus Cornbread"
    }
}

/// Carrot Soufflé
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CarrotSouffl;
#[allow(unused_variables)]
impl Effect for CarrotSouffl {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +200 power for 30 seconds on kill
        s.ferocity += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for CarrotSouffl {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl CarrotSouffl {
    pub fn display_name(&self) -> &'static str {
        "Carrot Soufflé"
    }
}

/// Cheesy Cassava Roll
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CheesyCassavaRoll;
#[allow(unused_variables)]
impl Effect for CheesyCassavaRoll {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +200 toughness for 10 seconds on using a heal skill (cooldown: 20 seconds)
        s.healing_power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for CheesyCassavaRoll {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl CheesyCassavaRoll {
    pub fn display_name(&self) -> &'static str {
        "Cheesy Cassava Roll"
    }
}

/// Chocolate Omnomberry Cake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ChocolateOmnomberryCake;
#[allow(unused_variables)]
impl Effect for ChocolateOmnomberryCake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (15x): ('unimplemented', 'condi_duration', 'chill')
        s.power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for ChocolateOmnomberryCake {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ChocolateOmnomberryCake {
    pub fn display_name(&self) -> &'static str {
        "Chocolate Omnomberry Cake"
    }
}

/// Chocolate Omnomberry Cream
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ChocolateOmnomberryCream;
#[allow(unused_variables)]
impl Effect for ChocolateOmnomberryCream {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 100.0;
        // unknown: +40% magic find while under the effect of a boon
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for ChocolateOmnomberryCream {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ChocolateOmnomberryCream {
    pub fn display_name(&self) -> &'static str {
        "Chocolate Omnomberry Cream"
    }
}

/// Bowl of Chocolate Tapioca Pudding
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ChocolateTapiocaPudding;
#[allow(unused_variables)]
impl Effect for ChocolateTapiocaPudding {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 100.0;
        s.healing_power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp')
    }
}
impl Vary for ChocolateTapiocaPudding {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ChocolateTapiocaPudding {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Chocolate Tapioca Pudding"
    }
}

/// Cup of Lotus Fries
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CupOfLotusFries;
#[allow(unused_variables)]
impl Effect for CupOfLotusFries {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 30% magic find
        s.condition_damage += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for CupOfLotusFries {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl CupOfLotusFries {
    pub fn display_name(&self) -> &'static str {
        "Cup of Lotus Fries"
    }
}

/// Bowl of Curry Butternut Squash Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CurryButternutSquashSoup;
#[allow(unused_variables)]
impl Effect for CurryButternutSquashSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 100.0;
        s.ferocity += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for CurryButternutSquashSoup {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl CurryButternutSquashSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Curry Butternut Squash Soup"
    }
}

/// Bowl of Curry Mussel Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CurryMusselSoup;
#[allow(unused_variables)]
impl Effect for CurryMusselSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-10x): ('unimplemented', 'incoming_damage')
        // unimplemented (-5x): ('unimplemented', 'incoming_condi_damage', 'condition')
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for CurryMusselSoup {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl CurryMusselSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Curry Mussel Soup"
    }
}

/// Bowl of Curry Pumpkin Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CurryPumpkinSoup;
#[allow(unused_variables)]
impl Effect for CurryPumpkinSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 100.0;
        s.vitality += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for CurryPumpkinSoup {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl CurryPumpkinSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Curry Pumpkin Soup"
    }
}

/// Delicious Rice Ball
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DeliciousRiceBall;
#[allow(unused_variables)]
impl Effect for DeliciousRiceBall {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        // unknown: +10% outgoing healing
        // unknown: +25% magic find during lunar new year
    }
}
impl Vary for DeliciousRiceBall {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl DeliciousRiceBall {
    pub fn display_name(&self) -> &'static str {
        "Delicious Rice Ball"
    }
}

/// Dragonfish Candy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DragonfishCandy;
#[allow(unused_variables)]
impl Effect for DragonfishCandy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 100.0;
        // unknown: +200 power when health below 50%
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for DragonfishCandy {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl DragonfishCandy {
    pub fn display_name(&self) -> &'static str {
        "Dragonfish Candy"
    }
}

/// Dragonfly Cupcake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DragonflyCupcake;
#[allow(unused_variables)]
impl Effect for DragonflyCupcake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 30% magic find
        s.power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for DragonflyCupcake {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl DragonflyCupcake {
    pub fn display_name(&self) -> &'static str {
        "Dragonfly Cupcake"
    }
}

/// Dragon's Breath Bun
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DragonsBreathBun;
#[allow(unused_variables)]
impl Effect for DragonsBreathBun {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +200 power for 30 seconds on kill
        s.ferocity += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for DragonsBreathBun {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl DragonsBreathBun {
    pub fn display_name(&self) -> &'static str {
        "Dragon's Breath Bun"
    }
}

/// Dragon's Revelry Starcake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DragonsRevelryStarcake;
#[allow(unused_variables)]
impl Effect for DragonsRevelryStarcake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        *s += 45.0;
        // unimplemented (20x): ('unimplemented', 'magic_find')
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for DragonsRevelryStarcake {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl DragonsRevelryStarcake {
    pub fn display_name(&self) -> &'static str {
        "Dragon's Revelry Starcake"
    }
}

/// Egg in a Cloud
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct EggInACloud;
#[allow(unused_variables)]
impl Effect for EggInACloud {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 100% chance to gain might on kill
        s.ferocity += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for EggInACloud {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl EggInACloud {
    pub fn display_name(&self) -> &'static str {
        "Egg in a Cloud"
    }
}

/// Experimental Remnant
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExperimentalRemnant;
#[allow(unused_variables)]
impl Effect for ExperimentalRemnant {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 50% to gain swiftness on kill
        // unknown: +4% damage while moving
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for ExperimentalRemnant {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ExperimentalRemnant {
    pub fn display_name(&self) -> &'static str {
        "Experimental Remnant"
    }
}

/// Bowl of Fancy Potato and Leek Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FancyPotatoAndLeekSoup;
#[allow(unused_variables)]
impl Effect for FancyPotatoAndLeekSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 100.0;
        s.condition_damage += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for FancyPotatoAndLeekSoup {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FancyPotatoAndLeekSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Fancy Potato and Leek Soup"
    }
}

/// Fancy Truffle Burger
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FancyTruffleBurger;
#[allow(unused_variables)]
impl Effect for FancyTruffleBurger {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.poison += 15.0;
        s.precision += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for FancyTruffleBurger {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FancyTruffleBurger {
    pub fn display_name(&self) -> &'static str {
        "Fancy Truffle Burger"
    }
}

/// Plate of Fire Flank Steak
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FireFlankSteak;
#[allow(unused_variables)]
impl Effect for FireFlankSteak {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.condition_damage += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for FireFlankSteak {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FireFlankSteak {
    pub fn display_name(&self) -> &'static str {
        "Plate of Fire Flank Steak"
    }
}

/// Bowl of Fire Meat Chili
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FireMeatChili;
#[allow(unused_variables)]
impl Effect for FireMeatChili {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.burn += 15.0;
        s.precision += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for FireMeatChili {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FireMeatChili {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Fire Meat Chili"
    }
}

/// Bowl of Fire Salsa
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FireSalsa;
#[allow(unused_variables)]
impl Effect for FireSalsa {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +100% downed health
        // unknown: +20% damage while downed
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for FireSalsa {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FireSalsa {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Fire Salsa"
    }
}

/// Bowl of Fire Veggie Chili
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FireVeggieChili;
#[allow(unused_variables)]
impl Effect for FireVeggieChili {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 50.0;
        // unknown: day: 20% chance to burn on critical hit
        // unknown: night: 20% chance to steal life on critical hit
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for FireVeggieChili {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FireVeggieChili {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Fire Veggie Chili"
    }
}

/// Bowl of Fish Stew
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FishStew;
#[allow(unused_variables)]
impl Effect for FishStew {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +150 fishing power
        s.vitality += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for FishStew {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FishStew {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Fish Stew"
    }
}

/// Fishy Rice Bowl
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FishyRiceBowl;
#[allow(unused_variables)]
impl Effect for FishyRiceBowl {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +15% increased burning duration
        s.condition_damage += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for FishyRiceBowl {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FishyRiceBowl {
    pub fn display_name(&self) -> &'static str {
        "Fishy Rice Bowl"
    }
}

/// Flatbread
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Flatbread;
#[allow(unused_variables)]
impl Effect for Flatbread {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 150.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for Flatbread {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl Flatbread {
    pub fn display_name(&self) -> &'static str {
        "Flatbread"
    }
}

/// Fried Golden Dumpling
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FriedGoldenDumpling;
#[allow(unused_variables)]
impl Effect for FriedGoldenDumpling {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 100.0;
        // unknown: +25% magic find during lunar new year
        // unknown: 33% chance for might (5 seconds) on critical hit
    }
}
impl Vary for FriedGoldenDumpling {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FriedGoldenDumpling {
    pub fn display_name(&self) -> &'static str {
        "Fried Golden Dumpling"
    }
}

/// Fried Oyster Sandwich
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FriedOysterSandwich;
#[allow(unused_variables)]
impl Effect for FriedOysterSandwich {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-10x): ('unimplemented', 'incoming_damage')
        s.power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for FriedOysterSandwich {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FriedOysterSandwich {
    pub fn display_name(&self) -> &'static str {
        "Fried Oyster Sandwich"
    }
}

/// Fried Oysters
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FriedOysters;
#[allow(unused_variables)]
impl Effect for FriedOysters {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-10x): ('unimplemented', 'incoming_damage')
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for FriedOysters {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FriedOysters {
    pub fn display_name(&self) -> &'static str {
        "Fried Oysters"
    }
}

/// Plate of Frostgorge Clams
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FrostgorgeClams;
#[allow(unused_variables)]
impl Effect for FrostgorgeClams {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 100.0;
        s.precision += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for FrostgorgeClams {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FrostgorgeClams {
    pub fn display_name(&self) -> &'static str {
        "Plate of Frostgorge Clams"
    }
}

/// Bowl of Fruit Salad with Mint Garnish
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FruitSaladWithMintGarnish;
#[allow(unused_variables)]
impl Effect for FruitSaladWithMintGarnish {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +10% outgoing healing
        s.healing_power += 100.0;
        s.concentration += 70.0;
        // unknown: +10% karma
        // unimplemented (5x): ('unimplemented', 'xp')
        // unimplemented (20x): ('unimplemented', 'magic_find')
        // unknown: +20% gold find
        // unknown: +10% wxp gained
    }
}
impl Vary for FruitSaladWithMintGarnish {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl FruitSaladWithMintGarnish {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Fruit Salad with Mint Garnish"
    }
}

/// Bowl of Garlic Kale Sautee
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct GarlicKaleSautee;
#[allow(unused_variables)]
impl Effect for GarlicKaleSautee {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.condition_damage += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for GarlicKaleSautee {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl GarlicKaleSautee {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Garlic Kale Sautee"
    }
}

/// Ghost Pepper Popper
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct GhostPepperPopper;
#[allow(unused_variables)]
impl Effect for GhostPepperPopper {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 40% chance to gain might on critical hit during the day
        // unknown: 40% chance to inflict chill on critical hit during the night
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for GhostPepperPopper {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl GhostPepperPopper {
    pub fn display_name(&self) -> &'static str {
        "Ghost Pepper Popper"
    }
}

/// Holographic Super Cake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HolographicSuperCake;
#[allow(unused_variables)]
impl Effect for HolographicSuperCake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain health every second
        // unknown: +30% to endurance regeneration
        // unimplemented (20x): ('unimplemented', 'magic_find')
    }
}
impl Vary for HolographicSuperCake {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl HolographicSuperCake {
    pub fn display_name(&self) -> &'static str {
        "Holographic Super Cake"
    }
}

/// Icy Fish Snack
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct IcyFishSnack;
#[allow(unused_variables)]
impl Effect for IcyFishSnack {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 80.0;
        // unknown: +160 power while health is below 50%
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for IcyFishSnack {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl IcyFishSnack {
    pub fn display_name(&self) -> &'static str {
        "Icy Fish Snack"
    }
}

/// Indigo Mushroom Milkshake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct IndigoMushroomMilkshake;
#[allow(unused_variables)]
impl Effect for IndigoMushroomMilkshake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 66% chance to steal life on critical hit
        s.precision += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for IndigoMushroomMilkshake {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl IndigoMushroomMilkshake {
    pub fn display_name(&self) -> &'static str {
        "Indigo Mushroom Milkshake"
    }
}

/// Plate of Island Pudding
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct IslandPudding;
#[allow(unused_variables)]
impl Effect for IslandPudding {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (30x): ('unimplemented', 'magic_find')
        // unknown: +10% karma
        // unimplemented (15x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for IslandPudding {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl IslandPudding {
    pub fn display_name(&self) -> &'static str {
        "Plate of Island Pudding"
    }
}

/// Plate of Jerk Poultry
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct JerkPoultry;
#[allow(unused_variables)]
impl Effect for JerkPoultry {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 150.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for JerkPoultry {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl JerkPoultry {
    pub fn display_name(&self) -> &'static str {
        "Plate of Jerk Poultry"
    }
}

/// Jerk Poultry and Nopal Flatbread Sandwich
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct JerkPoultryAndNopalFlatbreadSandwich;
#[allow(unused_variables)]
impl Effect for JerkPoultryAndNopalFlatbreadSandwich {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +200 power for 10 seconds on using a heal skill (cooldown: 20 seconds)
        s.precision += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for JerkPoultryAndNopalFlatbreadSandwich {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl JerkPoultryAndNopalFlatbreadSandwich {
    pub fn display_name(&self) -> &'static str {
        "Jerk Poultry and Nopal Flatbread Sandwich"
    }
}

/// Jerk Poultry Flatbread Sandwich
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct JerkPoultryFlatbreadSandwich;
#[allow(unused_variables)]
impl Effect for JerkPoultryFlatbreadSandwich {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +150 power and vitality for 30 seconds on kill
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for JerkPoultryFlatbreadSandwich {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl JerkPoultryFlatbreadSandwich {
    pub fn display_name(&self) -> &'static str {
        "Jerk Poultry Flatbread Sandwich"
    }
}

/// Plate of Kimchi Pancakes
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct KimchiPancakes;
#[allow(unused_variables)]
impl Effect for KimchiPancakes {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +15% increased bleeding duration
        s.condition_damage += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for KimchiPancakes {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl KimchiPancakes {
    pub fn display_name(&self) -> &'static str {
        "Plate of Kimchi Pancakes"
    }
}

/// Bowl of Kimchi Tofu Stew
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct KimchiTofuStew;
#[allow(unused_variables)]
impl Effect for KimchiTofuStew {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +15% increased poison duration
        s.condition_damage += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for KimchiTofuStew {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl KimchiTofuStew {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Kimchi Tofu Stew"
    }
}

/// Koi Cake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct KoiCake;
#[allow(unused_variables)]
impl Effect for KoiCake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.condition_damage += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for KoiCake {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl KoiCake {
    pub fn display_name(&self) -> &'static str {
        "Koi Cake"
    }
}

/// Kralkachocolate Bar
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct KralkachocolateBar;
#[allow(unused_variables)]
impl Effect for KralkachocolateBar {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.toughness += 70.0;
        // unknown: +5% karma
    }
}
impl Vary for KralkachocolateBar {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl KralkachocolateBar {
    pub fn display_name(&self) -> &'static str {
        "Kralkachocolate Bar"
    }
}

/// Lake Doric Mussels
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct LakeDoricMussels;
#[allow(unused_variables)]
impl Effect for LakeDoricMussels {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 100.0;
        s.healing_power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for LakeDoricMussels {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl LakeDoricMussels {
    pub fn display_name(&self) -> &'static str {
        "Lake Doric Mussels"
    }
}

/// Bowl of Lemongrass Mussel Pasta
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct LemongrassMusselPasta;
#[allow(unused_variables)]
impl Effect for LemongrassMusselPasta {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-10x): ('unimplemented', 'incoming_damage')
        s.toughness += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for LemongrassMusselPasta {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl LemongrassMusselPasta {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Lemongrass Mussel Pasta"
    }
}

/// Plate of Lemongrass Poultry
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct LemongrassPoultry;
#[allow(unused_variables)]
impl Effect for LemongrassPoultry {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 100.0;
        // unknown: +200 power when health below 50%
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for LemongrassPoultry {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl LemongrassPoultry {
    pub fn display_name(&self) -> &'static str {
        "Plate of Lemongrass Poultry"
    }
}

/// Bowl of Lemongrass Poultry Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct LemongrassPoultrySoup;
#[allow(unused_variables)]
impl Effect for LemongrassPoultrySoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-20x): ('unimplemented', 'incoming_condi_duration', 'condition')
        s.vitality += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for LemongrassPoultrySoup {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl LemongrassPoultrySoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Lemongrass Poultry Soup"
    }
}

/// Bowl of Lotus Stirfry
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct LotusStirfry;
#[allow(unused_variables)]
impl Effect for LotusStirfry {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 100% chance to gain might on kill
        s.power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for LotusStirfry {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl LotusStirfry {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Lotus Stirfry"
    }
}

/// Mango Pie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MangoPie;
#[allow(unused_variables)]
impl Effect for MangoPie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain health every second
        s.vitality += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for MangoPie {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MangoPie {
    pub fn display_name(&self) -> &'static str {
        "Mango Pie"
    }
}

/// Bowl of Marjory's Experimental Chili
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MarjorysExperimentalChili;
#[allow(unused_variables)]
impl Effect for MarjorysExperimentalChili {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 50.0;
        s.condition_damage += 50.0;
        // unknown: gain might when using a heal skill
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for MarjorysExperimentalChili {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MarjorysExperimentalChili {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Marjory's Experimental Chili"
    }
}

/// Mashed Purple Potatoes
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MashedPurplePotatoes;
#[allow(unused_variables)]
impl Effect for MashedPurplePotatoes {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-40x): ('unimplemented', 'incoming_condi_duration', 'stun')
        s.toughness += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for MashedPurplePotatoes {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MashedPurplePotatoes {
    pub fn display_name(&self) -> &'static str {
        "Mashed Purple Potatoes"
    }
}

/// Meaty Asparagus Skewer
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MeatyAsparagusSkewer;
#[allow(unused_variables)]
impl Effect for MeatyAsparagusSkewer {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +15% increased torment duration
        s.condition_damage += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for MeatyAsparagusSkewer {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MeatyAsparagusSkewer {
    pub fn display_name(&self) -> &'static str {
        "Meaty Asparagus Skewer"
    }
}

/// Meaty Rice Bowl
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MeatyRiceBowl;
#[allow(unused_variables)]
impl Effect for MeatyRiceBowl {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +15% increased confusion duration
        s.condition_damage += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for MeatyRiceBowl {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MeatyRiceBowl {
    pub fn display_name(&self) -> &'static str {
        "Meaty Rice Bowl"
    }
}

/// Mushroom Loaf
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MushroomLoaf;
#[allow(unused_variables)]
impl Effect for MushroomLoaf {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 100.0;
        s.power += 70.0;
        // unknown: +10 experience from kills
    }
}
impl Vary for MushroomLoaf {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MushroomLoaf {
    pub fn display_name(&self) -> &'static str {
        "Mushroom Loaf"
    }
}

/// Plate of Mushrooms Yakkington
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MushroomsYakkington;
#[allow(unused_variables)]
impl Effect for MushroomsYakkington {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 100% chance to gain might on kill
        s.power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for MushroomsYakkington {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MushroomsYakkington {
    pub fn display_name(&self) -> &'static str {
        "Plate of Mushrooms Yakkington"
    }
}

/// Bowl of Mussel Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MusselSoup;
#[allow(unused_variables)]
impl Effect for MusselSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-10x): ('unimplemented', 'incoming_damage')
        s.vitality += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for MusselSoup {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MusselSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Mussel Soup"
    }
}

/// Plate of Mussels Gnashblade
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MusselsGnashblade;
#[allow(unused_variables)]
impl Effect for MusselsGnashblade {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-10x): ('unimplemented', 'incoming_damage')
        s.concentration += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for MusselsGnashblade {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl MusselsGnashblade {
    pub fn display_name(&self) -> &'static str {
        "Plate of Mussels Gnashblade"
    }
}

/// Bowl of Nopalitos Sauté
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct NopalitosSaut;
#[allow(unused_variables)]
impl Effect for NopalitosSaut {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 100.0;
        s.toughness += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for NopalitosSaut {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl NopalitosSaut {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Nopalitos Sauté"
    }
}

/// Omnomberry Bar
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryBar;
#[allow(unused_variables)]
impl Effect for OmnomberryBar {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 30% magic find
        // unknown: 40% gold from monsters
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for OmnomberryBar {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OmnomberryBar {
    pub fn display_name(&self) -> &'static str {
        "Omnomberry Bar"
    }
}

/// Loaf of Omnomberry Bread
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryBread;
#[allow(unused_variables)]
impl Effect for OmnomberryBread {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 100.0;
        s.toughness += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for OmnomberryBread {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OmnomberryBread {
    pub fn display_name(&self) -> &'static str {
        "Loaf of Omnomberry Bread"
    }
}

/// Omnomberry Compote
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryCompote;
#[allow(unused_variables)]
impl Effect for OmnomberryCompote {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 100% chance to gain health on kill
        s.healing_power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for OmnomberryCompote {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OmnomberryCompote {
    pub fn display_name(&self) -> &'static str {
        "Omnomberry Compote"
    }
}

/// Omnomberry Cookie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryCookie;
#[allow(unused_variables)]
impl Effect for OmnomberryCookie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.vitality += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for OmnomberryCookie {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OmnomberryCookie {
    pub fn display_name(&self) -> &'static str {
        "Omnomberry Cookie"
    }
}

/// Omnomberry Ghost
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryGhost;
#[allow(unused_variables)]
impl Effect for OmnomberryGhost {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 66% chance to steal life on critical hit
        s.precision += 70.0;
        // unimplemented (15x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for OmnomberryGhost {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OmnomberryGhost {
    pub fn display_name(&self) -> &'static str {
        "Omnomberry Ghost"
    }
}

/// Omnomberry Pie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryPie;
#[allow(unused_variables)]
impl Effect for OmnomberryPie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 66% chance to steal life on critical hit
        s.precision += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for OmnomberryPie {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OmnomberryPie {
    pub fn display_name(&self) -> &'static str {
        "Omnomberry Pie"
    }
}

/// Omnomberry Tart
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryTart;
#[allow(unused_variables)]
impl Effect for OmnomberryTart {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 30% magic find
        s.power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for OmnomberryTart {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OmnomberryTart {
    pub fn display_name(&self) -> &'static str {
        "Omnomberry Tart"
    }
}

/// Plate of Orrian Steak Frittes
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OrrianSteakFrittes;
#[allow(unused_variables)]
impl Effect for OrrianSteakFrittes {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.vitality += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for OrrianSteakFrittes {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OrrianSteakFrittes {
    pub fn display_name(&self) -> &'static str {
        "Plate of Orrian Steak Frittes"
    }
}

/// Bowl of Orrian Truffle and Meat Stew
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OrrianTruffleAndMeatStew;
#[allow(unused_variables)]
impl Effect for OrrianTruffleAndMeatStew {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 100% chance to gain might on dodge
        // unknown: +40% to endurance regeneration
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for OrrianTruffleAndMeatStew {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OrrianTruffleAndMeatStew {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Orrian Truffle and Meat Stew"
    }
}

/// Bowl of Orrian Truffle Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OrrianTruffleSoup;
#[allow(unused_variables)]
impl Effect for OrrianTruffleSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.vitality += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for OrrianTruffleSoup {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OrrianTruffleSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Orrian Truffle Soup"
    }
}

/// Oysters Gnashblade
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OystersGnashblade;
#[allow(unused_variables)]
impl Effect for OystersGnashblade {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-10x): ('unimplemented', 'incoming_damage')
        s.expertise += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for OystersGnashblade {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OystersGnashblade {
    pub fn display_name(&self) -> &'static str {
        "Oysters Gnashblade"
    }
}

/// Oysters with Cocktail Sauce
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OystersWithCocktailSauce;
#[allow(unused_variables)]
impl Effect for OystersWithCocktailSauce {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-10x): ('unimplemented', 'incoming_damage')
        s.precision += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for OystersWithCocktailSauce {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OystersWithCocktailSauce {
    pub fn display_name(&self) -> &'static str {
        "Oysters with Cocktail Sauce"
    }
}

/// Oysters with Pesto Sauce
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OystersWithPestoSauce;
#[allow(unused_variables)]
impl Effect for OystersWithPestoSauce {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-10x): ('unimplemented', 'incoming_damage')
        s.healing_power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for OystersWithPestoSauce {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OystersWithPestoSauce {
    pub fn display_name(&self) -> &'static str {
        "Oysters with Pesto Sauce"
    }
}

/// Oysters with Spicy Sauce
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OystersWithSpicySauce;
#[allow(unused_variables)]
impl Effect for OystersWithSpicySauce {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-10x): ('unimplemented', 'incoming_damage')
        s.condition_damage += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for OystersWithSpicySauce {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OystersWithSpicySauce {
    pub fn display_name(&self) -> &'static str {
        "Oysters with Spicy Sauce"
    }
}

/// Oysters with Zesty Sauce
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OystersWithZestySauce;
#[allow(unused_variables)]
impl Effect for OystersWithZestySauce {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-10x): ('unimplemented', 'incoming_damage')
        s.ferocity += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for OystersWithZestySauce {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl OystersWithZestySauce {
    pub fn display_name(&self) -> &'static str {
        "Oysters with Zesty Sauce"
    }
}

/// Bowl of Passion Fruit Tapioca Pudding
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PassionFruitTapiocaPudding;
#[allow(unused_variables)]
impl Effect for PassionFruitTapiocaPudding {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.healing_power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp')
    }
}
impl Vary for PassionFruitTapiocaPudding {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PassionFruitTapiocaPudding {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Passion Fruit Tapioca Pudding"
    }
}

/// Peppermint Omnomberry Bar
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PeppermintOmnomberryBar;
#[allow(unused_variables)]
impl Effect for PeppermintOmnomberryBar {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (30x): ('unimplemented', 'magic_find')
        // unknown: +40% gold from monsters
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
        // unknown: +10% karma
    }
}
impl Vary for PeppermintOmnomberryBar {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PeppermintOmnomberryBar {
    pub fn display_name(&self) -> &'static str {
        "Peppermint Omnomberry Bar"
    }
}

/// Bowl of Poultry Satay
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PoultrySatay;
#[allow(unused_variables)]
impl Effect for PoultrySatay {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.concentration += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PoultrySatay {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PoultrySatay {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Poultry Satay"
    }
}

/// Prickly Pear Pie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PricklyPearPie;
#[allow(unused_variables)]
impl Effect for PricklyPearPie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        // unknown: 33% chance to steal life on critical hit
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PricklyPearPie {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PricklyPearPie {
    pub fn display_name(&self) -> &'static str {
        "Prickly Pear Pie"
    }
}

/// Bowl of Prickly Pear Sorbet
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PricklyPearSorbet;
#[allow(unused_variables)]
impl Effect for PricklyPearSorbet {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 100.0;
        // unknown: 33% chance to gain might on critical hit
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PricklyPearSorbet {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PricklyPearSorbet {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Prickly Pear Sorbet"
    }
}

/// Prickly Pear Stuffed Nopal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PricklyPearStuffedNopal;
#[allow(unused_variables)]
impl Effect for PricklyPearStuffedNopal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PricklyPearStuffedNopal {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PricklyPearStuffedNopal {
    pub fn display_name(&self) -> &'static str {
        "Prickly Pear Stuffed Nopal"
    }
}

/// Bowl of Prickly Pear Tapioca Pudding
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PricklyPearTapiocaPudding;
#[allow(unused_variables)]
impl Effect for PricklyPearTapiocaPudding {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.healing_power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for PricklyPearTapiocaPudding {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl PricklyPearTapiocaPudding {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Prickly Pear Tapioca Pudding"
    }
}

/// Quiche of Darkness
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct QuicheOfDarkness;
#[allow(unused_variables)]
impl Effect for QuicheOfDarkness {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-20x): ('unimplemented', 'incoming_condi_duration', 'condition')
        s.vitality += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for QuicheOfDarkness {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl QuicheOfDarkness {
    pub fn display_name(&self) -> &'static str {
        "Quiche of Darkness"
    }
}

/// Rare Veggie Pizza
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct RareVeggiePizza;
#[allow(unused_variables)]
impl Effect for RareVeggiePizza {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.condition_damage += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for RareVeggiePizza {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl RareVeggiePizza {
    pub fn display_name(&self) -> &'static str {
        "Rare Veggie Pizza"
    }
}

/// Red-Lentil Saobosa
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct RedLentilSaobosa;
#[allow(unused_variables)]
impl Effect for RedLentilSaobosa {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.condition_damage += 70.0;
        // unimplemented: ('unimplemented', 'xp')
    }
}
impl Vary for RedLentilSaobosa {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl RedLentilSaobosa {
    pub fn display_name(&self) -> &'static str {
        "Red-Lentil Saobosa"
    }
}

/// Redfish Sushi
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct RedfishSushi;
#[allow(unused_variables)]
impl Effect for RedfishSushi {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (30x): ('unimplemented', 'magic_find')
        // unknown: +150 fishing power
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for RedfishSushi {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl RedfishSushi {
    pub fn display_name(&self) -> &'static str {
        "Redfish Sushi"
    }
}

/// Bowl of Refugee's Beet Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct RefugeesBeetSoup;
#[allow(unused_variables)]
impl Effect for RefugeesBeetSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 100.0;
        // unknown: 20% magic find
        // unknown: +10 experience from kills
    }
}
impl Vary for RefugeesBeetSoup {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl RefugeesBeetSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Refugee's Beet Soup"
    }
}

/// Plate of Roasted Cactus
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct RoastedCactus;
#[allow(unused_variables)]
impl Effect for RoastedCactus {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 100.0;
        // unknown: 33% chance to gain might on critical hit
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for RoastedCactus {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl RoastedCactus {
    pub fn display_name(&self) -> &'static str {
        "Plate of Roasted Cactus"
    }
}

/// Bowl of Roasted Lotus Root
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct RoastedLotusRoot;
#[allow(unused_variables)]
impl Effect for RoastedLotusRoot {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-40x): ('unimplemented', 'incoming_condi_duration', 'stun')
        s.toughness += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for RoastedLotusRoot {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl RoastedLotusRoot {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Roasted Lotus Root"
    }
}

/// Loaf of Saffron Bread
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SaffronBread;
#[allow(unused_variables)]
impl Effect for SaffronBread {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: -20% incoming damage while stunned, knocked down, or knocked back
        // unimplemented (-20x): ('unimplemented', 'incoming_condi_duration', 'condition')
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SaffronBread {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SaffronBread {
    pub fn display_name(&self) -> &'static str {
        "Loaf of Saffron Bread"
    }
}

/// Bowl of Saffron-Mango Ice Cream
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SaffronMangoIceCream;
#[allow(unused_variables)]
impl Effect for SaffronMangoIceCream {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.toughness += 70.0;
        // unknown: +5% karma
    }
}
impl Vary for SaffronMangoIceCream {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SaffronMangoIceCream {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Saffron-Mango Ice Cream"
    }
}

/// Saffron Mussels
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SaffronMussels;
#[allow(unused_variables)]
impl Effect for SaffronMussels {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.healing_power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SaffronMussels {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SaffronMussels {
    pub fn display_name(&self) -> &'static str {
        "Saffron Mussels"
    }
}

/// Saffron Stuffed Mushroom
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SaffronStuffedMushroom;
#[allow(unused_variables)]
impl Effect for SaffronStuffedMushroom {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +200 condition damage for 30 seconds on kill
        s.precision += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SaffronStuffedMushroom {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SaffronStuffedMushroom {
    pub fn display_name(&self) -> &'static str {
        "Saffron Stuffed Mushroom"
    }
}

/// Bowl of Saffron-scented Poultry Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SaffronscentedPoultrySoup;
#[allow(unused_variables)]
impl Effect for SaffronscentedPoultrySoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 100% chance to remove a condition on using a heal skill (cooldown: 10 seconds)
        s.healing_power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SaffronscentedPoultrySoup {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SaffronscentedPoultrySoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Saffron-scented Poultry Soup"
    }
}

/// Saint Bones
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SaintBones;
#[allow(unused_variables)]
impl Effect for SaintBones {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.precision += 70.0;
        // unimplemented (15x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SaintBones {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SaintBones {
    pub fn display_name(&self) -> &'static str {
        "Saint Bones"
    }
}

/// Scoop of Mintberry Swirl Ice Cream
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ScoopOfMintberrySwirlIceCream;
#[allow(unused_variables)]
impl Effect for ScoopOfMintberrySwirlIceCream {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 66% chance to steal life on critical hit
        s.precision += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
        // unknown: +10% karma
    }
}
impl Vary for ScoopOfMintberrySwirlIceCream {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ScoopOfMintberrySwirlIceCream {
    pub fn display_name(&self) -> &'static str {
        "Scoop of Mintberry Swirl Ice Cream"
    }
}

/// Bowl of Seaweed Salad
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SeaweedSalad;
#[allow(unused_variables)]
impl Effect for SeaweedSalad {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 60% to gain swiftness on kill
        // unknown: +5% damage while moving
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SeaweedSalad {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SeaweedSalad {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Seaweed Salad"
    }
}

/// Slice of Allspice Cake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SliceOfAllspiceCake;
#[allow(unused_variables)]
impl Effect for SliceOfAllspiceCake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 66% chance to steal life on critical hit
        s.power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SliceOfAllspiceCake {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SliceOfAllspiceCake {
    pub fn display_name(&self) -> &'static str {
        "Slice of Allspice Cake"
    }
}

/// Slice of Allspice Cake with Ice Cream
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SliceOfAllspiceCakeWithIceCream;
#[allow(unused_variables)]
impl Effect for SliceOfAllspiceCakeWithIceCream {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 66% chance to steal life on critical hit
        s.condition_damage += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SliceOfAllspiceCakeWithIceCream {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SliceOfAllspiceCakeWithIceCream {
    pub fn display_name(&self) -> &'static str {
        "Slice of Allspice Cake with Ice Cream"
    }
}

/// Slice of Candied Dragon Roll
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SliceOfCandiedDragonRoll;
#[allow(unused_variables)]
impl Effect for SliceOfCandiedDragonRoll {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 66% chance to steal life on critical hit
        s.precision += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SliceOfCandiedDragonRoll {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SliceOfCandiedDragonRoll {
    pub fn display_name(&self) -> &'static str {
        "Slice of Candied Dragon Roll"
    }
}

/// Soul Cake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SoulCake;
#[allow(unused_variables)]
impl Effect for SoulCake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.vitality += 70.0;
        // unimplemented (15x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SoulCake {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SoulCake {
    pub fn display_name(&self) -> &'static str {
        "Soul Cake"
    }
}

/// Soul Pastry
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SoulPastry;
#[allow(unused_variables)]
impl Effect for SoulPastry {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 100.0;
        s.power += 70.0;
        // unimplemented (15x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SoulPastry {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SoulPastry {
    pub fn display_name(&self) -> &'static str {
        "Soul Pastry"
    }
}

/// Spicy Chocolate Cookie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SpicyChocolateCookie;
#[allow(unused_variables)]
impl Effect for SpicyChocolateCookie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.precision += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SpicyChocolateCookie {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SpicyChocolateCookie {
    pub fn display_name(&self) -> &'static str {
        "Spicy Chocolate Cookie"
    }
}

/// Plate of Spicy Herbed Chicken
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SpicyHerbedChicken;
#[allow(unused_variables)]
impl Effect for SpicyHerbedChicken {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 100.0;
        s.power += 70.0;
        // unknown: +10 experience from kills
    }
}
impl Vary for SpicyHerbedChicken {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SpicyHerbedChicken {
    pub fn display_name(&self) -> &'static str {
        "Plate of Spicy Herbed Chicken"
    }
}

/// Spicy Marinated Mushroom
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SpicyMarinatedMushroom;
#[allow(unused_variables)]
impl Effect for SpicyMarinatedMushroom {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.toughness += 70.0;
        // unknown: +10 experience from kills
    }
}
impl Vary for SpicyMarinatedMushroom {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SpicyMarinatedMushroom {
    pub fn display_name(&self) -> &'static str {
        "Spicy Marinated Mushroom"
    }
}

/// Spicy Pumpkin Cookie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SpicyPumpkinCookie;
#[allow(unused_variables)]
impl Effect for SpicyPumpkinCookie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 30% magic find
        s.condition_damage += 70.0;
        // unimplemented (15x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SpicyPumpkinCookie {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SpicyPumpkinCookie {
    pub fn display_name(&self) -> &'static str {
        "Spicy Pumpkin Cookie"
    }
}

/// Spring Roll
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SpringRoll;
#[allow(unused_variables)]
impl Effect for SpringRoll {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 100.0;
        // unknown: swiftness for 30 seconds on kill
        // unknown: +25% magic find during lunar new year
    }
}
impl Vary for SpringRoll {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SpringRoll {
    pub fn display_name(&self) -> &'static str {
        "Spring Roll"
    }
}

/// Steak with Winterberry Sauce
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SteakWithWinterberrySauce;
#[allow(unused_variables)]
impl Effect for SteakWithWinterberrySauce {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.precision += 70.0;
        // unimplemented (30x): ('unimplemented', 'magic_find')
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SteakWithWinterberrySauce {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SteakWithWinterberrySauce {
    pub fn display_name(&self) -> &'static str {
        "Steak with Winterberry Sauce"
    }
}

/// Steamed Red Dumpling
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SteamedRedDumpling;
#[allow(unused_variables)]
impl Effect for SteamedRedDumpling {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +200 power for 30 seconds on kill
        // unknown: +140 condition damage for 30 seconds on kill
        // unknown: +25% magic find during lunar new year
    }
}
impl Vary for SteamedRedDumpling {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SteamedRedDumpling {
    pub fn display_name(&self) -> &'static str {
        "Steamed Red Dumpling"
    }
}

/// Super-Hot Lemongrass Poultry Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SuperHotLemongrassPoultrySoup;
#[allow(unused_variables)]
impl Effect for SuperHotLemongrassPoultrySoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-20x): ('unimplemented', 'incoming_condi_duration', 'condition')
        s.vitality += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SuperHotLemongrassPoultrySoup {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SuperHotLemongrassPoultrySoup {
    pub fn display_name(&self) -> &'static str {
        "Super-Hot Lemongrass Poultry Soup"
    }
}

/// Super-Hot Saffron-Scented Poultry Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SuperHotSaffronScentedPoultrySoup;
#[allow(unused_variables)]
impl Effect for SuperHotSaffronScentedPoultrySoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 100% chance to remove a condition on using a heal skill (cooldown: 10 seconds)
        s.healing_power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SuperHotSaffronScentedPoultrySoup {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SuperHotSaffronScentedPoultrySoup {
    pub fn display_name(&self) -> &'static str {
        "Super-Hot Saffron-Scented Poultry Soup"
    }
}

/// Bowl of Sweet and Spicy Beans
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SweetAndSpicyBeans;
#[allow(unused_variables)]
impl Effect for SweetAndSpicyBeans {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.power += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SweetAndSpicyBeans {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SweetAndSpicyBeans {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Sweet and Spicy Beans"
    }
}

/// Bowl of Sweet and Spicy Butternut Squash Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SweetAndSpicyButternutSquashSoup;
#[allow(unused_variables)]
impl Effect for SweetAndSpicyButternutSquashSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.ferocity += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SweetAndSpicyButternutSquashSoup {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SweetAndSpicyButternutSquashSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Sweet and Spicy Butternut Squash Soup"
    }
}

/// Sweet Bean Bun
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SweetBeanBun;
#[allow(unused_variables)]
impl Effect for SweetBeanBun {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unimplemented (-20x): ('unimplemented', 'incoming_condi_duration', 'condition')
        s.expertise += 70.0;
        // unknown: +25% magic find during lunar new year
    }
}
impl Vary for SweetBeanBun {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SweetBeanBun {
    pub fn display_name(&self) -> &'static str {
        "Sweet Bean Bun"
    }
}

/// Plate of Sweet Curried Mussels
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SweetCurriedMussels;
#[allow(unused_variables)]
impl Effect for SweetCurriedMussels {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 100% chance to gain fury on kill
        s.ferocity += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SweetCurriedMussels {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SweetCurriedMussels {
    pub fn display_name(&self) -> &'static str {
        "Plate of Sweet Curried Mussels"
    }
}

/// Swiftly Scrambled Eggs
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SwiftlyScrambledEggs;
#[allow(unused_variables)]
impl Effect for SwiftlyScrambledEggs {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 60% to gain swiftness on kill
        // unknown: +5% damage while moving
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for SwiftlyScrambledEggs {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl SwiftlyScrambledEggs {
    pub fn display_name(&self) -> &'static str {
        "Swiftly Scrambled Eggs"
    }
}

/// Bowl of Tapioca Pudding
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TapiocaPudding;
#[allow(unused_variables)]
impl Effect for TapiocaPudding {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +200 healing power for 10 seconds on using a heal skill (cooldown: 20 seconds)
        // unknown: +10% healing to other allies
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for TapiocaPudding {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl TapiocaPudding {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Tapioca Pudding"
    }
}

/// Bowl of Tropical Fruit Salad
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TropicalFruitSalad;
#[allow(unused_variables)]
impl Effect for TropicalFruitSalad {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.condition_damage += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for TropicalFruitSalad {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl TropicalFruitSalad {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Tropical Fruit Salad"
    }
}

/// Bowl of Tropical Mousse
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TropicalMousse;
#[allow(unused_variables)]
impl Effect for TropicalMousse {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 100.0;
        s.condition_damage += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for TropicalMousse {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl TropicalMousse {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Tropical Mousse"
    }
}

/// Tropical Peppermint Cake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TropicalPeppermintCake;
#[allow(unused_variables)]
impl Effect for TropicalPeppermintCake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: gain health every second
        s.vitality += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
        // unknown: +10% karma
    }
}
impl Vary for TropicalPeppermintCake {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl TropicalPeppermintCake {
    pub fn display_name(&self) -> &'static str {
        "Tropical Peppermint Cake"
    }
}

/// Bowl of Truffle Ravioli
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TruffleRavioli;
#[allow(unused_variables)]
impl Effect for TruffleRavioli {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 100.0;
        s.precision += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for TruffleRavioli {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl TruffleRavioli {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Truffle Ravioli"
    }
}

/// Bowl of Truffle Risotto
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TruffleRisotto;
#[allow(unused_variables)]
impl Effect for TruffleRisotto {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.precision += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for TruffleRisotto {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl TruffleRisotto {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Truffle Risotto"
    }
}

/// Bowl of Truffle Sautee
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TruffleSautee;
#[allow(unused_variables)]
impl Effect for TruffleSautee {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 100% chance to gain might on kill
        s.ferocity += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for TruffleSautee {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl TruffleSautee {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Truffle Sautee"
    }
}

/// Plate of Truffle Steak
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TruffleSteak;
#[allow(unused_variables)]
impl Effect for TruffleSteak {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.precision += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for TruffleSteak {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl TruffleSteak {
    pub fn display_name(&self) -> &'static str {
        "Plate of Truffle Steak"
    }
}

/// Plate of Truffle Steak Dinner
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TruffleSteakDinner;
#[allow(unused_variables)]
impl Effect for TruffleSteakDinner {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: +200 power for 30 seconds on kill
        s.ferocity += 70.0;
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for TruffleSteakDinner {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl TruffleSteakDinner {
    pub fn display_name(&self) -> &'static str {
        "Plate of Truffle Steak Dinner"
    }
}

/// Winterberry Pie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct WinterberryPie;
#[allow(unused_variables)]
impl Effect for WinterberryPie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 66% chance to steal life on critical hit
        s.precision += 70.0;
        // unimplemented (30x): ('unimplemented', 'magic_find')
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
    }
}
impl Vary for WinterberryPie {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl WinterberryPie {
    pub fn display_name(&self) -> &'static str {
        "Winterberry Pie"
    }
}

/// Bowl of Winterberry Seaweed Salad
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct WinterberrySeaweedSalad;
#[allow(unused_variables)]
impl Effect for WinterberrySeaweedSalad {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown: 60% to gain swiftness on kill
        // unknown: +5% damage while moving
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
        // unimplemented (30x): ('unimplemented', 'magic_find')
    }
}
impl Vary for WinterberrySeaweedSalad {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl WinterberrySeaweedSalad {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Winterberry Seaweed Salad"
    }
}

/// Winterberry Sorbet
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct WinterberrySorbet;
#[allow(unused_variables)]
impl Effect for WinterberrySorbet {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 100.0;
        // unknown: 28% chance to gain might on critical hit
        // unimplemented (10x): ('unimplemented', 'xp_from_kills')
        // unimplemented (30x): ('unimplemented', 'magic_find')
    }
}
impl Vary for WinterberrySorbet {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl WinterberrySorbet {
    pub fn display_name(&self) -> &'static str {
        "Winterberry Sorbet"
    }
}

/// Bowl of Zesty Turnip Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ZestyTurnipSoup;
#[allow(unused_variables)]
impl Effect for ZestyTurnipSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 100.0;
        // unknown: 20% magic find
        // unknown: +10 experience from kills
    }
}
impl Vary for ZestyTurnipSoup {
    fn num_fields(&self) -> usize { 0 }
    fn num_field_values(&self, _field: usize) -> u16 { panic!() }
    fn get_field(&self, _field: usize) -> u16 { panic!() }
    fn set_field(&mut self, _field: usize, _value: u16) { panic!() }
}
impl ZestyTurnipSoup {
    pub fn display_name(&self) -> &'static str {
        "Bowl of Zesty Turnip Soup"
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
pub enum Food {
    NoFood(NoFood),
    BeefRendang(BeefRendang),
    BlackPepperCactusSalad(BlackPepperCactusSalad),
    BlockOfTofu(BlockOfTofu),
    CactusFruitSalad(CactusFruitSalad),
    CactusSoup(CactusSoup),
    CandyCactusCornbread(CandyCactusCornbread),
    CarrotSouffl(CarrotSouffl),
    CheesyCassavaRoll(CheesyCassavaRoll),
    ChocolateOmnomberryCake(ChocolateOmnomberryCake),
    ChocolateOmnomberryCream(ChocolateOmnomberryCream),
    ChocolateTapiocaPudding(ChocolateTapiocaPudding),
    CupOfLotusFries(CupOfLotusFries),
    CurryButternutSquashSoup(CurryButternutSquashSoup),
    CurryMusselSoup(CurryMusselSoup),
    CurryPumpkinSoup(CurryPumpkinSoup),
    DeliciousRiceBall(DeliciousRiceBall),
    DragonfishCandy(DragonfishCandy),
    DragonflyCupcake(DragonflyCupcake),
    DragonsBreathBun(DragonsBreathBun),
    DragonsRevelryStarcake(DragonsRevelryStarcake),
    EggInACloud(EggInACloud),
    ExperimentalRemnant(ExperimentalRemnant),
    FancyPotatoAndLeekSoup(FancyPotatoAndLeekSoup),
    FancyTruffleBurger(FancyTruffleBurger),
    FireFlankSteak(FireFlankSteak),
    FireMeatChili(FireMeatChili),
    FireSalsa(FireSalsa),
    FireVeggieChili(FireVeggieChili),
    FishStew(FishStew),
    FishyRiceBowl(FishyRiceBowl),
    Flatbread(Flatbread),
    FriedGoldenDumpling(FriedGoldenDumpling),
    FriedOysterSandwich(FriedOysterSandwich),
    FriedOysters(FriedOysters),
    FrostgorgeClams(FrostgorgeClams),
    FruitSaladWithMintGarnish(FruitSaladWithMintGarnish),
    GarlicKaleSautee(GarlicKaleSautee),
    GhostPepperPopper(GhostPepperPopper),
    HolographicSuperCake(HolographicSuperCake),
    IcyFishSnack(IcyFishSnack),
    IndigoMushroomMilkshake(IndigoMushroomMilkshake),
    IslandPudding(IslandPudding),
    JerkPoultry(JerkPoultry),
    JerkPoultryAndNopalFlatbreadSandwich(JerkPoultryAndNopalFlatbreadSandwich),
    JerkPoultryFlatbreadSandwich(JerkPoultryFlatbreadSandwich),
    KimchiPancakes(KimchiPancakes),
    KimchiTofuStew(KimchiTofuStew),
    KoiCake(KoiCake),
    KralkachocolateBar(KralkachocolateBar),
    LakeDoricMussels(LakeDoricMussels),
    LemongrassMusselPasta(LemongrassMusselPasta),
    LemongrassPoultry(LemongrassPoultry),
    LemongrassPoultrySoup(LemongrassPoultrySoup),
    LotusStirfry(LotusStirfry),
    MangoPie(MangoPie),
    MarjorysExperimentalChili(MarjorysExperimentalChili),
    MashedPurplePotatoes(MashedPurplePotatoes),
    MeatyAsparagusSkewer(MeatyAsparagusSkewer),
    MeatyRiceBowl(MeatyRiceBowl),
    MushroomLoaf(MushroomLoaf),
    MushroomsYakkington(MushroomsYakkington),
    MusselSoup(MusselSoup),
    MusselsGnashblade(MusselsGnashblade),
    NopalitosSaut(NopalitosSaut),
    OmnomberryBar(OmnomberryBar),
    OmnomberryBread(OmnomberryBread),
    OmnomberryCompote(OmnomberryCompote),
    OmnomberryCookie(OmnomberryCookie),
    OmnomberryGhost(OmnomberryGhost),
    OmnomberryPie(OmnomberryPie),
    OmnomberryTart(OmnomberryTart),
    OrrianSteakFrittes(OrrianSteakFrittes),
    OrrianTruffleAndMeatStew(OrrianTruffleAndMeatStew),
    OrrianTruffleSoup(OrrianTruffleSoup),
    OystersGnashblade(OystersGnashblade),
    OystersWithCocktailSauce(OystersWithCocktailSauce),
    OystersWithPestoSauce(OystersWithPestoSauce),
    OystersWithSpicySauce(OystersWithSpicySauce),
    OystersWithZestySauce(OystersWithZestySauce),
    PassionFruitTapiocaPudding(PassionFruitTapiocaPudding),
    PeppermintOmnomberryBar(PeppermintOmnomberryBar),
    PoultrySatay(PoultrySatay),
    PricklyPearPie(PricklyPearPie),
    PricklyPearSorbet(PricklyPearSorbet),
    PricklyPearStuffedNopal(PricklyPearStuffedNopal),
    PricklyPearTapiocaPudding(PricklyPearTapiocaPudding),
    QuicheOfDarkness(QuicheOfDarkness),
    RareVeggiePizza(RareVeggiePizza),
    RedLentilSaobosa(RedLentilSaobosa),
    RedfishSushi(RedfishSushi),
    RefugeesBeetSoup(RefugeesBeetSoup),
    RoastedCactus(RoastedCactus),
    RoastedLotusRoot(RoastedLotusRoot),
    SaffronBread(SaffronBread),
    SaffronMangoIceCream(SaffronMangoIceCream),
    SaffronMussels(SaffronMussels),
    SaffronStuffedMushroom(SaffronStuffedMushroom),
    SaffronscentedPoultrySoup(SaffronscentedPoultrySoup),
    SaintBones(SaintBones),
    ScoopOfMintberrySwirlIceCream(ScoopOfMintberrySwirlIceCream),
    SeaweedSalad(SeaweedSalad),
    SliceOfAllspiceCake(SliceOfAllspiceCake),
    SliceOfAllspiceCakeWithIceCream(SliceOfAllspiceCakeWithIceCream),
    SliceOfCandiedDragonRoll(SliceOfCandiedDragonRoll),
    SoulCake(SoulCake),
    SoulPastry(SoulPastry),
    SpicyChocolateCookie(SpicyChocolateCookie),
    SpicyHerbedChicken(SpicyHerbedChicken),
    SpicyMarinatedMushroom(SpicyMarinatedMushroom),
    SpicyPumpkinCookie(SpicyPumpkinCookie),
    SpringRoll(SpringRoll),
    SteakWithWinterberrySauce(SteakWithWinterberrySauce),
    SteamedRedDumpling(SteamedRedDumpling),
    SuperHotLemongrassPoultrySoup(SuperHotLemongrassPoultrySoup),
    SuperHotSaffronScentedPoultrySoup(SuperHotSaffronScentedPoultrySoup),
    SweetAndSpicyBeans(SweetAndSpicyBeans),
    SweetAndSpicyButternutSquashSoup(SweetAndSpicyButternutSquashSoup),
    SweetBeanBun(SweetBeanBun),
    SweetCurriedMussels(SweetCurriedMussels),
    SwiftlyScrambledEggs(SwiftlyScrambledEggs),
    TapiocaPudding(TapiocaPudding),
    TropicalFruitSalad(TropicalFruitSalad),
    TropicalMousse(TropicalMousse),
    TropicalPeppermintCake(TropicalPeppermintCake),
    TruffleRavioli(TruffleRavioli),
    TruffleRisotto(TruffleRisotto),
    TruffleSautee(TruffleSautee),
    TruffleSteak(TruffleSteak),
    TruffleSteakDinner(TruffleSteakDinner),
    WinterberryPie(WinterberryPie),
    WinterberrySeaweedSalad(WinterberrySeaweedSalad),
    WinterberrySorbet(WinterberrySorbet),
    ZestyTurnipSoup(ZestyTurnipSoup),
}
impl Default for Food {
    fn default() -> Food { Food::NoFood(NoFood) }
}
impl Food {
    pub const COUNT: usize = 134;
    pub fn index(self) -> usize {
        match self {
            Food::NoFood(NoFood) => 0,
            Food::BeefRendang(BeefRendang) => 1,
            Food::BlackPepperCactusSalad(BlackPepperCactusSalad) => 2,
            Food::BlockOfTofu(BlockOfTofu) => 3,
            Food::CactusFruitSalad(CactusFruitSalad) => 4,
            Food::CactusSoup(CactusSoup) => 5,
            Food::CandyCactusCornbread(CandyCactusCornbread) => 6,
            Food::CarrotSouffl(CarrotSouffl) => 7,
            Food::CheesyCassavaRoll(CheesyCassavaRoll) => 8,
            Food::ChocolateOmnomberryCake(ChocolateOmnomberryCake) => 9,
            Food::ChocolateOmnomberryCream(ChocolateOmnomberryCream) => 10,
            Food::ChocolateTapiocaPudding(ChocolateTapiocaPudding) => 11,
            Food::CupOfLotusFries(CupOfLotusFries) => 12,
            Food::CurryButternutSquashSoup(CurryButternutSquashSoup) => 13,
            Food::CurryMusselSoup(CurryMusselSoup) => 14,
            Food::CurryPumpkinSoup(CurryPumpkinSoup) => 15,
            Food::DeliciousRiceBall(DeliciousRiceBall) => 16,
            Food::DragonfishCandy(DragonfishCandy) => 17,
            Food::DragonflyCupcake(DragonflyCupcake) => 18,
            Food::DragonsBreathBun(DragonsBreathBun) => 19,
            Food::DragonsRevelryStarcake(DragonsRevelryStarcake) => 20,
            Food::EggInACloud(EggInACloud) => 21,
            Food::ExperimentalRemnant(ExperimentalRemnant) => 22,
            Food::FancyPotatoAndLeekSoup(FancyPotatoAndLeekSoup) => 23,
            Food::FancyTruffleBurger(FancyTruffleBurger) => 24,
            Food::FireFlankSteak(FireFlankSteak) => 25,
            Food::FireMeatChili(FireMeatChili) => 26,
            Food::FireSalsa(FireSalsa) => 27,
            Food::FireVeggieChili(FireVeggieChili) => 28,
            Food::FishStew(FishStew) => 29,
            Food::FishyRiceBowl(FishyRiceBowl) => 30,
            Food::Flatbread(Flatbread) => 31,
            Food::FriedGoldenDumpling(FriedGoldenDumpling) => 32,
            Food::FriedOysterSandwich(FriedOysterSandwich) => 33,
            Food::FriedOysters(FriedOysters) => 34,
            Food::FrostgorgeClams(FrostgorgeClams) => 35,
            Food::FruitSaladWithMintGarnish(FruitSaladWithMintGarnish) => 36,
            Food::GarlicKaleSautee(GarlicKaleSautee) => 37,
            Food::GhostPepperPopper(GhostPepperPopper) => 38,
            Food::HolographicSuperCake(HolographicSuperCake) => 39,
            Food::IcyFishSnack(IcyFishSnack) => 40,
            Food::IndigoMushroomMilkshake(IndigoMushroomMilkshake) => 41,
            Food::IslandPudding(IslandPudding) => 42,
            Food::JerkPoultry(JerkPoultry) => 43,
            Food::JerkPoultryAndNopalFlatbreadSandwich(JerkPoultryAndNopalFlatbreadSandwich) => 44,
            Food::JerkPoultryFlatbreadSandwich(JerkPoultryFlatbreadSandwich) => 45,
            Food::KimchiPancakes(KimchiPancakes) => 46,
            Food::KimchiTofuStew(KimchiTofuStew) => 47,
            Food::KoiCake(KoiCake) => 48,
            Food::KralkachocolateBar(KralkachocolateBar) => 49,
            Food::LakeDoricMussels(LakeDoricMussels) => 50,
            Food::LemongrassMusselPasta(LemongrassMusselPasta) => 51,
            Food::LemongrassPoultry(LemongrassPoultry) => 52,
            Food::LemongrassPoultrySoup(LemongrassPoultrySoup) => 53,
            Food::LotusStirfry(LotusStirfry) => 54,
            Food::MangoPie(MangoPie) => 55,
            Food::MarjorysExperimentalChili(MarjorysExperimentalChili) => 56,
            Food::MashedPurplePotatoes(MashedPurplePotatoes) => 57,
            Food::MeatyAsparagusSkewer(MeatyAsparagusSkewer) => 58,
            Food::MeatyRiceBowl(MeatyRiceBowl) => 59,
            Food::MushroomLoaf(MushroomLoaf) => 60,
            Food::MushroomsYakkington(MushroomsYakkington) => 61,
            Food::MusselSoup(MusselSoup) => 62,
            Food::MusselsGnashblade(MusselsGnashblade) => 63,
            Food::NopalitosSaut(NopalitosSaut) => 64,
            Food::OmnomberryBar(OmnomberryBar) => 65,
            Food::OmnomberryBread(OmnomberryBread) => 66,
            Food::OmnomberryCompote(OmnomberryCompote) => 67,
            Food::OmnomberryCookie(OmnomberryCookie) => 68,
            Food::OmnomberryGhost(OmnomberryGhost) => 69,
            Food::OmnomberryPie(OmnomberryPie) => 70,
            Food::OmnomberryTart(OmnomberryTart) => 71,
            Food::OrrianSteakFrittes(OrrianSteakFrittes) => 72,
            Food::OrrianTruffleAndMeatStew(OrrianTruffleAndMeatStew) => 73,
            Food::OrrianTruffleSoup(OrrianTruffleSoup) => 74,
            Food::OystersGnashblade(OystersGnashblade) => 75,
            Food::OystersWithCocktailSauce(OystersWithCocktailSauce) => 76,
            Food::OystersWithPestoSauce(OystersWithPestoSauce) => 77,
            Food::OystersWithSpicySauce(OystersWithSpicySauce) => 78,
            Food::OystersWithZestySauce(OystersWithZestySauce) => 79,
            Food::PassionFruitTapiocaPudding(PassionFruitTapiocaPudding) => 80,
            Food::PeppermintOmnomberryBar(PeppermintOmnomberryBar) => 81,
            Food::PoultrySatay(PoultrySatay) => 82,
            Food::PricklyPearPie(PricklyPearPie) => 83,
            Food::PricklyPearSorbet(PricklyPearSorbet) => 84,
            Food::PricklyPearStuffedNopal(PricklyPearStuffedNopal) => 85,
            Food::PricklyPearTapiocaPudding(PricklyPearTapiocaPudding) => 86,
            Food::QuicheOfDarkness(QuicheOfDarkness) => 87,
            Food::RareVeggiePizza(RareVeggiePizza) => 88,
            Food::RedLentilSaobosa(RedLentilSaobosa) => 89,
            Food::RedfishSushi(RedfishSushi) => 90,
            Food::RefugeesBeetSoup(RefugeesBeetSoup) => 91,
            Food::RoastedCactus(RoastedCactus) => 92,
            Food::RoastedLotusRoot(RoastedLotusRoot) => 93,
            Food::SaffronBread(SaffronBread) => 94,
            Food::SaffronMangoIceCream(SaffronMangoIceCream) => 95,
            Food::SaffronMussels(SaffronMussels) => 96,
            Food::SaffronStuffedMushroom(SaffronStuffedMushroom) => 97,
            Food::SaffronscentedPoultrySoup(SaffronscentedPoultrySoup) => 98,
            Food::SaintBones(SaintBones) => 99,
            Food::ScoopOfMintberrySwirlIceCream(ScoopOfMintberrySwirlIceCream) => 100,
            Food::SeaweedSalad(SeaweedSalad) => 101,
            Food::SliceOfAllspiceCake(SliceOfAllspiceCake) => 102,
            Food::SliceOfAllspiceCakeWithIceCream(SliceOfAllspiceCakeWithIceCream) => 103,
            Food::SliceOfCandiedDragonRoll(SliceOfCandiedDragonRoll) => 104,
            Food::SoulCake(SoulCake) => 105,
            Food::SoulPastry(SoulPastry) => 106,
            Food::SpicyChocolateCookie(SpicyChocolateCookie) => 107,
            Food::SpicyHerbedChicken(SpicyHerbedChicken) => 108,
            Food::SpicyMarinatedMushroom(SpicyMarinatedMushroom) => 109,
            Food::SpicyPumpkinCookie(SpicyPumpkinCookie) => 110,
            Food::SpringRoll(SpringRoll) => 111,
            Food::SteakWithWinterberrySauce(SteakWithWinterberrySauce) => 112,
            Food::SteamedRedDumpling(SteamedRedDumpling) => 113,
            Food::SuperHotLemongrassPoultrySoup(SuperHotLemongrassPoultrySoup) => 114,
            Food::SuperHotSaffronScentedPoultrySoup(SuperHotSaffronScentedPoultrySoup) => 115,
            Food::SweetAndSpicyBeans(SweetAndSpicyBeans) => 116,
            Food::SweetAndSpicyButternutSquashSoup(SweetAndSpicyButternutSquashSoup) => 117,
            Food::SweetBeanBun(SweetBeanBun) => 118,
            Food::SweetCurriedMussels(SweetCurriedMussels) => 119,
            Food::SwiftlyScrambledEggs(SwiftlyScrambledEggs) => 120,
            Food::TapiocaPudding(TapiocaPudding) => 121,
            Food::TropicalFruitSalad(TropicalFruitSalad) => 122,
            Food::TropicalMousse(TropicalMousse) => 123,
            Food::TropicalPeppermintCake(TropicalPeppermintCake) => 124,
            Food::TruffleRavioli(TruffleRavioli) => 125,
            Food::TruffleRisotto(TruffleRisotto) => 126,
            Food::TruffleSautee(TruffleSautee) => 127,
            Food::TruffleSteak(TruffleSteak) => 128,
            Food::TruffleSteakDinner(TruffleSteakDinner) => 129,
            Food::WinterberryPie(WinterberryPie) => 130,
            Food::WinterberrySeaweedSalad(WinterberrySeaweedSalad) => 131,
            Food::WinterberrySorbet(WinterberrySorbet) => 132,
            Food::ZestyTurnipSoup(ZestyTurnipSoup) => 133,
        }
    }
    pub fn from_index(i: usize) -> Food {
        match i {
            0 => Food::NoFood(NoFood),
            1 => Food::BeefRendang(BeefRendang),
            2 => Food::BlackPepperCactusSalad(BlackPepperCactusSalad),
            3 => Food::BlockOfTofu(BlockOfTofu),
            4 => Food::CactusFruitSalad(CactusFruitSalad),
            5 => Food::CactusSoup(CactusSoup),
            6 => Food::CandyCactusCornbread(CandyCactusCornbread),
            7 => Food::CarrotSouffl(CarrotSouffl),
            8 => Food::CheesyCassavaRoll(CheesyCassavaRoll),
            9 => Food::ChocolateOmnomberryCake(ChocolateOmnomberryCake),
            10 => Food::ChocolateOmnomberryCream(ChocolateOmnomberryCream),
            11 => Food::ChocolateTapiocaPudding(ChocolateTapiocaPudding),
            12 => Food::CupOfLotusFries(CupOfLotusFries),
            13 => Food::CurryButternutSquashSoup(CurryButternutSquashSoup),
            14 => Food::CurryMusselSoup(CurryMusselSoup),
            15 => Food::CurryPumpkinSoup(CurryPumpkinSoup),
            16 => Food::DeliciousRiceBall(DeliciousRiceBall),
            17 => Food::DragonfishCandy(DragonfishCandy),
            18 => Food::DragonflyCupcake(DragonflyCupcake),
            19 => Food::DragonsBreathBun(DragonsBreathBun),
            20 => Food::DragonsRevelryStarcake(DragonsRevelryStarcake),
            21 => Food::EggInACloud(EggInACloud),
            22 => Food::ExperimentalRemnant(ExperimentalRemnant),
            23 => Food::FancyPotatoAndLeekSoup(FancyPotatoAndLeekSoup),
            24 => Food::FancyTruffleBurger(FancyTruffleBurger),
            25 => Food::FireFlankSteak(FireFlankSteak),
            26 => Food::FireMeatChili(FireMeatChili),
            27 => Food::FireSalsa(FireSalsa),
            28 => Food::FireVeggieChili(FireVeggieChili),
            29 => Food::FishStew(FishStew),
            30 => Food::FishyRiceBowl(FishyRiceBowl),
            31 => Food::Flatbread(Flatbread),
            32 => Food::FriedGoldenDumpling(FriedGoldenDumpling),
            33 => Food::FriedOysterSandwich(FriedOysterSandwich),
            34 => Food::FriedOysters(FriedOysters),
            35 => Food::FrostgorgeClams(FrostgorgeClams),
            36 => Food::FruitSaladWithMintGarnish(FruitSaladWithMintGarnish),
            37 => Food::GarlicKaleSautee(GarlicKaleSautee),
            38 => Food::GhostPepperPopper(GhostPepperPopper),
            39 => Food::HolographicSuperCake(HolographicSuperCake),
            40 => Food::IcyFishSnack(IcyFishSnack),
            41 => Food::IndigoMushroomMilkshake(IndigoMushroomMilkshake),
            42 => Food::IslandPudding(IslandPudding),
            43 => Food::JerkPoultry(JerkPoultry),
            44 => Food::JerkPoultryAndNopalFlatbreadSandwich(JerkPoultryAndNopalFlatbreadSandwich),
            45 => Food::JerkPoultryFlatbreadSandwich(JerkPoultryFlatbreadSandwich),
            46 => Food::KimchiPancakes(KimchiPancakes),
            47 => Food::KimchiTofuStew(KimchiTofuStew),
            48 => Food::KoiCake(KoiCake),
            49 => Food::KralkachocolateBar(KralkachocolateBar),
            50 => Food::LakeDoricMussels(LakeDoricMussels),
            51 => Food::LemongrassMusselPasta(LemongrassMusselPasta),
            52 => Food::LemongrassPoultry(LemongrassPoultry),
            53 => Food::LemongrassPoultrySoup(LemongrassPoultrySoup),
            54 => Food::LotusStirfry(LotusStirfry),
            55 => Food::MangoPie(MangoPie),
            56 => Food::MarjorysExperimentalChili(MarjorysExperimentalChili),
            57 => Food::MashedPurplePotatoes(MashedPurplePotatoes),
            58 => Food::MeatyAsparagusSkewer(MeatyAsparagusSkewer),
            59 => Food::MeatyRiceBowl(MeatyRiceBowl),
            60 => Food::MushroomLoaf(MushroomLoaf),
            61 => Food::MushroomsYakkington(MushroomsYakkington),
            62 => Food::MusselSoup(MusselSoup),
            63 => Food::MusselsGnashblade(MusselsGnashblade),
            64 => Food::NopalitosSaut(NopalitosSaut),
            65 => Food::OmnomberryBar(OmnomberryBar),
            66 => Food::OmnomberryBread(OmnomberryBread),
            67 => Food::OmnomberryCompote(OmnomberryCompote),
            68 => Food::OmnomberryCookie(OmnomberryCookie),
            69 => Food::OmnomberryGhost(OmnomberryGhost),
            70 => Food::OmnomberryPie(OmnomberryPie),
            71 => Food::OmnomberryTart(OmnomberryTart),
            72 => Food::OrrianSteakFrittes(OrrianSteakFrittes),
            73 => Food::OrrianTruffleAndMeatStew(OrrianTruffleAndMeatStew),
            74 => Food::OrrianTruffleSoup(OrrianTruffleSoup),
            75 => Food::OystersGnashblade(OystersGnashblade),
            76 => Food::OystersWithCocktailSauce(OystersWithCocktailSauce),
            77 => Food::OystersWithPestoSauce(OystersWithPestoSauce),
            78 => Food::OystersWithSpicySauce(OystersWithSpicySauce),
            79 => Food::OystersWithZestySauce(OystersWithZestySauce),
            80 => Food::PassionFruitTapiocaPudding(PassionFruitTapiocaPudding),
            81 => Food::PeppermintOmnomberryBar(PeppermintOmnomberryBar),
            82 => Food::PoultrySatay(PoultrySatay),
            83 => Food::PricklyPearPie(PricklyPearPie),
            84 => Food::PricklyPearSorbet(PricklyPearSorbet),
            85 => Food::PricklyPearStuffedNopal(PricklyPearStuffedNopal),
            86 => Food::PricklyPearTapiocaPudding(PricklyPearTapiocaPudding),
            87 => Food::QuicheOfDarkness(QuicheOfDarkness),
            88 => Food::RareVeggiePizza(RareVeggiePizza),
            89 => Food::RedLentilSaobosa(RedLentilSaobosa),
            90 => Food::RedfishSushi(RedfishSushi),
            91 => Food::RefugeesBeetSoup(RefugeesBeetSoup),
            92 => Food::RoastedCactus(RoastedCactus),
            93 => Food::RoastedLotusRoot(RoastedLotusRoot),
            94 => Food::SaffronBread(SaffronBread),
            95 => Food::SaffronMangoIceCream(SaffronMangoIceCream),
            96 => Food::SaffronMussels(SaffronMussels),
            97 => Food::SaffronStuffedMushroom(SaffronStuffedMushroom),
            98 => Food::SaffronscentedPoultrySoup(SaffronscentedPoultrySoup),
            99 => Food::SaintBones(SaintBones),
            100 => Food::ScoopOfMintberrySwirlIceCream(ScoopOfMintberrySwirlIceCream),
            101 => Food::SeaweedSalad(SeaweedSalad),
            102 => Food::SliceOfAllspiceCake(SliceOfAllspiceCake),
            103 => Food::SliceOfAllspiceCakeWithIceCream(SliceOfAllspiceCakeWithIceCream),
            104 => Food::SliceOfCandiedDragonRoll(SliceOfCandiedDragonRoll),
            105 => Food::SoulCake(SoulCake),
            106 => Food::SoulPastry(SoulPastry),
            107 => Food::SpicyChocolateCookie(SpicyChocolateCookie),
            108 => Food::SpicyHerbedChicken(SpicyHerbedChicken),
            109 => Food::SpicyMarinatedMushroom(SpicyMarinatedMushroom),
            110 => Food::SpicyPumpkinCookie(SpicyPumpkinCookie),
            111 => Food::SpringRoll(SpringRoll),
            112 => Food::SteakWithWinterberrySauce(SteakWithWinterberrySauce),
            113 => Food::SteamedRedDumpling(SteamedRedDumpling),
            114 => Food::SuperHotLemongrassPoultrySoup(SuperHotLemongrassPoultrySoup),
            115 => Food::SuperHotSaffronScentedPoultrySoup(SuperHotSaffronScentedPoultrySoup),
            116 => Food::SweetAndSpicyBeans(SweetAndSpicyBeans),
            117 => Food::SweetAndSpicyButternutSquashSoup(SweetAndSpicyButternutSquashSoup),
            118 => Food::SweetBeanBun(SweetBeanBun),
            119 => Food::SweetCurriedMussels(SweetCurriedMussels),
            120 => Food::SwiftlyScrambledEggs(SwiftlyScrambledEggs),
            121 => Food::TapiocaPudding(TapiocaPudding),
            122 => Food::TropicalFruitSalad(TropicalFruitSalad),
            123 => Food::TropicalMousse(TropicalMousse),
            124 => Food::TropicalPeppermintCake(TropicalPeppermintCake),
            125 => Food::TruffleRavioli(TruffleRavioli),
            126 => Food::TruffleRisotto(TruffleRisotto),
            127 => Food::TruffleSautee(TruffleSautee),
            128 => Food::TruffleSteak(TruffleSteak),
            129 => Food::TruffleSteakDinner(TruffleSteakDinner),
            130 => Food::WinterberryPie(WinterberryPie),
            131 => Food::WinterberrySeaweedSalad(WinterberrySeaweedSalad),
            132 => Food::WinterberrySorbet(WinterberrySorbet),
            133 => Food::ZestyTurnipSoup(ZestyTurnipSoup),
            _ => panic!("index {} out of range for Food", i),
        }
    }
    pub fn iter() -> impl Iterator<Item = Food> {
        (0 .. Food::COUNT).map(Food::from_index)
    }
    pub fn display_name(self) -> &'static str {
        match self {
            Food::NoFood(x) => x.display_name(),
            Food::BeefRendang(x) => x.display_name(),
            Food::BlackPepperCactusSalad(x) => x.display_name(),
            Food::BlockOfTofu(x) => x.display_name(),
            Food::CactusFruitSalad(x) => x.display_name(),
            Food::CactusSoup(x) => x.display_name(),
            Food::CandyCactusCornbread(x) => x.display_name(),
            Food::CarrotSouffl(x) => x.display_name(),
            Food::CheesyCassavaRoll(x) => x.display_name(),
            Food::ChocolateOmnomberryCake(x) => x.display_name(),
            Food::ChocolateOmnomberryCream(x) => x.display_name(),
            Food::ChocolateTapiocaPudding(x) => x.display_name(),
            Food::CupOfLotusFries(x) => x.display_name(),
            Food::CurryButternutSquashSoup(x) => x.display_name(),
            Food::CurryMusselSoup(x) => x.display_name(),
            Food::CurryPumpkinSoup(x) => x.display_name(),
            Food::DeliciousRiceBall(x) => x.display_name(),
            Food::DragonfishCandy(x) => x.display_name(),
            Food::DragonflyCupcake(x) => x.display_name(),
            Food::DragonsBreathBun(x) => x.display_name(),
            Food::DragonsRevelryStarcake(x) => x.display_name(),
            Food::EggInACloud(x) => x.display_name(),
            Food::ExperimentalRemnant(x) => x.display_name(),
            Food::FancyPotatoAndLeekSoup(x) => x.display_name(),
            Food::FancyTruffleBurger(x) => x.display_name(),
            Food::FireFlankSteak(x) => x.display_name(),
            Food::FireMeatChili(x) => x.display_name(),
            Food::FireSalsa(x) => x.display_name(),
            Food::FireVeggieChili(x) => x.display_name(),
            Food::FishStew(x) => x.display_name(),
            Food::FishyRiceBowl(x) => x.display_name(),
            Food::Flatbread(x) => x.display_name(),
            Food::FriedGoldenDumpling(x) => x.display_name(),
            Food::FriedOysterSandwich(x) => x.display_name(),
            Food::FriedOysters(x) => x.display_name(),
            Food::FrostgorgeClams(x) => x.display_name(),
            Food::FruitSaladWithMintGarnish(x) => x.display_name(),
            Food::GarlicKaleSautee(x) => x.display_name(),
            Food::GhostPepperPopper(x) => x.display_name(),
            Food::HolographicSuperCake(x) => x.display_name(),
            Food::IcyFishSnack(x) => x.display_name(),
            Food::IndigoMushroomMilkshake(x) => x.display_name(),
            Food::IslandPudding(x) => x.display_name(),
            Food::JerkPoultry(x) => x.display_name(),
            Food::JerkPoultryAndNopalFlatbreadSandwich(x) => x.display_name(),
            Food::JerkPoultryFlatbreadSandwich(x) => x.display_name(),
            Food::KimchiPancakes(x) => x.display_name(),
            Food::KimchiTofuStew(x) => x.display_name(),
            Food::KoiCake(x) => x.display_name(),
            Food::KralkachocolateBar(x) => x.display_name(),
            Food::LakeDoricMussels(x) => x.display_name(),
            Food::LemongrassMusselPasta(x) => x.display_name(),
            Food::LemongrassPoultry(x) => x.display_name(),
            Food::LemongrassPoultrySoup(x) => x.display_name(),
            Food::LotusStirfry(x) => x.display_name(),
            Food::MangoPie(x) => x.display_name(),
            Food::MarjorysExperimentalChili(x) => x.display_name(),
            Food::MashedPurplePotatoes(x) => x.display_name(),
            Food::MeatyAsparagusSkewer(x) => x.display_name(),
            Food::MeatyRiceBowl(x) => x.display_name(),
            Food::MushroomLoaf(x) => x.display_name(),
            Food::MushroomsYakkington(x) => x.display_name(),
            Food::MusselSoup(x) => x.display_name(),
            Food::MusselsGnashblade(x) => x.display_name(),
            Food::NopalitosSaut(x) => x.display_name(),
            Food::OmnomberryBar(x) => x.display_name(),
            Food::OmnomberryBread(x) => x.display_name(),
            Food::OmnomberryCompote(x) => x.display_name(),
            Food::OmnomberryCookie(x) => x.display_name(),
            Food::OmnomberryGhost(x) => x.display_name(),
            Food::OmnomberryPie(x) => x.display_name(),
            Food::OmnomberryTart(x) => x.display_name(),
            Food::OrrianSteakFrittes(x) => x.display_name(),
            Food::OrrianTruffleAndMeatStew(x) => x.display_name(),
            Food::OrrianTruffleSoup(x) => x.display_name(),
            Food::OystersGnashblade(x) => x.display_name(),
            Food::OystersWithCocktailSauce(x) => x.display_name(),
            Food::OystersWithPestoSauce(x) => x.display_name(),
            Food::OystersWithSpicySauce(x) => x.display_name(),
            Food::OystersWithZestySauce(x) => x.display_name(),
            Food::PassionFruitTapiocaPudding(x) => x.display_name(),
            Food::PeppermintOmnomberryBar(x) => x.display_name(),
            Food::PoultrySatay(x) => x.display_name(),
            Food::PricklyPearPie(x) => x.display_name(),
            Food::PricklyPearSorbet(x) => x.display_name(),
            Food::PricklyPearStuffedNopal(x) => x.display_name(),
            Food::PricklyPearTapiocaPudding(x) => x.display_name(),
            Food::QuicheOfDarkness(x) => x.display_name(),
            Food::RareVeggiePizza(x) => x.display_name(),
            Food::RedLentilSaobosa(x) => x.display_name(),
            Food::RedfishSushi(x) => x.display_name(),
            Food::RefugeesBeetSoup(x) => x.display_name(),
            Food::RoastedCactus(x) => x.display_name(),
            Food::RoastedLotusRoot(x) => x.display_name(),
            Food::SaffronBread(x) => x.display_name(),
            Food::SaffronMangoIceCream(x) => x.display_name(),
            Food::SaffronMussels(x) => x.display_name(),
            Food::SaffronStuffedMushroom(x) => x.display_name(),
            Food::SaffronscentedPoultrySoup(x) => x.display_name(),
            Food::SaintBones(x) => x.display_name(),
            Food::ScoopOfMintberrySwirlIceCream(x) => x.display_name(),
            Food::SeaweedSalad(x) => x.display_name(),
            Food::SliceOfAllspiceCake(x) => x.display_name(),
            Food::SliceOfAllspiceCakeWithIceCream(x) => x.display_name(),
            Food::SliceOfCandiedDragonRoll(x) => x.display_name(),
            Food::SoulCake(x) => x.display_name(),
            Food::SoulPastry(x) => x.display_name(),
            Food::SpicyChocolateCookie(x) => x.display_name(),
            Food::SpicyHerbedChicken(x) => x.display_name(),
            Food::SpicyMarinatedMushroom(x) => x.display_name(),
            Food::SpicyPumpkinCookie(x) => x.display_name(),
            Food::SpringRoll(x) => x.display_name(),
            Food::SteakWithWinterberrySauce(x) => x.display_name(),
            Food::SteamedRedDumpling(x) => x.display_name(),
            Food::SuperHotLemongrassPoultrySoup(x) => x.display_name(),
            Food::SuperHotSaffronScentedPoultrySoup(x) => x.display_name(),
            Food::SweetAndSpicyBeans(x) => x.display_name(),
            Food::SweetAndSpicyButternutSquashSoup(x) => x.display_name(),
            Food::SweetBeanBun(x) => x.display_name(),
            Food::SweetCurriedMussels(x) => x.display_name(),
            Food::SwiftlyScrambledEggs(x) => x.display_name(),
            Food::TapiocaPudding(x) => x.display_name(),
            Food::TropicalFruitSalad(x) => x.display_name(),
            Food::TropicalMousse(x) => x.display_name(),
            Food::TropicalPeppermintCake(x) => x.display_name(),
            Food::TruffleRavioli(x) => x.display_name(),
            Food::TruffleRisotto(x) => x.display_name(),
            Food::TruffleSautee(x) => x.display_name(),
            Food::TruffleSteak(x) => x.display_name(),
            Food::TruffleSteakDinner(x) => x.display_name(),
            Food::WinterberryPie(x) => x.display_name(),
            Food::WinterberrySeaweedSalad(x) => x.display_name(),
            Food::WinterberrySorbet(x) => x.display_name(),
            Food::ZestyTurnipSoup(x) => x.display_name(),
        }
    }
}
impl Effect for Food {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Food::NoFood(x) => x.add_permanent(s, m),
            Food::BeefRendang(x) => x.add_permanent(s, m),
            Food::BlackPepperCactusSalad(x) => x.add_permanent(s, m),
            Food::BlockOfTofu(x) => x.add_permanent(s, m),
            Food::CactusFruitSalad(x) => x.add_permanent(s, m),
            Food::CactusSoup(x) => x.add_permanent(s, m),
            Food::CandyCactusCornbread(x) => x.add_permanent(s, m),
            Food::CarrotSouffl(x) => x.add_permanent(s, m),
            Food::CheesyCassavaRoll(x) => x.add_permanent(s, m),
            Food::ChocolateOmnomberryCake(x) => x.add_permanent(s, m),
            Food::ChocolateOmnomberryCream(x) => x.add_permanent(s, m),
            Food::ChocolateTapiocaPudding(x) => x.add_permanent(s, m),
            Food::CupOfLotusFries(x) => x.add_permanent(s, m),
            Food::CurryButternutSquashSoup(x) => x.add_permanent(s, m),
            Food::CurryMusselSoup(x) => x.add_permanent(s, m),
            Food::CurryPumpkinSoup(x) => x.add_permanent(s, m),
            Food::DeliciousRiceBall(x) => x.add_permanent(s, m),
            Food::DragonfishCandy(x) => x.add_permanent(s, m),
            Food::DragonflyCupcake(x) => x.add_permanent(s, m),
            Food::DragonsBreathBun(x) => x.add_permanent(s, m),
            Food::DragonsRevelryStarcake(x) => x.add_permanent(s, m),
            Food::EggInACloud(x) => x.add_permanent(s, m),
            Food::ExperimentalRemnant(x) => x.add_permanent(s, m),
            Food::FancyPotatoAndLeekSoup(x) => x.add_permanent(s, m),
            Food::FancyTruffleBurger(x) => x.add_permanent(s, m),
            Food::FireFlankSteak(x) => x.add_permanent(s, m),
            Food::FireMeatChili(x) => x.add_permanent(s, m),
            Food::FireSalsa(x) => x.add_permanent(s, m),
            Food::FireVeggieChili(x) => x.add_permanent(s, m),
            Food::FishStew(x) => x.add_permanent(s, m),
            Food::FishyRiceBowl(x) => x.add_permanent(s, m),
            Food::Flatbread(x) => x.add_permanent(s, m),
            Food::FriedGoldenDumpling(x) => x.add_permanent(s, m),
            Food::FriedOysterSandwich(x) => x.add_permanent(s, m),
            Food::FriedOysters(x) => x.add_permanent(s, m),
            Food::FrostgorgeClams(x) => x.add_permanent(s, m),
            Food::FruitSaladWithMintGarnish(x) => x.add_permanent(s, m),
            Food::GarlicKaleSautee(x) => x.add_permanent(s, m),
            Food::GhostPepperPopper(x) => x.add_permanent(s, m),
            Food::HolographicSuperCake(x) => x.add_permanent(s, m),
            Food::IcyFishSnack(x) => x.add_permanent(s, m),
            Food::IndigoMushroomMilkshake(x) => x.add_permanent(s, m),
            Food::IslandPudding(x) => x.add_permanent(s, m),
            Food::JerkPoultry(x) => x.add_permanent(s, m),
            Food::JerkPoultryAndNopalFlatbreadSandwich(x) => x.add_permanent(s, m),
            Food::JerkPoultryFlatbreadSandwich(x) => x.add_permanent(s, m),
            Food::KimchiPancakes(x) => x.add_permanent(s, m),
            Food::KimchiTofuStew(x) => x.add_permanent(s, m),
            Food::KoiCake(x) => x.add_permanent(s, m),
            Food::KralkachocolateBar(x) => x.add_permanent(s, m),
            Food::LakeDoricMussels(x) => x.add_permanent(s, m),
            Food::LemongrassMusselPasta(x) => x.add_permanent(s, m),
            Food::LemongrassPoultry(x) => x.add_permanent(s, m),
            Food::LemongrassPoultrySoup(x) => x.add_permanent(s, m),
            Food::LotusStirfry(x) => x.add_permanent(s, m),
            Food::MangoPie(x) => x.add_permanent(s, m),
            Food::MarjorysExperimentalChili(x) => x.add_permanent(s, m),
            Food::MashedPurplePotatoes(x) => x.add_permanent(s, m),
            Food::MeatyAsparagusSkewer(x) => x.add_permanent(s, m),
            Food::MeatyRiceBowl(x) => x.add_permanent(s, m),
            Food::MushroomLoaf(x) => x.add_permanent(s, m),
            Food::MushroomsYakkington(x) => x.add_permanent(s, m),
            Food::MusselSoup(x) => x.add_permanent(s, m),
            Food::MusselsGnashblade(x) => x.add_permanent(s, m),
            Food::NopalitosSaut(x) => x.add_permanent(s, m),
            Food::OmnomberryBar(x) => x.add_permanent(s, m),
            Food::OmnomberryBread(x) => x.add_permanent(s, m),
            Food::OmnomberryCompote(x) => x.add_permanent(s, m),
            Food::OmnomberryCookie(x) => x.add_permanent(s, m),
            Food::OmnomberryGhost(x) => x.add_permanent(s, m),
            Food::OmnomberryPie(x) => x.add_permanent(s, m),
            Food::OmnomberryTart(x) => x.add_permanent(s, m),
            Food::OrrianSteakFrittes(x) => x.add_permanent(s, m),
            Food::OrrianTruffleAndMeatStew(x) => x.add_permanent(s, m),
            Food::OrrianTruffleSoup(x) => x.add_permanent(s, m),
            Food::OystersGnashblade(x) => x.add_permanent(s, m),
            Food::OystersWithCocktailSauce(x) => x.add_permanent(s, m),
            Food::OystersWithPestoSauce(x) => x.add_permanent(s, m),
            Food::OystersWithSpicySauce(x) => x.add_permanent(s, m),
            Food::OystersWithZestySauce(x) => x.add_permanent(s, m),
            Food::PassionFruitTapiocaPudding(x) => x.add_permanent(s, m),
            Food::PeppermintOmnomberryBar(x) => x.add_permanent(s, m),
            Food::PoultrySatay(x) => x.add_permanent(s, m),
            Food::PricklyPearPie(x) => x.add_permanent(s, m),
            Food::PricklyPearSorbet(x) => x.add_permanent(s, m),
            Food::PricklyPearStuffedNopal(x) => x.add_permanent(s, m),
            Food::PricklyPearTapiocaPudding(x) => x.add_permanent(s, m),
            Food::QuicheOfDarkness(x) => x.add_permanent(s, m),
            Food::RareVeggiePizza(x) => x.add_permanent(s, m),
            Food::RedLentilSaobosa(x) => x.add_permanent(s, m),
            Food::RedfishSushi(x) => x.add_permanent(s, m),
            Food::RefugeesBeetSoup(x) => x.add_permanent(s, m),
            Food::RoastedCactus(x) => x.add_permanent(s, m),
            Food::RoastedLotusRoot(x) => x.add_permanent(s, m),
            Food::SaffronBread(x) => x.add_permanent(s, m),
            Food::SaffronMangoIceCream(x) => x.add_permanent(s, m),
            Food::SaffronMussels(x) => x.add_permanent(s, m),
            Food::SaffronStuffedMushroom(x) => x.add_permanent(s, m),
            Food::SaffronscentedPoultrySoup(x) => x.add_permanent(s, m),
            Food::SaintBones(x) => x.add_permanent(s, m),
            Food::ScoopOfMintberrySwirlIceCream(x) => x.add_permanent(s, m),
            Food::SeaweedSalad(x) => x.add_permanent(s, m),
            Food::SliceOfAllspiceCake(x) => x.add_permanent(s, m),
            Food::SliceOfAllspiceCakeWithIceCream(x) => x.add_permanent(s, m),
            Food::SliceOfCandiedDragonRoll(x) => x.add_permanent(s, m),
            Food::SoulCake(x) => x.add_permanent(s, m),
            Food::SoulPastry(x) => x.add_permanent(s, m),
            Food::SpicyChocolateCookie(x) => x.add_permanent(s, m),
            Food::SpicyHerbedChicken(x) => x.add_permanent(s, m),
            Food::SpicyMarinatedMushroom(x) => x.add_permanent(s, m),
            Food::SpicyPumpkinCookie(x) => x.add_permanent(s, m),
            Food::SpringRoll(x) => x.add_permanent(s, m),
            Food::SteakWithWinterberrySauce(x) => x.add_permanent(s, m),
            Food::SteamedRedDumpling(x) => x.add_permanent(s, m),
            Food::SuperHotLemongrassPoultrySoup(x) => x.add_permanent(s, m),
            Food::SuperHotSaffronScentedPoultrySoup(x) => x.add_permanent(s, m),
            Food::SweetAndSpicyBeans(x) => x.add_permanent(s, m),
            Food::SweetAndSpicyButternutSquashSoup(x) => x.add_permanent(s, m),
            Food::SweetBeanBun(x) => x.add_permanent(s, m),
            Food::SweetCurriedMussels(x) => x.add_permanent(s, m),
            Food::SwiftlyScrambledEggs(x) => x.add_permanent(s, m),
            Food::TapiocaPudding(x) => x.add_permanent(s, m),
            Food::TropicalFruitSalad(x) => x.add_permanent(s, m),
            Food::TropicalMousse(x) => x.add_permanent(s, m),
            Food::TropicalPeppermintCake(x) => x.add_permanent(s, m),
            Food::TruffleRavioli(x) => x.add_permanent(s, m),
            Food::TruffleRisotto(x) => x.add_permanent(s, m),
            Food::TruffleSautee(x) => x.add_permanent(s, m),
            Food::TruffleSteak(x) => x.add_permanent(s, m),
            Food::TruffleSteakDinner(x) => x.add_permanent(s, m),
            Food::WinterberryPie(x) => x.add_permanent(s, m),
            Food::WinterberrySeaweedSalad(x) => x.add_permanent(s, m),
            Food::WinterberrySorbet(x) => x.add_permanent(s, m),
            Food::ZestyTurnipSoup(x) => x.add_permanent(s, m),
        }
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Food::NoFood(x) => x.distribute(s, m),
            Food::BeefRendang(x) => x.distribute(s, m),
            Food::BlackPepperCactusSalad(x) => x.distribute(s, m),
            Food::BlockOfTofu(x) => x.distribute(s, m),
            Food::CactusFruitSalad(x) => x.distribute(s, m),
            Food::CactusSoup(x) => x.distribute(s, m),
            Food::CandyCactusCornbread(x) => x.distribute(s, m),
            Food::CarrotSouffl(x) => x.distribute(s, m),
            Food::CheesyCassavaRoll(x) => x.distribute(s, m),
            Food::ChocolateOmnomberryCake(x) => x.distribute(s, m),
            Food::ChocolateOmnomberryCream(x) => x.distribute(s, m),
            Food::ChocolateTapiocaPudding(x) => x.distribute(s, m),
            Food::CupOfLotusFries(x) => x.distribute(s, m),
            Food::CurryButternutSquashSoup(x) => x.distribute(s, m),
            Food::CurryMusselSoup(x) => x.distribute(s, m),
            Food::CurryPumpkinSoup(x) => x.distribute(s, m),
            Food::DeliciousRiceBall(x) => x.distribute(s, m),
            Food::DragonfishCandy(x) => x.distribute(s, m),
            Food::DragonflyCupcake(x) => x.distribute(s, m),
            Food::DragonsBreathBun(x) => x.distribute(s, m),
            Food::DragonsRevelryStarcake(x) => x.distribute(s, m),
            Food::EggInACloud(x) => x.distribute(s, m),
            Food::ExperimentalRemnant(x) => x.distribute(s, m),
            Food::FancyPotatoAndLeekSoup(x) => x.distribute(s, m),
            Food::FancyTruffleBurger(x) => x.distribute(s, m),
            Food::FireFlankSteak(x) => x.distribute(s, m),
            Food::FireMeatChili(x) => x.distribute(s, m),
            Food::FireSalsa(x) => x.distribute(s, m),
            Food::FireVeggieChili(x) => x.distribute(s, m),
            Food::FishStew(x) => x.distribute(s, m),
            Food::FishyRiceBowl(x) => x.distribute(s, m),
            Food::Flatbread(x) => x.distribute(s, m),
            Food::FriedGoldenDumpling(x) => x.distribute(s, m),
            Food::FriedOysterSandwich(x) => x.distribute(s, m),
            Food::FriedOysters(x) => x.distribute(s, m),
            Food::FrostgorgeClams(x) => x.distribute(s, m),
            Food::FruitSaladWithMintGarnish(x) => x.distribute(s, m),
            Food::GarlicKaleSautee(x) => x.distribute(s, m),
            Food::GhostPepperPopper(x) => x.distribute(s, m),
            Food::HolographicSuperCake(x) => x.distribute(s, m),
            Food::IcyFishSnack(x) => x.distribute(s, m),
            Food::IndigoMushroomMilkshake(x) => x.distribute(s, m),
            Food::IslandPudding(x) => x.distribute(s, m),
            Food::JerkPoultry(x) => x.distribute(s, m),
            Food::JerkPoultryAndNopalFlatbreadSandwich(x) => x.distribute(s, m),
            Food::JerkPoultryFlatbreadSandwich(x) => x.distribute(s, m),
            Food::KimchiPancakes(x) => x.distribute(s, m),
            Food::KimchiTofuStew(x) => x.distribute(s, m),
            Food::KoiCake(x) => x.distribute(s, m),
            Food::KralkachocolateBar(x) => x.distribute(s, m),
            Food::LakeDoricMussels(x) => x.distribute(s, m),
            Food::LemongrassMusselPasta(x) => x.distribute(s, m),
            Food::LemongrassPoultry(x) => x.distribute(s, m),
            Food::LemongrassPoultrySoup(x) => x.distribute(s, m),
            Food::LotusStirfry(x) => x.distribute(s, m),
            Food::MangoPie(x) => x.distribute(s, m),
            Food::MarjorysExperimentalChili(x) => x.distribute(s, m),
            Food::MashedPurplePotatoes(x) => x.distribute(s, m),
            Food::MeatyAsparagusSkewer(x) => x.distribute(s, m),
            Food::MeatyRiceBowl(x) => x.distribute(s, m),
            Food::MushroomLoaf(x) => x.distribute(s, m),
            Food::MushroomsYakkington(x) => x.distribute(s, m),
            Food::MusselSoup(x) => x.distribute(s, m),
            Food::MusselsGnashblade(x) => x.distribute(s, m),
            Food::NopalitosSaut(x) => x.distribute(s, m),
            Food::OmnomberryBar(x) => x.distribute(s, m),
            Food::OmnomberryBread(x) => x.distribute(s, m),
            Food::OmnomberryCompote(x) => x.distribute(s, m),
            Food::OmnomberryCookie(x) => x.distribute(s, m),
            Food::OmnomberryGhost(x) => x.distribute(s, m),
            Food::OmnomberryPie(x) => x.distribute(s, m),
            Food::OmnomberryTart(x) => x.distribute(s, m),
            Food::OrrianSteakFrittes(x) => x.distribute(s, m),
            Food::OrrianTruffleAndMeatStew(x) => x.distribute(s, m),
            Food::OrrianTruffleSoup(x) => x.distribute(s, m),
            Food::OystersGnashblade(x) => x.distribute(s, m),
            Food::OystersWithCocktailSauce(x) => x.distribute(s, m),
            Food::OystersWithPestoSauce(x) => x.distribute(s, m),
            Food::OystersWithSpicySauce(x) => x.distribute(s, m),
            Food::OystersWithZestySauce(x) => x.distribute(s, m),
            Food::PassionFruitTapiocaPudding(x) => x.distribute(s, m),
            Food::PeppermintOmnomberryBar(x) => x.distribute(s, m),
            Food::PoultrySatay(x) => x.distribute(s, m),
            Food::PricklyPearPie(x) => x.distribute(s, m),
            Food::PricklyPearSorbet(x) => x.distribute(s, m),
            Food::PricklyPearStuffedNopal(x) => x.distribute(s, m),
            Food::PricklyPearTapiocaPudding(x) => x.distribute(s, m),
            Food::QuicheOfDarkness(x) => x.distribute(s, m),
            Food::RareVeggiePizza(x) => x.distribute(s, m),
            Food::RedLentilSaobosa(x) => x.distribute(s, m),
            Food::RedfishSushi(x) => x.distribute(s, m),
            Food::RefugeesBeetSoup(x) => x.distribute(s, m),
            Food::RoastedCactus(x) => x.distribute(s, m),
            Food::RoastedLotusRoot(x) => x.distribute(s, m),
            Food::SaffronBread(x) => x.distribute(s, m),
            Food::SaffronMangoIceCream(x) => x.distribute(s, m),
            Food::SaffronMussels(x) => x.distribute(s, m),
            Food::SaffronStuffedMushroom(x) => x.distribute(s, m),
            Food::SaffronscentedPoultrySoup(x) => x.distribute(s, m),
            Food::SaintBones(x) => x.distribute(s, m),
            Food::ScoopOfMintberrySwirlIceCream(x) => x.distribute(s, m),
            Food::SeaweedSalad(x) => x.distribute(s, m),
            Food::SliceOfAllspiceCake(x) => x.distribute(s, m),
            Food::SliceOfAllspiceCakeWithIceCream(x) => x.distribute(s, m),
            Food::SliceOfCandiedDragonRoll(x) => x.distribute(s, m),
            Food::SoulCake(x) => x.distribute(s, m),
            Food::SoulPastry(x) => x.distribute(s, m),
            Food::SpicyChocolateCookie(x) => x.distribute(s, m),
            Food::SpicyHerbedChicken(x) => x.distribute(s, m),
            Food::SpicyMarinatedMushroom(x) => x.distribute(s, m),
            Food::SpicyPumpkinCookie(x) => x.distribute(s, m),
            Food::SpringRoll(x) => x.distribute(s, m),
            Food::SteakWithWinterberrySauce(x) => x.distribute(s, m),
            Food::SteamedRedDumpling(x) => x.distribute(s, m),
            Food::SuperHotLemongrassPoultrySoup(x) => x.distribute(s, m),
            Food::SuperHotSaffronScentedPoultrySoup(x) => x.distribute(s, m),
            Food::SweetAndSpicyBeans(x) => x.distribute(s, m),
            Food::SweetAndSpicyButternutSquashSoup(x) => x.distribute(s, m),
            Food::SweetBeanBun(x) => x.distribute(s, m),
            Food::SweetCurriedMussels(x) => x.distribute(s, m),
            Food::SwiftlyScrambledEggs(x) => x.distribute(s, m),
            Food::TapiocaPudding(x) => x.distribute(s, m),
            Food::TropicalFruitSalad(x) => x.distribute(s, m),
            Food::TropicalMousse(x) => x.distribute(s, m),
            Food::TropicalPeppermintCake(x) => x.distribute(s, m),
            Food::TruffleRavioli(x) => x.distribute(s, m),
            Food::TruffleRisotto(x) => x.distribute(s, m),
            Food::TruffleSautee(x) => x.distribute(s, m),
            Food::TruffleSteak(x) => x.distribute(s, m),
            Food::TruffleSteakDinner(x) => x.distribute(s, m),
            Food::WinterberryPie(x) => x.distribute(s, m),
            Food::WinterberrySeaweedSalad(x) => x.distribute(s, m),
            Food::WinterberrySorbet(x) => x.distribute(s, m),
            Food::ZestyTurnipSoup(x) => x.distribute(s, m),
        }
    }
    fn add_temporary(&self, s: &mut Stats, m: &mut Modifiers, c: &CombatSecond) {
        match *self {
            Food::NoFood(x) => x.add_temporary(s, m, c),
            Food::BeefRendang(x) => x.add_temporary(s, m, c),
            Food::BlackPepperCactusSalad(x) => x.add_temporary(s, m, c),
            Food::BlockOfTofu(x) => x.add_temporary(s, m, c),
            Food::CactusFruitSalad(x) => x.add_temporary(s, m, c),
            Food::CactusSoup(x) => x.add_temporary(s, m, c),
            Food::CandyCactusCornbread(x) => x.add_temporary(s, m, c),
            Food::CarrotSouffl(x) => x.add_temporary(s, m, c),
            Food::CheesyCassavaRoll(x) => x.add_temporary(s, m, c),
            Food::ChocolateOmnomberryCake(x) => x.add_temporary(s, m, c),
            Food::ChocolateOmnomberryCream(x) => x.add_temporary(s, m, c),
            Food::ChocolateTapiocaPudding(x) => x.add_temporary(s, m, c),
            Food::CupOfLotusFries(x) => x.add_temporary(s, m, c),
            Food::CurryButternutSquashSoup(x) => x.add_temporary(s, m, c),
            Food::CurryMusselSoup(x) => x.add_temporary(s, m, c),
            Food::CurryPumpkinSoup(x) => x.add_temporary(s, m, c),
            Food::DeliciousRiceBall(x) => x.add_temporary(s, m, c),
            Food::DragonfishCandy(x) => x.add_temporary(s, m, c),
            Food::DragonflyCupcake(x) => x.add_temporary(s, m, c),
            Food::DragonsBreathBun(x) => x.add_temporary(s, m, c),
            Food::DragonsRevelryStarcake(x) => x.add_temporary(s, m, c),
            Food::EggInACloud(x) => x.add_temporary(s, m, c),
            Food::ExperimentalRemnant(x) => x.add_temporary(s, m, c),
            Food::FancyPotatoAndLeekSoup(x) => x.add_temporary(s, m, c),
            Food::FancyTruffleBurger(x) => x.add_temporary(s, m, c),
            Food::FireFlankSteak(x) => x.add_temporary(s, m, c),
            Food::FireMeatChili(x) => x.add_temporary(s, m, c),
            Food::FireSalsa(x) => x.add_temporary(s, m, c),
            Food::FireVeggieChili(x) => x.add_temporary(s, m, c),
            Food::FishStew(x) => x.add_temporary(s, m, c),
            Food::FishyRiceBowl(x) => x.add_temporary(s, m, c),
            Food::Flatbread(x) => x.add_temporary(s, m, c),
            Food::FriedGoldenDumpling(x) => x.add_temporary(s, m, c),
            Food::FriedOysterSandwich(x) => x.add_temporary(s, m, c),
            Food::FriedOysters(x) => x.add_temporary(s, m, c),
            Food::FrostgorgeClams(x) => x.add_temporary(s, m, c),
            Food::FruitSaladWithMintGarnish(x) => x.add_temporary(s, m, c),
            Food::GarlicKaleSautee(x) => x.add_temporary(s, m, c),
            Food::GhostPepperPopper(x) => x.add_temporary(s, m, c),
            Food::HolographicSuperCake(x) => x.add_temporary(s, m, c),
            Food::IcyFishSnack(x) => x.add_temporary(s, m, c),
            Food::IndigoMushroomMilkshake(x) => x.add_temporary(s, m, c),
            Food::IslandPudding(x) => x.add_temporary(s, m, c),
            Food::JerkPoultry(x) => x.add_temporary(s, m, c),
            Food::JerkPoultryAndNopalFlatbreadSandwich(x) => x.add_temporary(s, m, c),
            Food::JerkPoultryFlatbreadSandwich(x) => x.add_temporary(s, m, c),
            Food::KimchiPancakes(x) => x.add_temporary(s, m, c),
            Food::KimchiTofuStew(x) => x.add_temporary(s, m, c),
            Food::KoiCake(x) => x.add_temporary(s, m, c),
            Food::KralkachocolateBar(x) => x.add_temporary(s, m, c),
            Food::LakeDoricMussels(x) => x.add_temporary(s, m, c),
            Food::LemongrassMusselPasta(x) => x.add_temporary(s, m, c),
            Food::LemongrassPoultry(x) => x.add_temporary(s, m, c),
            Food::LemongrassPoultrySoup(x) => x.add_temporary(s, m, c),
            Food::LotusStirfry(x) => x.add_temporary(s, m, c),
            Food::MangoPie(x) => x.add_temporary(s, m, c),
            Food::MarjorysExperimentalChili(x) => x.add_temporary(s, m, c),
            Food::MashedPurplePotatoes(x) => x.add_temporary(s, m, c),
            Food::MeatyAsparagusSkewer(x) => x.add_temporary(s, m, c),
            Food::MeatyRiceBowl(x) => x.add_temporary(s, m, c),
            Food::MushroomLoaf(x) => x.add_temporary(s, m, c),
            Food::MushroomsYakkington(x) => x.add_temporary(s, m, c),
            Food::MusselSoup(x) => x.add_temporary(s, m, c),
            Food::MusselsGnashblade(x) => x.add_temporary(s, m, c),
            Food::NopalitosSaut(x) => x.add_temporary(s, m, c),
            Food::OmnomberryBar(x) => x.add_temporary(s, m, c),
            Food::OmnomberryBread(x) => x.add_temporary(s, m, c),
            Food::OmnomberryCompote(x) => x.add_temporary(s, m, c),
            Food::OmnomberryCookie(x) => x.add_temporary(s, m, c),
            Food::OmnomberryGhost(x) => x.add_temporary(s, m, c),
            Food::OmnomberryPie(x) => x.add_temporary(s, m, c),
            Food::OmnomberryTart(x) => x.add_temporary(s, m, c),
            Food::OrrianSteakFrittes(x) => x.add_temporary(s, m, c),
            Food::OrrianTruffleAndMeatStew(x) => x.add_temporary(s, m, c),
            Food::OrrianTruffleSoup(x) => x.add_temporary(s, m, c),
            Food::OystersGnashblade(x) => x.add_temporary(s, m, c),
            Food::OystersWithCocktailSauce(x) => x.add_temporary(s, m, c),
            Food::OystersWithPestoSauce(x) => x.add_temporary(s, m, c),
            Food::OystersWithSpicySauce(x) => x.add_temporary(s, m, c),
            Food::OystersWithZestySauce(x) => x.add_temporary(s, m, c),
            Food::PassionFruitTapiocaPudding(x) => x.add_temporary(s, m, c),
            Food::PeppermintOmnomberryBar(x) => x.add_temporary(s, m, c),
            Food::PoultrySatay(x) => x.add_temporary(s, m, c),
            Food::PricklyPearPie(x) => x.add_temporary(s, m, c),
            Food::PricklyPearSorbet(x) => x.add_temporary(s, m, c),
            Food::PricklyPearStuffedNopal(x) => x.add_temporary(s, m, c),
            Food::PricklyPearTapiocaPudding(x) => x.add_temporary(s, m, c),
            Food::QuicheOfDarkness(x) => x.add_temporary(s, m, c),
            Food::RareVeggiePizza(x) => x.add_temporary(s, m, c),
            Food::RedLentilSaobosa(x) => x.add_temporary(s, m, c),
            Food::RedfishSushi(x) => x.add_temporary(s, m, c),
            Food::RefugeesBeetSoup(x) => x.add_temporary(s, m, c),
            Food::RoastedCactus(x) => x.add_temporary(s, m, c),
            Food::RoastedLotusRoot(x) => x.add_temporary(s, m, c),
            Food::SaffronBread(x) => x.add_temporary(s, m, c),
            Food::SaffronMangoIceCream(x) => x.add_temporary(s, m, c),
            Food::SaffronMussels(x) => x.add_temporary(s, m, c),
            Food::SaffronStuffedMushroom(x) => x.add_temporary(s, m, c),
            Food::SaffronscentedPoultrySoup(x) => x.add_temporary(s, m, c),
            Food::SaintBones(x) => x.add_temporary(s, m, c),
            Food::ScoopOfMintberrySwirlIceCream(x) => x.add_temporary(s, m, c),
            Food::SeaweedSalad(x) => x.add_temporary(s, m, c),
            Food::SliceOfAllspiceCake(x) => x.add_temporary(s, m, c),
            Food::SliceOfAllspiceCakeWithIceCream(x) => x.add_temporary(s, m, c),
            Food::SliceOfCandiedDragonRoll(x) => x.add_temporary(s, m, c),
            Food::SoulCake(x) => x.add_temporary(s, m, c),
            Food::SoulPastry(x) => x.add_temporary(s, m, c),
            Food::SpicyChocolateCookie(x) => x.add_temporary(s, m, c),
            Food::SpicyHerbedChicken(x) => x.add_temporary(s, m, c),
            Food::SpicyMarinatedMushroom(x) => x.add_temporary(s, m, c),
            Food::SpicyPumpkinCookie(x) => x.add_temporary(s, m, c),
            Food::SpringRoll(x) => x.add_temporary(s, m, c),
            Food::SteakWithWinterberrySauce(x) => x.add_temporary(s, m, c),
            Food::SteamedRedDumpling(x) => x.add_temporary(s, m, c),
            Food::SuperHotLemongrassPoultrySoup(x) => x.add_temporary(s, m, c),
            Food::SuperHotSaffronScentedPoultrySoup(x) => x.add_temporary(s, m, c),
            Food::SweetAndSpicyBeans(x) => x.add_temporary(s, m, c),
            Food::SweetAndSpicyButternutSquashSoup(x) => x.add_temporary(s, m, c),
            Food::SweetBeanBun(x) => x.add_temporary(s, m, c),
            Food::SweetCurriedMussels(x) => x.add_temporary(s, m, c),
            Food::SwiftlyScrambledEggs(x) => x.add_temporary(s, m, c),
            Food::TapiocaPudding(x) => x.add_temporary(s, m, c),
            Food::TropicalFruitSalad(x) => x.add_temporary(s, m, c),
            Food::TropicalMousse(x) => x.add_temporary(s, m, c),
            Food::TropicalPeppermintCake(x) => x.add_temporary(s, m, c),
            Food::TruffleRavioli(x) => x.add_temporary(s, m, c),
            Food::TruffleRisotto(x) => x.add_temporary(s, m, c),
            Food::TruffleSautee(x) => x.add_temporary(s, m, c),
            Food::TruffleSteak(x) => x.add_temporary(s, m, c),
            Food::TruffleSteakDinner(x) => x.add_temporary(s, m, c),
            Food::WinterberryPie(x) => x.add_temporary(s, m, c),
            Food::WinterberrySeaweedSalad(x) => x.add_temporary(s, m, c),
            Food::WinterberrySorbet(x) => x.add_temporary(s, m, c),
            Food::ZestyTurnipSoup(x) => x.add_temporary(s, m, c),
        }
    }
}
impl From<NoFood> for Food {
    fn from(x: NoFood) -> Food { Food::NoFood(x) }
}
impl From<BeefRendang> for Food {
    fn from(x: BeefRendang) -> Food { Food::BeefRendang(x) }
}
impl From<BlackPepperCactusSalad> for Food {
    fn from(x: BlackPepperCactusSalad) -> Food { Food::BlackPepperCactusSalad(x) }
}
impl From<BlockOfTofu> for Food {
    fn from(x: BlockOfTofu) -> Food { Food::BlockOfTofu(x) }
}
impl From<CactusFruitSalad> for Food {
    fn from(x: CactusFruitSalad) -> Food { Food::CactusFruitSalad(x) }
}
impl From<CactusSoup> for Food {
    fn from(x: CactusSoup) -> Food { Food::CactusSoup(x) }
}
impl From<CandyCactusCornbread> for Food {
    fn from(x: CandyCactusCornbread) -> Food { Food::CandyCactusCornbread(x) }
}
impl From<CarrotSouffl> for Food {
    fn from(x: CarrotSouffl) -> Food { Food::CarrotSouffl(x) }
}
impl From<CheesyCassavaRoll> for Food {
    fn from(x: CheesyCassavaRoll) -> Food { Food::CheesyCassavaRoll(x) }
}
impl From<ChocolateOmnomberryCake> for Food {
    fn from(x: ChocolateOmnomberryCake) -> Food { Food::ChocolateOmnomberryCake(x) }
}
impl From<ChocolateOmnomberryCream> for Food {
    fn from(x: ChocolateOmnomberryCream) -> Food { Food::ChocolateOmnomberryCream(x) }
}
impl From<ChocolateTapiocaPudding> for Food {
    fn from(x: ChocolateTapiocaPudding) -> Food { Food::ChocolateTapiocaPudding(x) }
}
impl From<CupOfLotusFries> for Food {
    fn from(x: CupOfLotusFries) -> Food { Food::CupOfLotusFries(x) }
}
impl From<CurryButternutSquashSoup> for Food {
    fn from(x: CurryButternutSquashSoup) -> Food { Food::CurryButternutSquashSoup(x) }
}
impl From<CurryMusselSoup> for Food {
    fn from(x: CurryMusselSoup) -> Food { Food::CurryMusselSoup(x) }
}
impl From<CurryPumpkinSoup> for Food {
    fn from(x: CurryPumpkinSoup) -> Food { Food::CurryPumpkinSoup(x) }
}
impl From<DeliciousRiceBall> for Food {
    fn from(x: DeliciousRiceBall) -> Food { Food::DeliciousRiceBall(x) }
}
impl From<DragonfishCandy> for Food {
    fn from(x: DragonfishCandy) -> Food { Food::DragonfishCandy(x) }
}
impl From<DragonflyCupcake> for Food {
    fn from(x: DragonflyCupcake) -> Food { Food::DragonflyCupcake(x) }
}
impl From<DragonsBreathBun> for Food {
    fn from(x: DragonsBreathBun) -> Food { Food::DragonsBreathBun(x) }
}
impl From<DragonsRevelryStarcake> for Food {
    fn from(x: DragonsRevelryStarcake) -> Food { Food::DragonsRevelryStarcake(x) }
}
impl From<EggInACloud> for Food {
    fn from(x: EggInACloud) -> Food { Food::EggInACloud(x) }
}
impl From<ExperimentalRemnant> for Food {
    fn from(x: ExperimentalRemnant) -> Food { Food::ExperimentalRemnant(x) }
}
impl From<FancyPotatoAndLeekSoup> for Food {
    fn from(x: FancyPotatoAndLeekSoup) -> Food { Food::FancyPotatoAndLeekSoup(x) }
}
impl From<FancyTruffleBurger> for Food {
    fn from(x: FancyTruffleBurger) -> Food { Food::FancyTruffleBurger(x) }
}
impl From<FireFlankSteak> for Food {
    fn from(x: FireFlankSteak) -> Food { Food::FireFlankSteak(x) }
}
impl From<FireMeatChili> for Food {
    fn from(x: FireMeatChili) -> Food { Food::FireMeatChili(x) }
}
impl From<FireSalsa> for Food {
    fn from(x: FireSalsa) -> Food { Food::FireSalsa(x) }
}
impl From<FireVeggieChili> for Food {
    fn from(x: FireVeggieChili) -> Food { Food::FireVeggieChili(x) }
}
impl From<FishStew> for Food {
    fn from(x: FishStew) -> Food { Food::FishStew(x) }
}
impl From<FishyRiceBowl> for Food {
    fn from(x: FishyRiceBowl) -> Food { Food::FishyRiceBowl(x) }
}
impl From<Flatbread> for Food {
    fn from(x: Flatbread) -> Food { Food::Flatbread(x) }
}
impl From<FriedGoldenDumpling> for Food {
    fn from(x: FriedGoldenDumpling) -> Food { Food::FriedGoldenDumpling(x) }
}
impl From<FriedOysterSandwich> for Food {
    fn from(x: FriedOysterSandwich) -> Food { Food::FriedOysterSandwich(x) }
}
impl From<FriedOysters> for Food {
    fn from(x: FriedOysters) -> Food { Food::FriedOysters(x) }
}
impl From<FrostgorgeClams> for Food {
    fn from(x: FrostgorgeClams) -> Food { Food::FrostgorgeClams(x) }
}
impl From<FruitSaladWithMintGarnish> for Food {
    fn from(x: FruitSaladWithMintGarnish) -> Food { Food::FruitSaladWithMintGarnish(x) }
}
impl From<GarlicKaleSautee> for Food {
    fn from(x: GarlicKaleSautee) -> Food { Food::GarlicKaleSautee(x) }
}
impl From<GhostPepperPopper> for Food {
    fn from(x: GhostPepperPopper) -> Food { Food::GhostPepperPopper(x) }
}
impl From<HolographicSuperCake> for Food {
    fn from(x: HolographicSuperCake) -> Food { Food::HolographicSuperCake(x) }
}
impl From<IcyFishSnack> for Food {
    fn from(x: IcyFishSnack) -> Food { Food::IcyFishSnack(x) }
}
impl From<IndigoMushroomMilkshake> for Food {
    fn from(x: IndigoMushroomMilkshake) -> Food { Food::IndigoMushroomMilkshake(x) }
}
impl From<IslandPudding> for Food {
    fn from(x: IslandPudding) -> Food { Food::IslandPudding(x) }
}
impl From<JerkPoultry> for Food {
    fn from(x: JerkPoultry) -> Food { Food::JerkPoultry(x) }
}
impl From<JerkPoultryAndNopalFlatbreadSandwich> for Food {
    fn from(x: JerkPoultryAndNopalFlatbreadSandwich) -> Food { Food::JerkPoultryAndNopalFlatbreadSandwich(x) }
}
impl From<JerkPoultryFlatbreadSandwich> for Food {
    fn from(x: JerkPoultryFlatbreadSandwich) -> Food { Food::JerkPoultryFlatbreadSandwich(x) }
}
impl From<KimchiPancakes> for Food {
    fn from(x: KimchiPancakes) -> Food { Food::KimchiPancakes(x) }
}
impl From<KimchiTofuStew> for Food {
    fn from(x: KimchiTofuStew) -> Food { Food::KimchiTofuStew(x) }
}
impl From<KoiCake> for Food {
    fn from(x: KoiCake) -> Food { Food::KoiCake(x) }
}
impl From<KralkachocolateBar> for Food {
    fn from(x: KralkachocolateBar) -> Food { Food::KralkachocolateBar(x) }
}
impl From<LakeDoricMussels> for Food {
    fn from(x: LakeDoricMussels) -> Food { Food::LakeDoricMussels(x) }
}
impl From<LemongrassMusselPasta> for Food {
    fn from(x: LemongrassMusselPasta) -> Food { Food::LemongrassMusselPasta(x) }
}
impl From<LemongrassPoultry> for Food {
    fn from(x: LemongrassPoultry) -> Food { Food::LemongrassPoultry(x) }
}
impl From<LemongrassPoultrySoup> for Food {
    fn from(x: LemongrassPoultrySoup) -> Food { Food::LemongrassPoultrySoup(x) }
}
impl From<LotusStirfry> for Food {
    fn from(x: LotusStirfry) -> Food { Food::LotusStirfry(x) }
}
impl From<MangoPie> for Food {
    fn from(x: MangoPie) -> Food { Food::MangoPie(x) }
}
impl From<MarjorysExperimentalChili> for Food {
    fn from(x: MarjorysExperimentalChili) -> Food { Food::MarjorysExperimentalChili(x) }
}
impl From<MashedPurplePotatoes> for Food {
    fn from(x: MashedPurplePotatoes) -> Food { Food::MashedPurplePotatoes(x) }
}
impl From<MeatyAsparagusSkewer> for Food {
    fn from(x: MeatyAsparagusSkewer) -> Food { Food::MeatyAsparagusSkewer(x) }
}
impl From<MeatyRiceBowl> for Food {
    fn from(x: MeatyRiceBowl) -> Food { Food::MeatyRiceBowl(x) }
}
impl From<MushroomLoaf> for Food {
    fn from(x: MushroomLoaf) -> Food { Food::MushroomLoaf(x) }
}
impl From<MushroomsYakkington> for Food {
    fn from(x: MushroomsYakkington) -> Food { Food::MushroomsYakkington(x) }
}
impl From<MusselSoup> for Food {
    fn from(x: MusselSoup) -> Food { Food::MusselSoup(x) }
}
impl From<MusselsGnashblade> for Food {
    fn from(x: MusselsGnashblade) -> Food { Food::MusselsGnashblade(x) }
}
impl From<NopalitosSaut> for Food {
    fn from(x: NopalitosSaut) -> Food { Food::NopalitosSaut(x) }
}
impl From<OmnomberryBar> for Food {
    fn from(x: OmnomberryBar) -> Food { Food::OmnomberryBar(x) }
}
impl From<OmnomberryBread> for Food {
    fn from(x: OmnomberryBread) -> Food { Food::OmnomberryBread(x) }
}
impl From<OmnomberryCompote> for Food {
    fn from(x: OmnomberryCompote) -> Food { Food::OmnomberryCompote(x) }
}
impl From<OmnomberryCookie> for Food {
    fn from(x: OmnomberryCookie) -> Food { Food::OmnomberryCookie(x) }
}
impl From<OmnomberryGhost> for Food {
    fn from(x: OmnomberryGhost) -> Food { Food::OmnomberryGhost(x) }
}
impl From<OmnomberryPie> for Food {
    fn from(x: OmnomberryPie) -> Food { Food::OmnomberryPie(x) }
}
impl From<OmnomberryTart> for Food {
    fn from(x: OmnomberryTart) -> Food { Food::OmnomberryTart(x) }
}
impl From<OrrianSteakFrittes> for Food {
    fn from(x: OrrianSteakFrittes) -> Food { Food::OrrianSteakFrittes(x) }
}
impl From<OrrianTruffleAndMeatStew> for Food {
    fn from(x: OrrianTruffleAndMeatStew) -> Food { Food::OrrianTruffleAndMeatStew(x) }
}
impl From<OrrianTruffleSoup> for Food {
    fn from(x: OrrianTruffleSoup) -> Food { Food::OrrianTruffleSoup(x) }
}
impl From<OystersGnashblade> for Food {
    fn from(x: OystersGnashblade) -> Food { Food::OystersGnashblade(x) }
}
impl From<OystersWithCocktailSauce> for Food {
    fn from(x: OystersWithCocktailSauce) -> Food { Food::OystersWithCocktailSauce(x) }
}
impl From<OystersWithPestoSauce> for Food {
    fn from(x: OystersWithPestoSauce) -> Food { Food::OystersWithPestoSauce(x) }
}
impl From<OystersWithSpicySauce> for Food {
    fn from(x: OystersWithSpicySauce) -> Food { Food::OystersWithSpicySauce(x) }
}
impl From<OystersWithZestySauce> for Food {
    fn from(x: OystersWithZestySauce) -> Food { Food::OystersWithZestySauce(x) }
}
impl From<PassionFruitTapiocaPudding> for Food {
    fn from(x: PassionFruitTapiocaPudding) -> Food { Food::PassionFruitTapiocaPudding(x) }
}
impl From<PeppermintOmnomberryBar> for Food {
    fn from(x: PeppermintOmnomberryBar) -> Food { Food::PeppermintOmnomberryBar(x) }
}
impl From<PoultrySatay> for Food {
    fn from(x: PoultrySatay) -> Food { Food::PoultrySatay(x) }
}
impl From<PricklyPearPie> for Food {
    fn from(x: PricklyPearPie) -> Food { Food::PricklyPearPie(x) }
}
impl From<PricklyPearSorbet> for Food {
    fn from(x: PricklyPearSorbet) -> Food { Food::PricklyPearSorbet(x) }
}
impl From<PricklyPearStuffedNopal> for Food {
    fn from(x: PricklyPearStuffedNopal) -> Food { Food::PricklyPearStuffedNopal(x) }
}
impl From<PricklyPearTapiocaPudding> for Food {
    fn from(x: PricklyPearTapiocaPudding) -> Food { Food::PricklyPearTapiocaPudding(x) }
}
impl From<QuicheOfDarkness> for Food {
    fn from(x: QuicheOfDarkness) -> Food { Food::QuicheOfDarkness(x) }
}
impl From<RareVeggiePizza> for Food {
    fn from(x: RareVeggiePizza) -> Food { Food::RareVeggiePizza(x) }
}
impl From<RedLentilSaobosa> for Food {
    fn from(x: RedLentilSaobosa) -> Food { Food::RedLentilSaobosa(x) }
}
impl From<RedfishSushi> for Food {
    fn from(x: RedfishSushi) -> Food { Food::RedfishSushi(x) }
}
impl From<RefugeesBeetSoup> for Food {
    fn from(x: RefugeesBeetSoup) -> Food { Food::RefugeesBeetSoup(x) }
}
impl From<RoastedCactus> for Food {
    fn from(x: RoastedCactus) -> Food { Food::RoastedCactus(x) }
}
impl From<RoastedLotusRoot> for Food {
    fn from(x: RoastedLotusRoot) -> Food { Food::RoastedLotusRoot(x) }
}
impl From<SaffronBread> for Food {
    fn from(x: SaffronBread) -> Food { Food::SaffronBread(x) }
}
impl From<SaffronMangoIceCream> for Food {
    fn from(x: SaffronMangoIceCream) -> Food { Food::SaffronMangoIceCream(x) }
}
impl From<SaffronMussels> for Food {
    fn from(x: SaffronMussels) -> Food { Food::SaffronMussels(x) }
}
impl From<SaffronStuffedMushroom> for Food {
    fn from(x: SaffronStuffedMushroom) -> Food { Food::SaffronStuffedMushroom(x) }
}
impl From<SaffronscentedPoultrySoup> for Food {
    fn from(x: SaffronscentedPoultrySoup) -> Food { Food::SaffronscentedPoultrySoup(x) }
}
impl From<SaintBones> for Food {
    fn from(x: SaintBones) -> Food { Food::SaintBones(x) }
}
impl From<ScoopOfMintberrySwirlIceCream> for Food {
    fn from(x: ScoopOfMintberrySwirlIceCream) -> Food { Food::ScoopOfMintberrySwirlIceCream(x) }
}
impl From<SeaweedSalad> for Food {
    fn from(x: SeaweedSalad) -> Food { Food::SeaweedSalad(x) }
}
impl From<SliceOfAllspiceCake> for Food {
    fn from(x: SliceOfAllspiceCake) -> Food { Food::SliceOfAllspiceCake(x) }
}
impl From<SliceOfAllspiceCakeWithIceCream> for Food {
    fn from(x: SliceOfAllspiceCakeWithIceCream) -> Food { Food::SliceOfAllspiceCakeWithIceCream(x) }
}
impl From<SliceOfCandiedDragonRoll> for Food {
    fn from(x: SliceOfCandiedDragonRoll) -> Food { Food::SliceOfCandiedDragonRoll(x) }
}
impl From<SoulCake> for Food {
    fn from(x: SoulCake) -> Food { Food::SoulCake(x) }
}
impl From<SoulPastry> for Food {
    fn from(x: SoulPastry) -> Food { Food::SoulPastry(x) }
}
impl From<SpicyChocolateCookie> for Food {
    fn from(x: SpicyChocolateCookie) -> Food { Food::SpicyChocolateCookie(x) }
}
impl From<SpicyHerbedChicken> for Food {
    fn from(x: SpicyHerbedChicken) -> Food { Food::SpicyHerbedChicken(x) }
}
impl From<SpicyMarinatedMushroom> for Food {
    fn from(x: SpicyMarinatedMushroom) -> Food { Food::SpicyMarinatedMushroom(x) }
}
impl From<SpicyPumpkinCookie> for Food {
    fn from(x: SpicyPumpkinCookie) -> Food { Food::SpicyPumpkinCookie(x) }
}
impl From<SpringRoll> for Food {
    fn from(x: SpringRoll) -> Food { Food::SpringRoll(x) }
}
impl From<SteakWithWinterberrySauce> for Food {
    fn from(x: SteakWithWinterberrySauce) -> Food { Food::SteakWithWinterberrySauce(x) }
}
impl From<SteamedRedDumpling> for Food {
    fn from(x: SteamedRedDumpling) -> Food { Food::SteamedRedDumpling(x) }
}
impl From<SuperHotLemongrassPoultrySoup> for Food {
    fn from(x: SuperHotLemongrassPoultrySoup) -> Food { Food::SuperHotLemongrassPoultrySoup(x) }
}
impl From<SuperHotSaffronScentedPoultrySoup> for Food {
    fn from(x: SuperHotSaffronScentedPoultrySoup) -> Food { Food::SuperHotSaffronScentedPoultrySoup(x) }
}
impl From<SweetAndSpicyBeans> for Food {
    fn from(x: SweetAndSpicyBeans) -> Food { Food::SweetAndSpicyBeans(x) }
}
impl From<SweetAndSpicyButternutSquashSoup> for Food {
    fn from(x: SweetAndSpicyButternutSquashSoup) -> Food { Food::SweetAndSpicyButternutSquashSoup(x) }
}
impl From<SweetBeanBun> for Food {
    fn from(x: SweetBeanBun) -> Food { Food::SweetBeanBun(x) }
}
impl From<SweetCurriedMussels> for Food {
    fn from(x: SweetCurriedMussels) -> Food { Food::SweetCurriedMussels(x) }
}
impl From<SwiftlyScrambledEggs> for Food {
    fn from(x: SwiftlyScrambledEggs) -> Food { Food::SwiftlyScrambledEggs(x) }
}
impl From<TapiocaPudding> for Food {
    fn from(x: TapiocaPudding) -> Food { Food::TapiocaPudding(x) }
}
impl From<TropicalFruitSalad> for Food {
    fn from(x: TropicalFruitSalad) -> Food { Food::TropicalFruitSalad(x) }
}
impl From<TropicalMousse> for Food {
    fn from(x: TropicalMousse) -> Food { Food::TropicalMousse(x) }
}
impl From<TropicalPeppermintCake> for Food {
    fn from(x: TropicalPeppermintCake) -> Food { Food::TropicalPeppermintCake(x) }
}
impl From<TruffleRavioli> for Food {
    fn from(x: TruffleRavioli) -> Food { Food::TruffleRavioli(x) }
}
impl From<TruffleRisotto> for Food {
    fn from(x: TruffleRisotto) -> Food { Food::TruffleRisotto(x) }
}
impl From<TruffleSautee> for Food {
    fn from(x: TruffleSautee) -> Food { Food::TruffleSautee(x) }
}
impl From<TruffleSteak> for Food {
    fn from(x: TruffleSteak) -> Food { Food::TruffleSteak(x) }
}
impl From<TruffleSteakDinner> for Food {
    fn from(x: TruffleSteakDinner) -> Food { Food::TruffleSteakDinner(x) }
}
impl From<WinterberryPie> for Food {
    fn from(x: WinterberryPie) -> Food { Food::WinterberryPie(x) }
}
impl From<WinterberrySeaweedSalad> for Food {
    fn from(x: WinterberrySeaweedSalad) -> Food { Food::WinterberrySeaweedSalad(x) }
}
impl From<WinterberrySorbet> for Food {
    fn from(x: WinterberrySorbet) -> Food { Food::WinterberrySorbet(x) }
}
impl From<ZestyTurnipSoup> for Food {
    fn from(x: ZestyTurnipSoup) -> Food { Food::ZestyTurnipSoup(x) }
}
impl Vary for Food {
    fn num_fields(&self) -> usize { 1 }
    fn num_field_values(&self, _field: usize) -> u16 { 134 }
    fn get_field(&self, _field: usize) -> u16 {
        self.index() as u16
    }
    fn set_field(&mut self, _field: usize, value: u16) {
        *self = Food::from_index(value as usize);
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
pub enum KnownFood {
    NoFood(NoFood),
    BeefRendang(BeefRendang),
    BlackPepperCactusSalad(BlackPepperCactusSalad),
    BlockOfTofu(BlockOfTofu),
    CactusFruitSalad(CactusFruitSalad),
    CandyCactusCornbread(CandyCactusCornbread),
    CarrotSouffl(CarrotSouffl),
    CheesyCassavaRoll(CheesyCassavaRoll),
    ChocolateOmnomberryCake(ChocolateOmnomberryCake),
    ChocolateOmnomberryCream(ChocolateOmnomberryCream),
    ChocolateTapiocaPudding(ChocolateTapiocaPudding),
    CupOfLotusFries(CupOfLotusFries),
    CurryButternutSquashSoup(CurryButternutSquashSoup),
    CurryPumpkinSoup(CurryPumpkinSoup),
    DeliciousRiceBall(DeliciousRiceBall),
    DragonfishCandy(DragonfishCandy),
    DragonsRevelryStarcake(DragonsRevelryStarcake),
    FancyPotatoAndLeekSoup(FancyPotatoAndLeekSoup),
    FancyTruffleBurger(FancyTruffleBurger),
    FireFlankSteak(FireFlankSteak),
    FireMeatChili(FireMeatChili),
    FireVeggieChili(FireVeggieChili),
    FishStew(FishStew),
    Flatbread(Flatbread),
    FrostgorgeClams(FrostgorgeClams),
    FruitSaladWithMintGarnish(FruitSaladWithMintGarnish),
    GarlicKaleSautee(GarlicKaleSautee),
    IcyFishSnack(IcyFishSnack),
    JerkPoultry(JerkPoultry),
    KralkachocolateBar(KralkachocolateBar),
    LakeDoricMussels(LakeDoricMussels),
    MarjorysExperimentalChili(MarjorysExperimentalChili),
    MushroomLoaf(MushroomLoaf),
    MusselsGnashblade(MusselsGnashblade),
    OmnomberryBread(OmnomberryBread),
    OmnomberryCookie(OmnomberryCookie),
    OrrianSteakFrittes(OrrianSteakFrittes),
    OrrianTruffleSoup(OrrianTruffleSoup),
    OystersGnashblade(OystersGnashblade),
    PassionFruitTapiocaPudding(PassionFruitTapiocaPudding),
    PricklyPearSorbet(PricklyPearSorbet),
    PricklyPearStuffedNopal(PricklyPearStuffedNopal),
    PricklyPearTapiocaPudding(PricklyPearTapiocaPudding),
    RefugeesBeetSoup(RefugeesBeetSoup),
    SaintBones(SaintBones),
    SoulCake(SoulCake),
    SoulPastry(SoulPastry),
    SpicyChocolateCookie(SpicyChocolateCookie),
    SpicyHerbedChicken(SpicyHerbedChicken),
    SpicyMarinatedMushroom(SpicyMarinatedMushroom),
    SteakWithWinterberrySauce(SteakWithWinterberrySauce),
    SweetAndSpicyButternutSquashSoup(SweetAndSpicyButternutSquashSoup),
    TropicalFruitSalad(TropicalFruitSalad),
    TropicalMousse(TropicalMousse),
    TruffleRisotto(TruffleRisotto),
}
impl Default for KnownFood {
    fn default() -> KnownFood { KnownFood::NoFood(NoFood) }
}
impl KnownFood {
    pub const COUNT: usize = 55;
    pub fn index(self) -> usize {
        match self {
            KnownFood::NoFood(NoFood) => 0,
            KnownFood::BeefRendang(BeefRendang) => 1,
            KnownFood::BlackPepperCactusSalad(BlackPepperCactusSalad) => 2,
            KnownFood::BlockOfTofu(BlockOfTofu) => 3,
            KnownFood::CactusFruitSalad(CactusFruitSalad) => 4,
            KnownFood::CandyCactusCornbread(CandyCactusCornbread) => 5,
            KnownFood::CarrotSouffl(CarrotSouffl) => 6,
            KnownFood::CheesyCassavaRoll(CheesyCassavaRoll) => 7,
            KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake) => 8,
            KnownFood::ChocolateOmnomberryCream(ChocolateOmnomberryCream) => 9,
            KnownFood::ChocolateTapiocaPudding(ChocolateTapiocaPudding) => 10,
            KnownFood::CupOfLotusFries(CupOfLotusFries) => 11,
            KnownFood::CurryButternutSquashSoup(CurryButternutSquashSoup) => 12,
            KnownFood::CurryPumpkinSoup(CurryPumpkinSoup) => 13,
            KnownFood::DeliciousRiceBall(DeliciousRiceBall) => 14,
            KnownFood::DragonfishCandy(DragonfishCandy) => 15,
            KnownFood::DragonsRevelryStarcake(DragonsRevelryStarcake) => 16,
            KnownFood::FancyPotatoAndLeekSoup(FancyPotatoAndLeekSoup) => 17,
            KnownFood::FancyTruffleBurger(FancyTruffleBurger) => 18,
            KnownFood::FireFlankSteak(FireFlankSteak) => 19,
            KnownFood::FireMeatChili(FireMeatChili) => 20,
            KnownFood::FireVeggieChili(FireVeggieChili) => 21,
            KnownFood::FishStew(FishStew) => 22,
            KnownFood::Flatbread(Flatbread) => 23,
            KnownFood::FrostgorgeClams(FrostgorgeClams) => 24,
            KnownFood::FruitSaladWithMintGarnish(FruitSaladWithMintGarnish) => 25,
            KnownFood::GarlicKaleSautee(GarlicKaleSautee) => 26,
            KnownFood::IcyFishSnack(IcyFishSnack) => 27,
            KnownFood::JerkPoultry(JerkPoultry) => 28,
            KnownFood::KralkachocolateBar(KralkachocolateBar) => 29,
            KnownFood::LakeDoricMussels(LakeDoricMussels) => 30,
            KnownFood::MarjorysExperimentalChili(MarjorysExperimentalChili) => 31,
            KnownFood::MushroomLoaf(MushroomLoaf) => 32,
            KnownFood::MusselsGnashblade(MusselsGnashblade) => 33,
            KnownFood::OmnomberryBread(OmnomberryBread) => 34,
            KnownFood::OmnomberryCookie(OmnomberryCookie) => 35,
            KnownFood::OrrianSteakFrittes(OrrianSteakFrittes) => 36,
            KnownFood::OrrianTruffleSoup(OrrianTruffleSoup) => 37,
            KnownFood::OystersGnashblade(OystersGnashblade) => 38,
            KnownFood::PassionFruitTapiocaPudding(PassionFruitTapiocaPudding) => 39,
            KnownFood::PricklyPearSorbet(PricklyPearSorbet) => 40,
            KnownFood::PricklyPearStuffedNopal(PricklyPearStuffedNopal) => 41,
            KnownFood::PricklyPearTapiocaPudding(PricklyPearTapiocaPudding) => 42,
            KnownFood::RefugeesBeetSoup(RefugeesBeetSoup) => 43,
            KnownFood::SaintBones(SaintBones) => 44,
            KnownFood::SoulCake(SoulCake) => 45,
            KnownFood::SoulPastry(SoulPastry) => 46,
            KnownFood::SpicyChocolateCookie(SpicyChocolateCookie) => 47,
            KnownFood::SpicyHerbedChicken(SpicyHerbedChicken) => 48,
            KnownFood::SpicyMarinatedMushroom(SpicyMarinatedMushroom) => 49,
            KnownFood::SteakWithWinterberrySauce(SteakWithWinterberrySauce) => 50,
            KnownFood::SweetAndSpicyButternutSquashSoup(SweetAndSpicyButternutSquashSoup) => 51,
            KnownFood::TropicalFruitSalad(TropicalFruitSalad) => 52,
            KnownFood::TropicalMousse(TropicalMousse) => 53,
            KnownFood::TruffleRisotto(TruffleRisotto) => 54,
        }
    }
    pub fn from_index(i: usize) -> KnownFood {
        match i {
            0 => KnownFood::NoFood(NoFood),
            1 => KnownFood::BeefRendang(BeefRendang),
            2 => KnownFood::BlackPepperCactusSalad(BlackPepperCactusSalad),
            3 => KnownFood::BlockOfTofu(BlockOfTofu),
            4 => KnownFood::CactusFruitSalad(CactusFruitSalad),
            5 => KnownFood::CandyCactusCornbread(CandyCactusCornbread),
            6 => KnownFood::CarrotSouffl(CarrotSouffl),
            7 => KnownFood::CheesyCassavaRoll(CheesyCassavaRoll),
            8 => KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake),
            9 => KnownFood::ChocolateOmnomberryCream(ChocolateOmnomberryCream),
            10 => KnownFood::ChocolateTapiocaPudding(ChocolateTapiocaPudding),
            11 => KnownFood::CupOfLotusFries(CupOfLotusFries),
            12 => KnownFood::CurryButternutSquashSoup(CurryButternutSquashSoup),
            13 => KnownFood::CurryPumpkinSoup(CurryPumpkinSoup),
            14 => KnownFood::DeliciousRiceBall(DeliciousRiceBall),
            15 => KnownFood::DragonfishCandy(DragonfishCandy),
            16 => KnownFood::DragonsRevelryStarcake(DragonsRevelryStarcake),
            17 => KnownFood::FancyPotatoAndLeekSoup(FancyPotatoAndLeekSoup),
            18 => KnownFood::FancyTruffleBurger(FancyTruffleBurger),
            19 => KnownFood::FireFlankSteak(FireFlankSteak),
            20 => KnownFood::FireMeatChili(FireMeatChili),
            21 => KnownFood::FireVeggieChili(FireVeggieChili),
            22 => KnownFood::FishStew(FishStew),
            23 => KnownFood::Flatbread(Flatbread),
            24 => KnownFood::FrostgorgeClams(FrostgorgeClams),
            25 => KnownFood::FruitSaladWithMintGarnish(FruitSaladWithMintGarnish),
            26 => KnownFood::GarlicKaleSautee(GarlicKaleSautee),
            27 => KnownFood::IcyFishSnack(IcyFishSnack),
            28 => KnownFood::JerkPoultry(JerkPoultry),
            29 => KnownFood::KralkachocolateBar(KralkachocolateBar),
            30 => KnownFood::LakeDoricMussels(LakeDoricMussels),
            31 => KnownFood::MarjorysExperimentalChili(MarjorysExperimentalChili),
            32 => KnownFood::MushroomLoaf(MushroomLoaf),
            33 => KnownFood::MusselsGnashblade(MusselsGnashblade),
            34 => KnownFood::OmnomberryBread(OmnomberryBread),
            35 => KnownFood::OmnomberryCookie(OmnomberryCookie),
            36 => KnownFood::OrrianSteakFrittes(OrrianSteakFrittes),
            37 => KnownFood::OrrianTruffleSoup(OrrianTruffleSoup),
            38 => KnownFood::OystersGnashblade(OystersGnashblade),
            39 => KnownFood::PassionFruitTapiocaPudding(PassionFruitTapiocaPudding),
            40 => KnownFood::PricklyPearSorbet(PricklyPearSorbet),
            41 => KnownFood::PricklyPearStuffedNopal(PricklyPearStuffedNopal),
            42 => KnownFood::PricklyPearTapiocaPudding(PricklyPearTapiocaPudding),
            43 => KnownFood::RefugeesBeetSoup(RefugeesBeetSoup),
            44 => KnownFood::SaintBones(SaintBones),
            45 => KnownFood::SoulCake(SoulCake),
            46 => KnownFood::SoulPastry(SoulPastry),
            47 => KnownFood::SpicyChocolateCookie(SpicyChocolateCookie),
            48 => KnownFood::SpicyHerbedChicken(SpicyHerbedChicken),
            49 => KnownFood::SpicyMarinatedMushroom(SpicyMarinatedMushroom),
            50 => KnownFood::SteakWithWinterberrySauce(SteakWithWinterberrySauce),
            51 => KnownFood::SweetAndSpicyButternutSquashSoup(SweetAndSpicyButternutSquashSoup),
            52 => KnownFood::TropicalFruitSalad(TropicalFruitSalad),
            53 => KnownFood::TropicalMousse(TropicalMousse),
            54 => KnownFood::TruffleRisotto(TruffleRisotto),
            _ => panic!("index {} out of range for KnownFood", i),
        }
    }
    pub fn iter() -> impl Iterator<Item = KnownFood> {
        (0 .. KnownFood::COUNT).map(KnownFood::from_index)
    }
    pub fn display_name(self) -> &'static str {
        match self {
            KnownFood::NoFood(x) => x.display_name(),
            KnownFood::BeefRendang(x) => x.display_name(),
            KnownFood::BlackPepperCactusSalad(x) => x.display_name(),
            KnownFood::BlockOfTofu(x) => x.display_name(),
            KnownFood::CactusFruitSalad(x) => x.display_name(),
            KnownFood::CandyCactusCornbread(x) => x.display_name(),
            KnownFood::CarrotSouffl(x) => x.display_name(),
            KnownFood::CheesyCassavaRoll(x) => x.display_name(),
            KnownFood::ChocolateOmnomberryCake(x) => x.display_name(),
            KnownFood::ChocolateOmnomberryCream(x) => x.display_name(),
            KnownFood::ChocolateTapiocaPudding(x) => x.display_name(),
            KnownFood::CupOfLotusFries(x) => x.display_name(),
            KnownFood::CurryButternutSquashSoup(x) => x.display_name(),
            KnownFood::CurryPumpkinSoup(x) => x.display_name(),
            KnownFood::DeliciousRiceBall(x) => x.display_name(),
            KnownFood::DragonfishCandy(x) => x.display_name(),
            KnownFood::DragonsRevelryStarcake(x) => x.display_name(),
            KnownFood::FancyPotatoAndLeekSoup(x) => x.display_name(),
            KnownFood::FancyTruffleBurger(x) => x.display_name(),
            KnownFood::FireFlankSteak(x) => x.display_name(),
            KnownFood::FireMeatChili(x) => x.display_name(),
            KnownFood::FireVeggieChili(x) => x.display_name(),
            KnownFood::FishStew(x) => x.display_name(),
            KnownFood::Flatbread(x) => x.display_name(),
            KnownFood::FrostgorgeClams(x) => x.display_name(),
            KnownFood::FruitSaladWithMintGarnish(x) => x.display_name(),
            KnownFood::GarlicKaleSautee(x) => x.display_name(),
            KnownFood::IcyFishSnack(x) => x.display_name(),
            KnownFood::JerkPoultry(x) => x.display_name(),
            KnownFood::KralkachocolateBar(x) => x.display_name(),
            KnownFood::LakeDoricMussels(x) => x.display_name(),
            KnownFood::MarjorysExperimentalChili(x) => x.display_name(),
            KnownFood::MushroomLoaf(x) => x.display_name(),
            KnownFood::MusselsGnashblade(x) => x.display_name(),
            KnownFood::OmnomberryBread(x) => x.display_name(),
            KnownFood::OmnomberryCookie(x) => x.display_name(),
            KnownFood::OrrianSteakFrittes(x) => x.display_name(),
            KnownFood::OrrianTruffleSoup(x) => x.display_name(),
            KnownFood::OystersGnashblade(x) => x.display_name(),
            KnownFood::PassionFruitTapiocaPudding(x) => x.display_name(),
            KnownFood::PricklyPearSorbet(x) => x.display_name(),
            KnownFood::PricklyPearStuffedNopal(x) => x.display_name(),
            KnownFood::PricklyPearTapiocaPudding(x) => x.display_name(),
            KnownFood::RefugeesBeetSoup(x) => x.display_name(),
            KnownFood::SaintBones(x) => x.display_name(),
            KnownFood::SoulCake(x) => x.display_name(),
            KnownFood::SoulPastry(x) => x.display_name(),
            KnownFood::SpicyChocolateCookie(x) => x.display_name(),
            KnownFood::SpicyHerbedChicken(x) => x.display_name(),
            KnownFood::SpicyMarinatedMushroom(x) => x.display_name(),
            KnownFood::SteakWithWinterberrySauce(x) => x.display_name(),
            KnownFood::SweetAndSpicyButternutSquashSoup(x) => x.display_name(),
            KnownFood::TropicalFruitSalad(x) => x.display_name(),
            KnownFood::TropicalMousse(x) => x.display_name(),
            KnownFood::TruffleRisotto(x) => x.display_name(),
        }
    }
}
impl Effect for KnownFood {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            KnownFood::NoFood(x) => x.add_permanent(s, m),
            KnownFood::BeefRendang(x) => x.add_permanent(s, m),
            KnownFood::BlackPepperCactusSalad(x) => x.add_permanent(s, m),
            KnownFood::BlockOfTofu(x) => x.add_permanent(s, m),
            KnownFood::CactusFruitSalad(x) => x.add_permanent(s, m),
            KnownFood::CandyCactusCornbread(x) => x.add_permanent(s, m),
            KnownFood::CarrotSouffl(x) => x.add_permanent(s, m),
            KnownFood::CheesyCassavaRoll(x) => x.add_permanent(s, m),
            KnownFood::ChocolateOmnomberryCake(x) => x.add_permanent(s, m),
            KnownFood::ChocolateOmnomberryCream(x) => x.add_permanent(s, m),
            KnownFood::ChocolateTapiocaPudding(x) => x.add_permanent(s, m),
            KnownFood::CupOfLotusFries(x) => x.add_permanent(s, m),
            KnownFood::CurryButternutSquashSoup(x) => x.add_permanent(s, m),
            KnownFood::CurryPumpkinSoup(x) => x.add_permanent(s, m),
            KnownFood::DeliciousRiceBall(x) => x.add_permanent(s, m),
            KnownFood::DragonfishCandy(x) => x.add_permanent(s, m),
            KnownFood::DragonsRevelryStarcake(x) => x.add_permanent(s, m),
            KnownFood::FancyPotatoAndLeekSoup(x) => x.add_permanent(s, m),
            KnownFood::FancyTruffleBurger(x) => x.add_permanent(s, m),
            KnownFood::FireFlankSteak(x) => x.add_permanent(s, m),
            KnownFood::FireMeatChili(x) => x.add_permanent(s, m),
            KnownFood::FireVeggieChili(x) => x.add_permanent(s, m),
            KnownFood::FishStew(x) => x.add_permanent(s, m),
            KnownFood::Flatbread(x) => x.add_permanent(s, m),
            KnownFood::FrostgorgeClams(x) => x.add_permanent(s, m),
            KnownFood::FruitSaladWithMintGarnish(x) => x.add_permanent(s, m),
            KnownFood::GarlicKaleSautee(x) => x.add_permanent(s, m),
            KnownFood::IcyFishSnack(x) => x.add_permanent(s, m),
            KnownFood::JerkPoultry(x) => x.add_permanent(s, m),
            KnownFood::KralkachocolateBar(x) => x.add_permanent(s, m),
            KnownFood::LakeDoricMussels(x) => x.add_permanent(s, m),
            KnownFood::MarjorysExperimentalChili(x) => x.add_permanent(s, m),
            KnownFood::MushroomLoaf(x) => x.add_permanent(s, m),
            KnownFood::MusselsGnashblade(x) => x.add_permanent(s, m),
            KnownFood::OmnomberryBread(x) => x.add_permanent(s, m),
            KnownFood::OmnomberryCookie(x) => x.add_permanent(s, m),
            KnownFood::OrrianSteakFrittes(x) => x.add_permanent(s, m),
            KnownFood::OrrianTruffleSoup(x) => x.add_permanent(s, m),
            KnownFood::OystersGnashblade(x) => x.add_permanent(s, m),
            KnownFood::PassionFruitTapiocaPudding(x) => x.add_permanent(s, m),
            KnownFood::PricklyPearSorbet(x) => x.add_permanent(s, m),
            KnownFood::PricklyPearStuffedNopal(x) => x.add_permanent(s, m),
            KnownFood::PricklyPearTapiocaPudding(x) => x.add_permanent(s, m),
            KnownFood::RefugeesBeetSoup(x) => x.add_permanent(s, m),
            KnownFood::SaintBones(x) => x.add_permanent(s, m),
            KnownFood::SoulCake(x) => x.add_permanent(s, m),
            KnownFood::SoulPastry(x) => x.add_permanent(s, m),
            KnownFood::SpicyChocolateCookie(x) => x.add_permanent(s, m),
            KnownFood::SpicyHerbedChicken(x) => x.add_permanent(s, m),
            KnownFood::SpicyMarinatedMushroom(x) => x.add_permanent(s, m),
            KnownFood::SteakWithWinterberrySauce(x) => x.add_permanent(s, m),
            KnownFood::SweetAndSpicyButternutSquashSoup(x) => x.add_permanent(s, m),
            KnownFood::TropicalFruitSalad(x) => x.add_permanent(s, m),
            KnownFood::TropicalMousse(x) => x.add_permanent(s, m),
            KnownFood::TruffleRisotto(x) => x.add_permanent(s, m),
        }
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            KnownFood::NoFood(x) => x.distribute(s, m),
            KnownFood::BeefRendang(x) => x.distribute(s, m),
            KnownFood::BlackPepperCactusSalad(x) => x.distribute(s, m),
            KnownFood::BlockOfTofu(x) => x.distribute(s, m),
            KnownFood::CactusFruitSalad(x) => x.distribute(s, m),
            KnownFood::CandyCactusCornbread(x) => x.distribute(s, m),
            KnownFood::CarrotSouffl(x) => x.distribute(s, m),
            KnownFood::CheesyCassavaRoll(x) => x.distribute(s, m),
            KnownFood::ChocolateOmnomberryCake(x) => x.distribute(s, m),
            KnownFood::ChocolateOmnomberryCream(x) => x.distribute(s, m),
            KnownFood::ChocolateTapiocaPudding(x) => x.distribute(s, m),
            KnownFood::CupOfLotusFries(x) => x.distribute(s, m),
            KnownFood::CurryButternutSquashSoup(x) => x.distribute(s, m),
            KnownFood::CurryPumpkinSoup(x) => x.distribute(s, m),
            KnownFood::DeliciousRiceBall(x) => x.distribute(s, m),
            KnownFood::DragonfishCandy(x) => x.distribute(s, m),
            KnownFood::DragonsRevelryStarcake(x) => x.distribute(s, m),
            KnownFood::FancyPotatoAndLeekSoup(x) => x.distribute(s, m),
            KnownFood::FancyTruffleBurger(x) => x.distribute(s, m),
            KnownFood::FireFlankSteak(x) => x.distribute(s, m),
            KnownFood::FireMeatChili(x) => x.distribute(s, m),
            KnownFood::FireVeggieChili(x) => x.distribute(s, m),
            KnownFood::FishStew(x) => x.distribute(s, m),
            KnownFood::Flatbread(x) => x.distribute(s, m),
            KnownFood::FrostgorgeClams(x) => x.distribute(s, m),
            KnownFood::FruitSaladWithMintGarnish(x) => x.distribute(s, m),
            KnownFood::GarlicKaleSautee(x) => x.distribute(s, m),
            KnownFood::IcyFishSnack(x) => x.distribute(s, m),
            KnownFood::JerkPoultry(x) => x.distribute(s, m),
            KnownFood::KralkachocolateBar(x) => x.distribute(s, m),
            KnownFood::LakeDoricMussels(x) => x.distribute(s, m),
            KnownFood::MarjorysExperimentalChili(x) => x.distribute(s, m),
            KnownFood::MushroomLoaf(x) => x.distribute(s, m),
            KnownFood::MusselsGnashblade(x) => x.distribute(s, m),
            KnownFood::OmnomberryBread(x) => x.distribute(s, m),
            KnownFood::OmnomberryCookie(x) => x.distribute(s, m),
            KnownFood::OrrianSteakFrittes(x) => x.distribute(s, m),
            KnownFood::OrrianTruffleSoup(x) => x.distribute(s, m),
            KnownFood::OystersGnashblade(x) => x.distribute(s, m),
            KnownFood::PassionFruitTapiocaPudding(x) => x.distribute(s, m),
            KnownFood::PricklyPearSorbet(x) => x.distribute(s, m),
            KnownFood::PricklyPearStuffedNopal(x) => x.distribute(s, m),
            KnownFood::PricklyPearTapiocaPudding(x) => x.distribute(s, m),
            KnownFood::RefugeesBeetSoup(x) => x.distribute(s, m),
            KnownFood::SaintBones(x) => x.distribute(s, m),
            KnownFood::SoulCake(x) => x.distribute(s, m),
            KnownFood::SoulPastry(x) => x.distribute(s, m),
            KnownFood::SpicyChocolateCookie(x) => x.distribute(s, m),
            KnownFood::SpicyHerbedChicken(x) => x.distribute(s, m),
            KnownFood::SpicyMarinatedMushroom(x) => x.distribute(s, m),
            KnownFood::SteakWithWinterberrySauce(x) => x.distribute(s, m),
            KnownFood::SweetAndSpicyButternutSquashSoup(x) => x.distribute(s, m),
            KnownFood::TropicalFruitSalad(x) => x.distribute(s, m),
            KnownFood::TropicalMousse(x) => x.distribute(s, m),
            KnownFood::TruffleRisotto(x) => x.distribute(s, m),
        }
    }
    fn add_temporary(&self, s: &mut Stats, m: &mut Modifiers, c: &CombatSecond) {
        match *self {
            KnownFood::NoFood(x) => x.add_temporary(s, m, c),
            KnownFood::BeefRendang(x) => x.add_temporary(s, m, c),
            KnownFood::BlackPepperCactusSalad(x) => x.add_temporary(s, m, c),
            KnownFood::BlockOfTofu(x) => x.add_temporary(s, m, c),
            KnownFood::CactusFruitSalad(x) => x.add_temporary(s, m, c),
            KnownFood::CandyCactusCornbread(x) => x.add_temporary(s, m, c),
            KnownFood::CarrotSouffl(x) => x.add_temporary(s, m, c),
            KnownFood::CheesyCassavaRoll(x) => x.add_temporary(s, m, c),
            KnownFood::ChocolateOmnomberryCake(x) => x.add_temporary(s, m, c),
            KnownFood::ChocolateOmnomberryCream(x) => x.add_temporary(s, m, c),
            KnownFood::ChocolateTapiocaPudding(x) => x.add_temporary(s, m, c),
            KnownFood::CupOfLotusFries(x) => x.add_temporary(s, m, c),
            KnownFood::CurryButternutSquashSoup(x) => x.add_temporary(s, m, c),
            KnownFood::CurryPumpkinSoup(x) => x.add_temporary(s, m, c),
            KnownFood::DeliciousRiceBall(x) => x.add_temporary(s, m, c),
            KnownFood::DragonfishCandy(x) => x.add_temporary(s, m, c),
            KnownFood::DragonsRevelryStarcake(x) => x.add_temporary(s, m, c),
            KnownFood::FancyPotatoAndLeekSoup(x) => x.add_temporary(s, m, c),
            KnownFood::FancyTruffleBurger(x) => x.add_temporary(s, m, c),
            KnownFood::FireFlankSteak(x) => x.add_temporary(s, m, c),
            KnownFood::FireMeatChili(x) => x.add_temporary(s, m, c),
            KnownFood::FireVeggieChili(x) => x.add_temporary(s, m, c),
            KnownFood::FishStew(x) => x.add_temporary(s, m, c),
            KnownFood::Flatbread(x) => x.add_temporary(s, m, c),
            KnownFood::FrostgorgeClams(x) => x.add_temporary(s, m, c),
            KnownFood::FruitSaladWithMintGarnish(x) => x.add_temporary(s, m, c),
            KnownFood::GarlicKaleSautee(x) => x.add_temporary(s, m, c),
            KnownFood::IcyFishSnack(x) => x.add_temporary(s, m, c),
            KnownFood::JerkPoultry(x) => x.add_temporary(s, m, c),
            KnownFood::KralkachocolateBar(x) => x.add_temporary(s, m, c),
            KnownFood::LakeDoricMussels(x) => x.add_temporary(s, m, c),
            KnownFood::MarjorysExperimentalChili(x) => x.add_temporary(s, m, c),
            KnownFood::MushroomLoaf(x) => x.add_temporary(s, m, c),
            KnownFood::MusselsGnashblade(x) => x.add_temporary(s, m, c),
            KnownFood::OmnomberryBread(x) => x.add_temporary(s, m, c),
            KnownFood::OmnomberryCookie(x) => x.add_temporary(s, m, c),
            KnownFood::OrrianSteakFrittes(x) => x.add_temporary(s, m, c),
            KnownFood::OrrianTruffleSoup(x) => x.add_temporary(s, m, c),
            KnownFood::OystersGnashblade(x) => x.add_temporary(s, m, c),
            KnownFood::PassionFruitTapiocaPudding(x) => x.add_temporary(s, m, c),
            KnownFood::PricklyPearSorbet(x) => x.add_temporary(s, m, c),
            KnownFood::PricklyPearStuffedNopal(x) => x.add_temporary(s, m, c),
            KnownFood::PricklyPearTapiocaPudding(x) => x.add_temporary(s, m, c),
            KnownFood::RefugeesBeetSoup(x) => x.add_temporary(s, m, c),
            KnownFood::SaintBones(x) => x.add_temporary(s, m, c),
            KnownFood::SoulCake(x) => x.add_temporary(s, m, c),
            KnownFood::SoulPastry(x) => x.add_temporary(s, m, c),
            KnownFood::SpicyChocolateCookie(x) => x.add_temporary(s, m, c),
            KnownFood::SpicyHerbedChicken(x) => x.add_temporary(s, m, c),
            KnownFood::SpicyMarinatedMushroom(x) => x.add_temporary(s, m, c),
            KnownFood::SteakWithWinterberrySauce(x) => x.add_temporary(s, m, c),
            KnownFood::SweetAndSpicyButternutSquashSoup(x) => x.add_temporary(s, m, c),
            KnownFood::TropicalFruitSalad(x) => x.add_temporary(s, m, c),
            KnownFood::TropicalMousse(x) => x.add_temporary(s, m, c),
            KnownFood::TruffleRisotto(x) => x.add_temporary(s, m, c),
        }
    }
}
impl From<NoFood> for KnownFood {
    fn from(x: NoFood) -> KnownFood { KnownFood::NoFood(x) }
}
impl From<BeefRendang> for KnownFood {
    fn from(x: BeefRendang) -> KnownFood { KnownFood::BeefRendang(x) }
}
impl From<BlackPepperCactusSalad> for KnownFood {
    fn from(x: BlackPepperCactusSalad) -> KnownFood { KnownFood::BlackPepperCactusSalad(x) }
}
impl From<BlockOfTofu> for KnownFood {
    fn from(x: BlockOfTofu) -> KnownFood { KnownFood::BlockOfTofu(x) }
}
impl From<CactusFruitSalad> for KnownFood {
    fn from(x: CactusFruitSalad) -> KnownFood { KnownFood::CactusFruitSalad(x) }
}
impl From<CandyCactusCornbread> for KnownFood {
    fn from(x: CandyCactusCornbread) -> KnownFood { KnownFood::CandyCactusCornbread(x) }
}
impl From<CarrotSouffl> for KnownFood {
    fn from(x: CarrotSouffl) -> KnownFood { KnownFood::CarrotSouffl(x) }
}
impl From<CheesyCassavaRoll> for KnownFood {
    fn from(x: CheesyCassavaRoll) -> KnownFood { KnownFood::CheesyCassavaRoll(x) }
}
impl From<ChocolateOmnomberryCake> for KnownFood {
    fn from(x: ChocolateOmnomberryCake) -> KnownFood { KnownFood::ChocolateOmnomberryCake(x) }
}
impl From<ChocolateOmnomberryCream> for KnownFood {
    fn from(x: ChocolateOmnomberryCream) -> KnownFood { KnownFood::ChocolateOmnomberryCream(x) }
}
impl From<ChocolateTapiocaPudding> for KnownFood {
    fn from(x: ChocolateTapiocaPudding) -> KnownFood { KnownFood::ChocolateTapiocaPudding(x) }
}
impl From<CupOfLotusFries> for KnownFood {
    fn from(x: CupOfLotusFries) -> KnownFood { KnownFood::CupOfLotusFries(x) }
}
impl From<CurryButternutSquashSoup> for KnownFood {
    fn from(x: CurryButternutSquashSoup) -> KnownFood { KnownFood::CurryButternutSquashSoup(x) }
}
impl From<CurryPumpkinSoup> for KnownFood {
    fn from(x: CurryPumpkinSoup) -> KnownFood { KnownFood::CurryPumpkinSoup(x) }
}
impl From<DeliciousRiceBall> for KnownFood {
    fn from(x: DeliciousRiceBall) -> KnownFood { KnownFood::DeliciousRiceBall(x) }
}
impl From<DragonfishCandy> for KnownFood {
    fn from(x: DragonfishCandy) -> KnownFood { KnownFood::DragonfishCandy(x) }
}
impl From<DragonsRevelryStarcake> for KnownFood {
    fn from(x: DragonsRevelryStarcake) -> KnownFood { KnownFood::DragonsRevelryStarcake(x) }
}
impl From<FancyPotatoAndLeekSoup> for KnownFood {
    fn from(x: FancyPotatoAndLeekSoup) -> KnownFood { KnownFood::FancyPotatoAndLeekSoup(x) }
}
impl From<FancyTruffleBurger> for KnownFood {
    fn from(x: FancyTruffleBurger) -> KnownFood { KnownFood::FancyTruffleBurger(x) }
}
impl From<FireFlankSteak> for KnownFood {
    fn from(x: FireFlankSteak) -> KnownFood { KnownFood::FireFlankSteak(x) }
}
impl From<FireMeatChili> for KnownFood {
    fn from(x: FireMeatChili) -> KnownFood { KnownFood::FireMeatChili(x) }
}
impl From<FireVeggieChili> for KnownFood {
    fn from(x: FireVeggieChili) -> KnownFood { KnownFood::FireVeggieChili(x) }
}
impl From<FishStew> for KnownFood {
    fn from(x: FishStew) -> KnownFood { KnownFood::FishStew(x) }
}
impl From<Flatbread> for KnownFood {
    fn from(x: Flatbread) -> KnownFood { KnownFood::Flatbread(x) }
}
impl From<FrostgorgeClams> for KnownFood {
    fn from(x: FrostgorgeClams) -> KnownFood { KnownFood::FrostgorgeClams(x) }
}
impl From<FruitSaladWithMintGarnish> for KnownFood {
    fn from(x: FruitSaladWithMintGarnish) -> KnownFood { KnownFood::FruitSaladWithMintGarnish(x) }
}
impl From<GarlicKaleSautee> for KnownFood {
    fn from(x: GarlicKaleSautee) -> KnownFood { KnownFood::GarlicKaleSautee(x) }
}
impl From<IcyFishSnack> for KnownFood {
    fn from(x: IcyFishSnack) -> KnownFood { KnownFood::IcyFishSnack(x) }
}
impl From<JerkPoultry> for KnownFood {
    fn from(x: JerkPoultry) -> KnownFood { KnownFood::JerkPoultry(x) }
}
impl From<KralkachocolateBar> for KnownFood {
    fn from(x: KralkachocolateBar) -> KnownFood { KnownFood::KralkachocolateBar(x) }
}
impl From<LakeDoricMussels> for KnownFood {
    fn from(x: LakeDoricMussels) -> KnownFood { KnownFood::LakeDoricMussels(x) }
}
impl From<MarjorysExperimentalChili> for KnownFood {
    fn from(x: MarjorysExperimentalChili) -> KnownFood { KnownFood::MarjorysExperimentalChili(x) }
}
impl From<MushroomLoaf> for KnownFood {
    fn from(x: MushroomLoaf) -> KnownFood { KnownFood::MushroomLoaf(x) }
}
impl From<MusselsGnashblade> for KnownFood {
    fn from(x: MusselsGnashblade) -> KnownFood { KnownFood::MusselsGnashblade(x) }
}
impl From<OmnomberryBread> for KnownFood {
    fn from(x: OmnomberryBread) -> KnownFood { KnownFood::OmnomberryBread(x) }
}
impl From<OmnomberryCookie> for KnownFood {
    fn from(x: OmnomberryCookie) -> KnownFood { KnownFood::OmnomberryCookie(x) }
}
impl From<OrrianSteakFrittes> for KnownFood {
    fn from(x: OrrianSteakFrittes) -> KnownFood { KnownFood::OrrianSteakFrittes(x) }
}
impl From<OrrianTruffleSoup> for KnownFood {
    fn from(x: OrrianTruffleSoup) -> KnownFood { KnownFood::OrrianTruffleSoup(x) }
}
impl From<OystersGnashblade> for KnownFood {
    fn from(x: OystersGnashblade) -> KnownFood { KnownFood::OystersGnashblade(x) }
}
impl From<PassionFruitTapiocaPudding> for KnownFood {
    fn from(x: PassionFruitTapiocaPudding) -> KnownFood { KnownFood::PassionFruitTapiocaPudding(x) }
}
impl From<PricklyPearSorbet> for KnownFood {
    fn from(x: PricklyPearSorbet) -> KnownFood { KnownFood::PricklyPearSorbet(x) }
}
impl From<PricklyPearStuffedNopal> for KnownFood {
    fn from(x: PricklyPearStuffedNopal) -> KnownFood { KnownFood::PricklyPearStuffedNopal(x) }
}
impl From<PricklyPearTapiocaPudding> for KnownFood {
    fn from(x: PricklyPearTapiocaPudding) -> KnownFood { KnownFood::PricklyPearTapiocaPudding(x) }
}
impl From<RefugeesBeetSoup> for KnownFood {
    fn from(x: RefugeesBeetSoup) -> KnownFood { KnownFood::RefugeesBeetSoup(x) }
}
impl From<SaintBones> for KnownFood {
    fn from(x: SaintBones) -> KnownFood { KnownFood::SaintBones(x) }
}
impl From<SoulCake> for KnownFood {
    fn from(x: SoulCake) -> KnownFood { KnownFood::SoulCake(x) }
}
impl From<SoulPastry> for KnownFood {
    fn from(x: SoulPastry) -> KnownFood { KnownFood::SoulPastry(x) }
}
impl From<SpicyChocolateCookie> for KnownFood {
    fn from(x: SpicyChocolateCookie) -> KnownFood { KnownFood::SpicyChocolateCookie(x) }
}
impl From<SpicyHerbedChicken> for KnownFood {
    fn from(x: SpicyHerbedChicken) -> KnownFood { KnownFood::SpicyHerbedChicken(x) }
}
impl From<SpicyMarinatedMushroom> for KnownFood {
    fn from(x: SpicyMarinatedMushroom) -> KnownFood { KnownFood::SpicyMarinatedMushroom(x) }
}
impl From<SteakWithWinterberrySauce> for KnownFood {
    fn from(x: SteakWithWinterberrySauce) -> KnownFood { KnownFood::SteakWithWinterberrySauce(x) }
}
impl From<SweetAndSpicyButternutSquashSoup> for KnownFood {
    fn from(x: SweetAndSpicyButternutSquashSoup) -> KnownFood { KnownFood::SweetAndSpicyButternutSquashSoup(x) }
}
impl From<TropicalFruitSalad> for KnownFood {
    fn from(x: TropicalFruitSalad) -> KnownFood { KnownFood::TropicalFruitSalad(x) }
}
impl From<TropicalMousse> for KnownFood {
    fn from(x: TropicalMousse) -> KnownFood { KnownFood::TropicalMousse(x) }
}
impl From<TruffleRisotto> for KnownFood {
    fn from(x: TruffleRisotto) -> KnownFood { KnownFood::TruffleRisotto(x) }
}
impl Vary for KnownFood {
    fn num_fields(&self) -> usize { 1 }
    fn num_field_values(&self, _field: usize) -> u16 { 55 }
    fn get_field(&self, _field: usize) -> u16 {
        self.index() as u16
    }
    fn set_field(&mut self, _field: usize, value: u16) {
        *self = KnownFood::from_index(value as usize);
    }
}

impl Food {
    pub fn is_known(self) -> bool {
        match self {
            Food::NoFood(_) => true,
            Food::BeefRendang(_) => true,
            Food::BlackPepperCactusSalad(_) => true,
            Food::BlockOfTofu(_) => true,
            Food::CactusFruitSalad(_) => true,
            Food::CandyCactusCornbread(_) => true,
            Food::CarrotSouffl(_) => true,
            Food::CheesyCassavaRoll(_) => true,
            Food::ChocolateOmnomberryCake(_) => true,
            Food::ChocolateOmnomberryCream(_) => true,
            Food::ChocolateTapiocaPudding(_) => true,
            Food::CupOfLotusFries(_) => true,
            Food::CurryButternutSquashSoup(_) => true,
            Food::CurryPumpkinSoup(_) => true,
            Food::DeliciousRiceBall(_) => true,
            Food::DragonfishCandy(_) => true,
            Food::DragonsRevelryStarcake(_) => true,
            Food::FancyPotatoAndLeekSoup(_) => true,
            Food::FancyTruffleBurger(_) => true,
            Food::FireFlankSteak(_) => true,
            Food::FireMeatChili(_) => true,
            Food::FireVeggieChili(_) => true,
            Food::FishStew(_) => true,
            Food::Flatbread(_) => true,
            Food::FrostgorgeClams(_) => true,
            Food::FruitSaladWithMintGarnish(_) => true,
            Food::GarlicKaleSautee(_) => true,
            Food::IcyFishSnack(_) => true,
            Food::JerkPoultry(_) => true,
            Food::KralkachocolateBar(_) => true,
            Food::LakeDoricMussels(_) => true,
            Food::MarjorysExperimentalChili(_) => true,
            Food::MushroomLoaf(_) => true,
            Food::MusselsGnashblade(_) => true,
            Food::OmnomberryBread(_) => true,
            Food::OmnomberryCookie(_) => true,
            Food::OrrianSteakFrittes(_) => true,
            Food::OrrianTruffleSoup(_) => true,
            Food::OystersGnashblade(_) => true,
            Food::PassionFruitTapiocaPudding(_) => true,
            Food::PricklyPearSorbet(_) => true,
            Food::PricklyPearStuffedNopal(_) => true,
            Food::PricklyPearTapiocaPudding(_) => true,
            Food::RefugeesBeetSoup(_) => true,
            Food::SaintBones(_) => true,
            Food::SoulCake(_) => true,
            Food::SoulPastry(_) => true,
            Food::SpicyChocolateCookie(_) => true,
            Food::SpicyHerbedChicken(_) => true,
            Food::SpicyMarinatedMushroom(_) => true,
            Food::SteakWithWinterberrySauce(_) => true,
            Food::SweetAndSpicyButternutSquashSoup(_) => true,
            Food::TropicalFruitSalad(_) => true,
            Food::TropicalMousse(_) => true,
            Food::TruffleRisotto(_) => true,
            _ => false,
        }
    }
    pub fn as_known(self) -> KnownFood {
        match self {
            Food::NoFood(NoFood) => KnownFood::NoFood(NoFood),
            Food::BeefRendang(BeefRendang) => KnownFood::BeefRendang(BeefRendang),
            Food::BlackPepperCactusSalad(BlackPepperCactusSalad) => KnownFood::BlackPepperCactusSalad(BlackPepperCactusSalad),
            Food::BlockOfTofu(BlockOfTofu) => KnownFood::BlockOfTofu(BlockOfTofu),
            Food::CactusFruitSalad(CactusFruitSalad) => KnownFood::CactusFruitSalad(CactusFruitSalad),
            Food::CactusSoup(CactusSoup) => KnownFood::BlackPepperCactusSalad(BlackPepperCactusSalad),
            Food::CandyCactusCornbread(CandyCactusCornbread) => KnownFood::CandyCactusCornbread(CandyCactusCornbread),
            Food::CarrotSouffl(CarrotSouffl) => KnownFood::CarrotSouffl(CarrotSouffl),
            Food::CheesyCassavaRoll(CheesyCassavaRoll) => KnownFood::CheesyCassavaRoll(CheesyCassavaRoll),
            Food::ChocolateOmnomberryCake(ChocolateOmnomberryCake) => KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake),
            Food::ChocolateOmnomberryCream(ChocolateOmnomberryCream) => KnownFood::ChocolateOmnomberryCream(ChocolateOmnomberryCream),
            Food::ChocolateTapiocaPudding(ChocolateTapiocaPudding) => KnownFood::ChocolateTapiocaPudding(ChocolateTapiocaPudding),
            Food::CupOfLotusFries(CupOfLotusFries) => KnownFood::CupOfLotusFries(CupOfLotusFries),
            Food::CurryButternutSquashSoup(CurryButternutSquashSoup) => KnownFood::CurryButternutSquashSoup(CurryButternutSquashSoup),
            Food::CurryMusselSoup(CurryMusselSoup) => KnownFood::NoFood(NoFood),
            Food::CurryPumpkinSoup(CurryPumpkinSoup) => KnownFood::CurryPumpkinSoup(CurryPumpkinSoup),
            Food::DeliciousRiceBall(DeliciousRiceBall) => KnownFood::DeliciousRiceBall(DeliciousRiceBall),
            Food::DragonfishCandy(DragonfishCandy) => KnownFood::DragonfishCandy(DragonfishCandy),
            Food::DragonflyCupcake(DragonflyCupcake) => KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake),
            Food::DragonsBreathBun(DragonsBreathBun) => KnownFood::CarrotSouffl(CarrotSouffl),
            Food::DragonsRevelryStarcake(DragonsRevelryStarcake) => KnownFood::DragonsRevelryStarcake(DragonsRevelryStarcake),
            Food::EggInACloud(EggInACloud) => KnownFood::CarrotSouffl(CarrotSouffl),
            Food::ExperimentalRemnant(ExperimentalRemnant) => KnownFood::NoFood(NoFood),
            Food::FancyPotatoAndLeekSoup(FancyPotatoAndLeekSoup) => KnownFood::FancyPotatoAndLeekSoup(FancyPotatoAndLeekSoup),
            Food::FancyTruffleBurger(FancyTruffleBurger) => KnownFood::FancyTruffleBurger(FancyTruffleBurger),
            Food::FireFlankSteak(FireFlankSteak) => KnownFood::FireFlankSteak(FireFlankSteak),
            Food::FireMeatChili(FireMeatChili) => KnownFood::FireMeatChili(FireMeatChili),
            Food::FireSalsa(FireSalsa) => KnownFood::NoFood(NoFood),
            Food::FireVeggieChili(FireVeggieChili) => KnownFood::FireVeggieChili(FireVeggieChili),
            Food::FishStew(FishStew) => KnownFood::FishStew(FishStew),
            Food::FishyRiceBowl(FishyRiceBowl) => KnownFood::CupOfLotusFries(CupOfLotusFries),
            Food::Flatbread(Flatbread) => KnownFood::Flatbread(Flatbread),
            Food::FriedGoldenDumpling(FriedGoldenDumpling) => KnownFood::ChocolateOmnomberryCream(ChocolateOmnomberryCream),
            Food::FriedOysterSandwich(FriedOysterSandwich) => KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake),
            Food::FriedOysters(FriedOysters) => KnownFood::NoFood(NoFood),
            Food::FrostgorgeClams(FrostgorgeClams) => KnownFood::FrostgorgeClams(FrostgorgeClams),
            Food::FruitSaladWithMintGarnish(FruitSaladWithMintGarnish) => KnownFood::FruitSaladWithMintGarnish(FruitSaladWithMintGarnish),
            Food::GarlicKaleSautee(GarlicKaleSautee) => KnownFood::GarlicKaleSautee(GarlicKaleSautee),
            Food::GhostPepperPopper(GhostPepperPopper) => KnownFood::NoFood(NoFood),
            Food::HolographicSuperCake(HolographicSuperCake) => KnownFood::NoFood(NoFood),
            Food::IcyFishSnack(IcyFishSnack) => KnownFood::IcyFishSnack(IcyFishSnack),
            Food::IndigoMushroomMilkshake(IndigoMushroomMilkshake) => KnownFood::BlockOfTofu(BlockOfTofu),
            Food::IslandPudding(IslandPudding) => KnownFood::NoFood(NoFood),
            Food::JerkPoultry(JerkPoultry) => KnownFood::JerkPoultry(JerkPoultry),
            Food::JerkPoultryAndNopalFlatbreadSandwich(JerkPoultryAndNopalFlatbreadSandwich) => KnownFood::BlockOfTofu(BlockOfTofu),
            Food::JerkPoultryFlatbreadSandwich(JerkPoultryFlatbreadSandwich) => KnownFood::NoFood(NoFood),
            Food::KimchiPancakes(KimchiPancakes) => KnownFood::CupOfLotusFries(CupOfLotusFries),
            Food::KimchiTofuStew(KimchiTofuStew) => KnownFood::CupOfLotusFries(CupOfLotusFries),
            Food::KoiCake(KoiCake) => KnownFood::GarlicKaleSautee(GarlicKaleSautee),
            Food::KralkachocolateBar(KralkachocolateBar) => KnownFood::KralkachocolateBar(KralkachocolateBar),
            Food::LakeDoricMussels(LakeDoricMussels) => KnownFood::LakeDoricMussels(LakeDoricMussels),
            Food::LemongrassMusselPasta(LemongrassMusselPasta) => KnownFood::BlackPepperCactusSalad(BlackPepperCactusSalad),
            Food::LemongrassPoultry(LemongrassPoultry) => KnownFood::DragonfishCandy(DragonfishCandy),
            Food::LemongrassPoultrySoup(LemongrassPoultrySoup) => KnownFood::FishStew(FishStew),
            Food::LotusStirfry(LotusStirfry) => KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake),
            Food::MangoPie(MangoPie) => KnownFood::FishStew(FishStew),
            Food::MarjorysExperimentalChili(MarjorysExperimentalChili) => KnownFood::MarjorysExperimentalChili(MarjorysExperimentalChili),
            Food::MashedPurplePotatoes(MashedPurplePotatoes) => KnownFood::BlackPepperCactusSalad(BlackPepperCactusSalad),
            Food::MeatyAsparagusSkewer(MeatyAsparagusSkewer) => KnownFood::CupOfLotusFries(CupOfLotusFries),
            Food::MeatyRiceBowl(MeatyRiceBowl) => KnownFood::CupOfLotusFries(CupOfLotusFries),
            Food::MushroomLoaf(MushroomLoaf) => KnownFood::MushroomLoaf(MushroomLoaf),
            Food::MushroomsYakkington(MushroomsYakkington) => KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake),
            Food::MusselSoup(MusselSoup) => KnownFood::FishStew(FishStew),
            Food::MusselsGnashblade(MusselsGnashblade) => KnownFood::MusselsGnashblade(MusselsGnashblade),
            Food::NopalitosSaut(NopalitosSaut) => KnownFood::CandyCactusCornbread(CandyCactusCornbread),
            Food::OmnomberryBar(OmnomberryBar) => KnownFood::NoFood(NoFood),
            Food::OmnomberryBread(OmnomberryBread) => KnownFood::OmnomberryBread(OmnomberryBread),
            Food::OmnomberryCompote(OmnomberryCompote) => KnownFood::CheesyCassavaRoll(CheesyCassavaRoll),
            Food::OmnomberryCookie(OmnomberryCookie) => KnownFood::OmnomberryCookie(OmnomberryCookie),
            Food::OmnomberryGhost(OmnomberryGhost) => KnownFood::BlockOfTofu(BlockOfTofu),
            Food::OmnomberryPie(OmnomberryPie) => KnownFood::BlockOfTofu(BlockOfTofu),
            Food::OmnomberryTart(OmnomberryTart) => KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake),
            Food::OrrianSteakFrittes(OrrianSteakFrittes) => KnownFood::OrrianSteakFrittes(OrrianSteakFrittes),
            Food::OrrianTruffleAndMeatStew(OrrianTruffleAndMeatStew) => KnownFood::NoFood(NoFood),
            Food::OrrianTruffleSoup(OrrianTruffleSoup) => KnownFood::OrrianTruffleSoup(OrrianTruffleSoup),
            Food::OystersGnashblade(OystersGnashblade) => KnownFood::OystersGnashblade(OystersGnashblade),
            Food::OystersWithCocktailSauce(OystersWithCocktailSauce) => KnownFood::BlockOfTofu(BlockOfTofu),
            Food::OystersWithPestoSauce(OystersWithPestoSauce) => KnownFood::CheesyCassavaRoll(CheesyCassavaRoll),
            Food::OystersWithSpicySauce(OystersWithSpicySauce) => KnownFood::CupOfLotusFries(CupOfLotusFries),
            Food::OystersWithZestySauce(OystersWithZestySauce) => KnownFood::CarrotSouffl(CarrotSouffl),
            Food::PassionFruitTapiocaPudding(PassionFruitTapiocaPudding) => KnownFood::PassionFruitTapiocaPudding(PassionFruitTapiocaPudding),
            Food::PeppermintOmnomberryBar(PeppermintOmnomberryBar) => KnownFood::NoFood(NoFood),
            Food::PoultrySatay(PoultrySatay) => KnownFood::FruitSaladWithMintGarnish(FruitSaladWithMintGarnish),
            Food::PricklyPearPie(PricklyPearPie) => KnownFood::CactusFruitSalad(CactusFruitSalad),
            Food::PricklyPearSorbet(PricklyPearSorbet) => KnownFood::PricklyPearSorbet(PricklyPearSorbet),
            Food::PricklyPearStuffedNopal(PricklyPearStuffedNopal) => KnownFood::PricklyPearStuffedNopal(PricklyPearStuffedNopal),
            Food::PricklyPearTapiocaPudding(PricklyPearTapiocaPudding) => KnownFood::PricklyPearTapiocaPudding(PricklyPearTapiocaPudding),
            Food::QuicheOfDarkness(QuicheOfDarkness) => KnownFood::FishStew(FishStew),
            Food::RareVeggiePizza(RareVeggiePizza) => KnownFood::GarlicKaleSautee(GarlicKaleSautee),
            Food::RedLentilSaobosa(RedLentilSaobosa) => KnownFood::GarlicKaleSautee(GarlicKaleSautee),
            Food::RedfishSushi(RedfishSushi) => KnownFood::NoFood(NoFood),
            Food::RefugeesBeetSoup(RefugeesBeetSoup) => KnownFood::RefugeesBeetSoup(RefugeesBeetSoup),
            Food::RoastedCactus(RoastedCactus) => KnownFood::PricklyPearSorbet(PricklyPearSorbet),
            Food::RoastedLotusRoot(RoastedLotusRoot) => KnownFood::BlackPepperCactusSalad(BlackPepperCactusSalad),
            Food::SaffronBread(SaffronBread) => KnownFood::NoFood(NoFood),
            Food::SaffronMangoIceCream(SaffronMangoIceCream) => KnownFood::KralkachocolateBar(KralkachocolateBar),
            Food::SaffronMussels(SaffronMussels) => KnownFood::PricklyPearTapiocaPudding(PricklyPearTapiocaPudding),
            Food::SaffronStuffedMushroom(SaffronStuffedMushroom) => KnownFood::BlockOfTofu(BlockOfTofu),
            Food::SaffronscentedPoultrySoup(SaffronscentedPoultrySoup) => KnownFood::CheesyCassavaRoll(CheesyCassavaRoll),
            Food::SaintBones(SaintBones) => KnownFood::SaintBones(SaintBones),
            Food::ScoopOfMintberrySwirlIceCream(ScoopOfMintberrySwirlIceCream) => KnownFood::BlockOfTofu(BlockOfTofu),
            Food::SeaweedSalad(SeaweedSalad) => KnownFood::NoFood(NoFood),
            Food::SliceOfAllspiceCake(SliceOfAllspiceCake) => KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake),
            Food::SliceOfAllspiceCakeWithIceCream(SliceOfAllspiceCakeWithIceCream) => KnownFood::CupOfLotusFries(CupOfLotusFries),
            Food::SliceOfCandiedDragonRoll(SliceOfCandiedDragonRoll) => KnownFood::BlockOfTofu(BlockOfTofu),
            Food::SoulCake(SoulCake) => KnownFood::SoulCake(SoulCake),
            Food::SoulPastry(SoulPastry) => KnownFood::SoulPastry(SoulPastry),
            Food::SpicyChocolateCookie(SpicyChocolateCookie) => KnownFood::SpicyChocolateCookie(SpicyChocolateCookie),
            Food::SpicyHerbedChicken(SpicyHerbedChicken) => KnownFood::SpicyHerbedChicken(SpicyHerbedChicken),
            Food::SpicyMarinatedMushroom(SpicyMarinatedMushroom) => KnownFood::SpicyMarinatedMushroom(SpicyMarinatedMushroom),
            Food::SpicyPumpkinCookie(SpicyPumpkinCookie) => KnownFood::CupOfLotusFries(CupOfLotusFries),
            Food::SpringRoll(SpringRoll) => KnownFood::ChocolateOmnomberryCream(ChocolateOmnomberryCream),
            Food::SteakWithWinterberrySauce(SteakWithWinterberrySauce) => KnownFood::SteakWithWinterberrySauce(SteakWithWinterberrySauce),
            Food::SteamedRedDumpling(SteamedRedDumpling) => KnownFood::NoFood(NoFood),
            Food::SuperHotLemongrassPoultrySoup(SuperHotLemongrassPoultrySoup) => KnownFood::FishStew(FishStew),
            Food::SuperHotSaffronScentedPoultrySoup(SuperHotSaffronScentedPoultrySoup) => KnownFood::CheesyCassavaRoll(CheesyCassavaRoll),
            Food::SweetAndSpicyBeans(SweetAndSpicyBeans) => KnownFood::PricklyPearStuffedNopal(PricklyPearStuffedNopal),
            Food::SweetAndSpicyButternutSquashSoup(SweetAndSpicyButternutSquashSoup) => KnownFood::SweetAndSpicyButternutSquashSoup(SweetAndSpicyButternutSquashSoup),
            Food::SweetBeanBun(SweetBeanBun) => KnownFood::OystersGnashblade(OystersGnashblade),
            Food::SweetCurriedMussels(SweetCurriedMussels) => KnownFood::CarrotSouffl(CarrotSouffl),
            Food::SwiftlyScrambledEggs(SwiftlyScrambledEggs) => KnownFood::NoFood(NoFood),
            Food::TapiocaPudding(TapiocaPudding) => KnownFood::NoFood(NoFood),
            Food::TropicalFruitSalad(TropicalFruitSalad) => KnownFood::TropicalFruitSalad(TropicalFruitSalad),
            Food::TropicalMousse(TropicalMousse) => KnownFood::TropicalMousse(TropicalMousse),
            Food::TropicalPeppermintCake(TropicalPeppermintCake) => KnownFood::FishStew(FishStew),
            Food::TruffleRavioli(TruffleRavioli) => KnownFood::FrostgorgeClams(FrostgorgeClams),
            Food::TruffleRisotto(TruffleRisotto) => KnownFood::TruffleRisotto(TruffleRisotto),
            Food::TruffleSautee(TruffleSautee) => KnownFood::CarrotSouffl(CarrotSouffl),
            Food::TruffleSteak(TruffleSteak) => KnownFood::SteakWithWinterberrySauce(SteakWithWinterberrySauce),
            Food::TruffleSteakDinner(TruffleSteakDinner) => KnownFood::CarrotSouffl(CarrotSouffl),
            Food::WinterberryPie(WinterberryPie) => KnownFood::BlockOfTofu(BlockOfTofu),
            Food::WinterberrySeaweedSalad(WinterberrySeaweedSalad) => KnownFood::NoFood(NoFood),
            Food::WinterberrySorbet(WinterberrySorbet) => KnownFood::PricklyPearSorbet(PricklyPearSorbet),
            Food::ZestyTurnipSoup(ZestyTurnipSoup) => KnownFood::DragonfishCandy(DragonfishCandy),
        }
    }
}
impl NoFood {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl BeefRendang {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BeefRendang(BeefRendang)
    }
}
impl BlackPepperCactusSalad {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BlackPepperCactusSalad(BlackPepperCactusSalad)
    }
}
impl BlockOfTofu {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BlockOfTofu(BlockOfTofu)
    }
}
impl CactusFruitSalad {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CactusFruitSalad(CactusFruitSalad)
    }
}
impl CactusSoup {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BlackPepperCactusSalad(BlackPepperCactusSalad)
    }
}
impl CandyCactusCornbread {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CandyCactusCornbread(CandyCactusCornbread)
    }
}
impl CarrotSouffl {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CarrotSouffl(CarrotSouffl)
    }
}
impl CheesyCassavaRoll {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CheesyCassavaRoll(CheesyCassavaRoll)
    }
}
impl ChocolateOmnomberryCake {
    pub fn as_known(self) -> KnownFood {
        KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake)
    }
}
impl ChocolateOmnomberryCream {
    pub fn as_known(self) -> KnownFood {
        KnownFood::ChocolateOmnomberryCream(ChocolateOmnomberryCream)
    }
}
impl ChocolateTapiocaPudding {
    pub fn as_known(self) -> KnownFood {
        KnownFood::ChocolateTapiocaPudding(ChocolateTapiocaPudding)
    }
}
impl CupOfLotusFries {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CupOfLotusFries(CupOfLotusFries)
    }
}
impl CurryButternutSquashSoup {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CurryButternutSquashSoup(CurryButternutSquashSoup)
    }
}
impl CurryMusselSoup {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl CurryPumpkinSoup {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CurryPumpkinSoup(CurryPumpkinSoup)
    }
}
impl DeliciousRiceBall {
    pub fn as_known(self) -> KnownFood {
        KnownFood::DeliciousRiceBall(DeliciousRiceBall)
    }
}
impl DragonfishCandy {
    pub fn as_known(self) -> KnownFood {
        KnownFood::DragonfishCandy(DragonfishCandy)
    }
}
impl DragonflyCupcake {
    pub fn as_known(self) -> KnownFood {
        KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake)
    }
}
impl DragonsBreathBun {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CarrotSouffl(CarrotSouffl)
    }
}
impl DragonsRevelryStarcake {
    pub fn as_known(self) -> KnownFood {
        KnownFood::DragonsRevelryStarcake(DragonsRevelryStarcake)
    }
}
impl EggInACloud {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CarrotSouffl(CarrotSouffl)
    }
}
impl ExperimentalRemnant {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl FancyPotatoAndLeekSoup {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FancyPotatoAndLeekSoup(FancyPotatoAndLeekSoup)
    }
}
impl FancyTruffleBurger {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FancyTruffleBurger(FancyTruffleBurger)
    }
}
impl FireFlankSteak {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FireFlankSteak(FireFlankSteak)
    }
}
impl FireMeatChili {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FireMeatChili(FireMeatChili)
    }
}
impl FireSalsa {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl FireVeggieChili {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FireVeggieChili(FireVeggieChili)
    }
}
impl FishStew {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FishStew(FishStew)
    }
}
impl FishyRiceBowl {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CupOfLotusFries(CupOfLotusFries)
    }
}
impl Flatbread {
    pub fn as_known(self) -> KnownFood {
        KnownFood::Flatbread(Flatbread)
    }
}
impl FriedGoldenDumpling {
    pub fn as_known(self) -> KnownFood {
        KnownFood::ChocolateOmnomberryCream(ChocolateOmnomberryCream)
    }
}
impl FriedOysterSandwich {
    pub fn as_known(self) -> KnownFood {
        KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake)
    }
}
impl FriedOysters {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl FrostgorgeClams {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FrostgorgeClams(FrostgorgeClams)
    }
}
impl FruitSaladWithMintGarnish {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FruitSaladWithMintGarnish(FruitSaladWithMintGarnish)
    }
}
impl GarlicKaleSautee {
    pub fn as_known(self) -> KnownFood {
        KnownFood::GarlicKaleSautee(GarlicKaleSautee)
    }
}
impl GhostPepperPopper {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl HolographicSuperCake {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl IcyFishSnack {
    pub fn as_known(self) -> KnownFood {
        KnownFood::IcyFishSnack(IcyFishSnack)
    }
}
impl IndigoMushroomMilkshake {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BlockOfTofu(BlockOfTofu)
    }
}
impl IslandPudding {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl JerkPoultry {
    pub fn as_known(self) -> KnownFood {
        KnownFood::JerkPoultry(JerkPoultry)
    }
}
impl JerkPoultryAndNopalFlatbreadSandwich {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BlockOfTofu(BlockOfTofu)
    }
}
impl JerkPoultryFlatbreadSandwich {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl KimchiPancakes {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CupOfLotusFries(CupOfLotusFries)
    }
}
impl KimchiTofuStew {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CupOfLotusFries(CupOfLotusFries)
    }
}
impl KoiCake {
    pub fn as_known(self) -> KnownFood {
        KnownFood::GarlicKaleSautee(GarlicKaleSautee)
    }
}
impl KralkachocolateBar {
    pub fn as_known(self) -> KnownFood {
        KnownFood::KralkachocolateBar(KralkachocolateBar)
    }
}
impl LakeDoricMussels {
    pub fn as_known(self) -> KnownFood {
        KnownFood::LakeDoricMussels(LakeDoricMussels)
    }
}
impl LemongrassMusselPasta {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BlackPepperCactusSalad(BlackPepperCactusSalad)
    }
}
impl LemongrassPoultry {
    pub fn as_known(self) -> KnownFood {
        KnownFood::DragonfishCandy(DragonfishCandy)
    }
}
impl LemongrassPoultrySoup {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FishStew(FishStew)
    }
}
impl LotusStirfry {
    pub fn as_known(self) -> KnownFood {
        KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake)
    }
}
impl MangoPie {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FishStew(FishStew)
    }
}
impl MarjorysExperimentalChili {
    pub fn as_known(self) -> KnownFood {
        KnownFood::MarjorysExperimentalChili(MarjorysExperimentalChili)
    }
}
impl MashedPurplePotatoes {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BlackPepperCactusSalad(BlackPepperCactusSalad)
    }
}
impl MeatyAsparagusSkewer {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CupOfLotusFries(CupOfLotusFries)
    }
}
impl MeatyRiceBowl {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CupOfLotusFries(CupOfLotusFries)
    }
}
impl MushroomLoaf {
    pub fn as_known(self) -> KnownFood {
        KnownFood::MushroomLoaf(MushroomLoaf)
    }
}
impl MushroomsYakkington {
    pub fn as_known(self) -> KnownFood {
        KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake)
    }
}
impl MusselSoup {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FishStew(FishStew)
    }
}
impl MusselsGnashblade {
    pub fn as_known(self) -> KnownFood {
        KnownFood::MusselsGnashblade(MusselsGnashblade)
    }
}
impl NopalitosSaut {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CandyCactusCornbread(CandyCactusCornbread)
    }
}
impl OmnomberryBar {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl OmnomberryBread {
    pub fn as_known(self) -> KnownFood {
        KnownFood::OmnomberryBread(OmnomberryBread)
    }
}
impl OmnomberryCompote {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CheesyCassavaRoll(CheesyCassavaRoll)
    }
}
impl OmnomberryCookie {
    pub fn as_known(self) -> KnownFood {
        KnownFood::OmnomberryCookie(OmnomberryCookie)
    }
}
impl OmnomberryGhost {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BlockOfTofu(BlockOfTofu)
    }
}
impl OmnomberryPie {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BlockOfTofu(BlockOfTofu)
    }
}
impl OmnomberryTart {
    pub fn as_known(self) -> KnownFood {
        KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake)
    }
}
impl OrrianSteakFrittes {
    pub fn as_known(self) -> KnownFood {
        KnownFood::OrrianSteakFrittes(OrrianSteakFrittes)
    }
}
impl OrrianTruffleAndMeatStew {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl OrrianTruffleSoup {
    pub fn as_known(self) -> KnownFood {
        KnownFood::OrrianTruffleSoup(OrrianTruffleSoup)
    }
}
impl OystersGnashblade {
    pub fn as_known(self) -> KnownFood {
        KnownFood::OystersGnashblade(OystersGnashblade)
    }
}
impl OystersWithCocktailSauce {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BlockOfTofu(BlockOfTofu)
    }
}
impl OystersWithPestoSauce {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CheesyCassavaRoll(CheesyCassavaRoll)
    }
}
impl OystersWithSpicySauce {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CupOfLotusFries(CupOfLotusFries)
    }
}
impl OystersWithZestySauce {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CarrotSouffl(CarrotSouffl)
    }
}
impl PassionFruitTapiocaPudding {
    pub fn as_known(self) -> KnownFood {
        KnownFood::PassionFruitTapiocaPudding(PassionFruitTapiocaPudding)
    }
}
impl PeppermintOmnomberryBar {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl PoultrySatay {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FruitSaladWithMintGarnish(FruitSaladWithMintGarnish)
    }
}
impl PricklyPearPie {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CactusFruitSalad(CactusFruitSalad)
    }
}
impl PricklyPearSorbet {
    pub fn as_known(self) -> KnownFood {
        KnownFood::PricklyPearSorbet(PricklyPearSorbet)
    }
}
impl PricklyPearStuffedNopal {
    pub fn as_known(self) -> KnownFood {
        KnownFood::PricklyPearStuffedNopal(PricklyPearStuffedNopal)
    }
}
impl PricklyPearTapiocaPudding {
    pub fn as_known(self) -> KnownFood {
        KnownFood::PricklyPearTapiocaPudding(PricklyPearTapiocaPudding)
    }
}
impl QuicheOfDarkness {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FishStew(FishStew)
    }
}
impl RareVeggiePizza {
    pub fn as_known(self) -> KnownFood {
        KnownFood::GarlicKaleSautee(GarlicKaleSautee)
    }
}
impl RedLentilSaobosa {
    pub fn as_known(self) -> KnownFood {
        KnownFood::GarlicKaleSautee(GarlicKaleSautee)
    }
}
impl RedfishSushi {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl RefugeesBeetSoup {
    pub fn as_known(self) -> KnownFood {
        KnownFood::RefugeesBeetSoup(RefugeesBeetSoup)
    }
}
impl RoastedCactus {
    pub fn as_known(self) -> KnownFood {
        KnownFood::PricklyPearSorbet(PricklyPearSorbet)
    }
}
impl RoastedLotusRoot {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BlackPepperCactusSalad(BlackPepperCactusSalad)
    }
}
impl SaffronBread {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl SaffronMangoIceCream {
    pub fn as_known(self) -> KnownFood {
        KnownFood::KralkachocolateBar(KralkachocolateBar)
    }
}
impl SaffronMussels {
    pub fn as_known(self) -> KnownFood {
        KnownFood::PricklyPearTapiocaPudding(PricklyPearTapiocaPudding)
    }
}
impl SaffronStuffedMushroom {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BlockOfTofu(BlockOfTofu)
    }
}
impl SaffronscentedPoultrySoup {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CheesyCassavaRoll(CheesyCassavaRoll)
    }
}
impl SaintBones {
    pub fn as_known(self) -> KnownFood {
        KnownFood::SaintBones(SaintBones)
    }
}
impl ScoopOfMintberrySwirlIceCream {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BlockOfTofu(BlockOfTofu)
    }
}
impl SeaweedSalad {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl SliceOfAllspiceCake {
    pub fn as_known(self) -> KnownFood {
        KnownFood::ChocolateOmnomberryCake(ChocolateOmnomberryCake)
    }
}
impl SliceOfAllspiceCakeWithIceCream {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CupOfLotusFries(CupOfLotusFries)
    }
}
impl SliceOfCandiedDragonRoll {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BlockOfTofu(BlockOfTofu)
    }
}
impl SoulCake {
    pub fn as_known(self) -> KnownFood {
        KnownFood::SoulCake(SoulCake)
    }
}
impl SoulPastry {
    pub fn as_known(self) -> KnownFood {
        KnownFood::SoulPastry(SoulPastry)
    }
}
impl SpicyChocolateCookie {
    pub fn as_known(self) -> KnownFood {
        KnownFood::SpicyChocolateCookie(SpicyChocolateCookie)
    }
}
impl SpicyHerbedChicken {
    pub fn as_known(self) -> KnownFood {
        KnownFood::SpicyHerbedChicken(SpicyHerbedChicken)
    }
}
impl SpicyMarinatedMushroom {
    pub fn as_known(self) -> KnownFood {
        KnownFood::SpicyMarinatedMushroom(SpicyMarinatedMushroom)
    }
}
impl SpicyPumpkinCookie {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CupOfLotusFries(CupOfLotusFries)
    }
}
impl SpringRoll {
    pub fn as_known(self) -> KnownFood {
        KnownFood::ChocolateOmnomberryCream(ChocolateOmnomberryCream)
    }
}
impl SteakWithWinterberrySauce {
    pub fn as_known(self) -> KnownFood {
        KnownFood::SteakWithWinterberrySauce(SteakWithWinterberrySauce)
    }
}
impl SteamedRedDumpling {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl SuperHotLemongrassPoultrySoup {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FishStew(FishStew)
    }
}
impl SuperHotSaffronScentedPoultrySoup {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CheesyCassavaRoll(CheesyCassavaRoll)
    }
}
impl SweetAndSpicyBeans {
    pub fn as_known(self) -> KnownFood {
        KnownFood::PricklyPearStuffedNopal(PricklyPearStuffedNopal)
    }
}
impl SweetAndSpicyButternutSquashSoup {
    pub fn as_known(self) -> KnownFood {
        KnownFood::SweetAndSpicyButternutSquashSoup(SweetAndSpicyButternutSquashSoup)
    }
}
impl SweetBeanBun {
    pub fn as_known(self) -> KnownFood {
        KnownFood::OystersGnashblade(OystersGnashblade)
    }
}
impl SweetCurriedMussels {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CarrotSouffl(CarrotSouffl)
    }
}
impl SwiftlyScrambledEggs {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl TapiocaPudding {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl TropicalFruitSalad {
    pub fn as_known(self) -> KnownFood {
        KnownFood::TropicalFruitSalad(TropicalFruitSalad)
    }
}
impl TropicalMousse {
    pub fn as_known(self) -> KnownFood {
        KnownFood::TropicalMousse(TropicalMousse)
    }
}
impl TropicalPeppermintCake {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FishStew(FishStew)
    }
}
impl TruffleRavioli {
    pub fn as_known(self) -> KnownFood {
        KnownFood::FrostgorgeClams(FrostgorgeClams)
    }
}
impl TruffleRisotto {
    pub fn as_known(self) -> KnownFood {
        KnownFood::TruffleRisotto(TruffleRisotto)
    }
}
impl TruffleSautee {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CarrotSouffl(CarrotSouffl)
    }
}
impl TruffleSteak {
    pub fn as_known(self) -> KnownFood {
        KnownFood::SteakWithWinterberrySauce(SteakWithWinterberrySauce)
    }
}
impl TruffleSteakDinner {
    pub fn as_known(self) -> KnownFood {
        KnownFood::CarrotSouffl(CarrotSouffl)
    }
}
impl WinterberryPie {
    pub fn as_known(self) -> KnownFood {
        KnownFood::BlockOfTofu(BlockOfTofu)
    }
}
impl WinterberrySeaweedSalad {
    pub fn as_known(self) -> KnownFood {
        KnownFood::NoFood(NoFood)
    }
}
impl WinterberrySorbet {
    pub fn as_known(self) -> KnownFood {
        KnownFood::PricklyPearSorbet(PricklyPearSorbet)
    }
}
impl ZestyTurnipSoup {
    pub fn as_known(self) -> KnownFood {
        KnownFood::DragonfishCandy(DragonfishCandy)
    }
}
impl From<KnownFood> for Food {
    fn from(x: KnownFood) -> Food {
        match x {
            KnownFood::NoFood(y) => Food::NoFood(y),
            KnownFood::BeefRendang(y) => Food::BeefRendang(y),
            KnownFood::BlackPepperCactusSalad(y) => Food::BlackPepperCactusSalad(y),
            KnownFood::BlockOfTofu(y) => Food::BlockOfTofu(y),
            KnownFood::CactusFruitSalad(y) => Food::CactusFruitSalad(y),
            KnownFood::CandyCactusCornbread(y) => Food::CandyCactusCornbread(y),
            KnownFood::CarrotSouffl(y) => Food::CarrotSouffl(y),
            KnownFood::CheesyCassavaRoll(y) => Food::CheesyCassavaRoll(y),
            KnownFood::ChocolateOmnomberryCake(y) => Food::ChocolateOmnomberryCake(y),
            KnownFood::ChocolateOmnomberryCream(y) => Food::ChocolateOmnomberryCream(y),
            KnownFood::ChocolateTapiocaPudding(y) => Food::ChocolateTapiocaPudding(y),
            KnownFood::CupOfLotusFries(y) => Food::CupOfLotusFries(y),
            KnownFood::CurryButternutSquashSoup(y) => Food::CurryButternutSquashSoup(y),
            KnownFood::CurryPumpkinSoup(y) => Food::CurryPumpkinSoup(y),
            KnownFood::DeliciousRiceBall(y) => Food::DeliciousRiceBall(y),
            KnownFood::DragonfishCandy(y) => Food::DragonfishCandy(y),
            KnownFood::DragonsRevelryStarcake(y) => Food::DragonsRevelryStarcake(y),
            KnownFood::FancyPotatoAndLeekSoup(y) => Food::FancyPotatoAndLeekSoup(y),
            KnownFood::FancyTruffleBurger(y) => Food::FancyTruffleBurger(y),
            KnownFood::FireFlankSteak(y) => Food::FireFlankSteak(y),
            KnownFood::FireMeatChili(y) => Food::FireMeatChili(y),
            KnownFood::FireVeggieChili(y) => Food::FireVeggieChili(y),
            KnownFood::FishStew(y) => Food::FishStew(y),
            KnownFood::Flatbread(y) => Food::Flatbread(y),
            KnownFood::FrostgorgeClams(y) => Food::FrostgorgeClams(y),
            KnownFood::FruitSaladWithMintGarnish(y) => Food::FruitSaladWithMintGarnish(y),
            KnownFood::GarlicKaleSautee(y) => Food::GarlicKaleSautee(y),
            KnownFood::IcyFishSnack(y) => Food::IcyFishSnack(y),
            KnownFood::JerkPoultry(y) => Food::JerkPoultry(y),
            KnownFood::KralkachocolateBar(y) => Food::KralkachocolateBar(y),
            KnownFood::LakeDoricMussels(y) => Food::LakeDoricMussels(y),
            KnownFood::MarjorysExperimentalChili(y) => Food::MarjorysExperimentalChili(y),
            KnownFood::MushroomLoaf(y) => Food::MushroomLoaf(y),
            KnownFood::MusselsGnashblade(y) => Food::MusselsGnashblade(y),
            KnownFood::OmnomberryBread(y) => Food::OmnomberryBread(y),
            KnownFood::OmnomberryCookie(y) => Food::OmnomberryCookie(y),
            KnownFood::OrrianSteakFrittes(y) => Food::OrrianSteakFrittes(y),
            KnownFood::OrrianTruffleSoup(y) => Food::OrrianTruffleSoup(y),
            KnownFood::OystersGnashblade(y) => Food::OystersGnashblade(y),
            KnownFood::PassionFruitTapiocaPudding(y) => Food::PassionFruitTapiocaPudding(y),
            KnownFood::PricklyPearSorbet(y) => Food::PricklyPearSorbet(y),
            KnownFood::PricklyPearStuffedNopal(y) => Food::PricklyPearStuffedNopal(y),
            KnownFood::PricklyPearTapiocaPudding(y) => Food::PricklyPearTapiocaPudding(y),
            KnownFood::RefugeesBeetSoup(y) => Food::RefugeesBeetSoup(y),
            KnownFood::SaintBones(y) => Food::SaintBones(y),
            KnownFood::SoulCake(y) => Food::SoulCake(y),
            KnownFood::SoulPastry(y) => Food::SoulPastry(y),
            KnownFood::SpicyChocolateCookie(y) => Food::SpicyChocolateCookie(y),
            KnownFood::SpicyHerbedChicken(y) => Food::SpicyHerbedChicken(y),
            KnownFood::SpicyMarinatedMushroom(y) => Food::SpicyMarinatedMushroom(y),
            KnownFood::SteakWithWinterberrySauce(y) => Food::SteakWithWinterberrySauce(y),
            KnownFood::SweetAndSpicyButternutSquashSoup(y) => Food::SweetAndSpicyButternutSquashSoup(y),
            KnownFood::TropicalFruitSalad(y) => Food::TropicalFruitSalad(y),
            KnownFood::TropicalMousse(y) => Food::TropicalMousse(y),
            KnownFood::TruffleRisotto(y) => Food::TruffleRisotto(y),
        }
    }
}

// END GENERATED CODE
