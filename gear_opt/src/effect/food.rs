use crate::effect::Effect;
use crate::stats::{Stats, Modifiers};

// BEGIN GENERATED CODE
// Generated by gen_gear_tables.py for GW2 build 142239 at 2023-03-06T15:14:41

/// Block of Tofu
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BlockOfTofu;
#[allow(unused_variables)]
impl Effect for BlockOfTofu {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+100 power and ferocity for 30 seconds on kill'
        s.precision += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Black Pepper Cactus Salad
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BlackPepperCactusSalad;
#[allow(unused_variables)]
impl Effect for BlackPepperCactusSalad {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain health every second'
        s.toughness += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Cactus Fruit Salad
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CactusFruitSalad;
#[allow(unused_variables)]
impl Effect for CactusFruitSalad {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        // unknown effect: '33% chance to steal life on critical hit'
        // +10.0 experience from kills
    }
}

/// Bowl of Cactus Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CactusSoup;
#[allow(unused_variables)]
impl Effect for CactusSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain health every second'
        s.toughness += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Chocolate Tapioca Pudding
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ChocolateTapiocaPudding;
#[allow(unused_variables)]
impl Effect for ChocolateTapiocaPudding {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 100.0;
        s.healing_power += 70.0;
        // +10.0 experience
    }
}

/// Bowl of Curry Butternut Squash Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CurryButternutSquashSoup;
#[allow(unused_variables)]
impl Effect for CurryButternutSquashSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 100.0;
        s.ferocity += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Curry Mussel Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CurryMusselSoup;
#[allow(unused_variables)]
impl Effect for CurryMusselSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -10.0 incoming damage
        // -5.0 incoming condition damage
        // +10.0 experience from kills
    }
}

/// Bowl of Curry Pumpkin Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CurryPumpkinSoup;
#[allow(unused_variables)]
impl Effect for CurryPumpkinSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 100.0;
        s.vitality += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Fancy Potato and Leek Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FancyPotatoAndLeekSoup;
#[allow(unused_variables)]
impl Effect for FancyPotatoAndLeekSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 100.0;
        s.condition_damage += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Fire Meat Chili
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FireMeatChili;
#[allow(unused_variables)]
impl Effect for FireMeatChili {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.burn += 15.0;
        s.precision += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Fire Salsa
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FireSalsa;
#[allow(unused_variables)]
impl Effect for FireSalsa {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+100% downed health'
        // unknown effect: '+20% damage while downed'
        // +10.0 experience from kills
    }
}

/// Bowl of Fire Veggie Chili
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FireVeggieChili;
#[allow(unused_variables)]
impl Effect for FireVeggieChili {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 50.0;
        // unknown effect: 'day: 20% chance to burn on critical hit'
        // unknown effect: 'night: 20% chance to steal life on critical hit'
        // +10.0 experience from kills
    }
}

/// Bowl of Fish Stew
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FishStew;
#[allow(unused_variables)]
impl Effect for FishStew {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+150 fishing power'
        s.vitality += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Garlic Kale Sautee
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct GarlicKaleSautee;
#[allow(unused_variables)]
impl Effect for GarlicKaleSautee {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.condition_damage += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Kimchi Tofu Stew
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct KimchiTofuStew;
#[allow(unused_variables)]
impl Effect for KimchiTofuStew {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+15% increased poison duration'
        s.condition_damage += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Lemongrass Mussel Pasta
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct LemongrassMusselPasta;
#[allow(unused_variables)]
impl Effect for LemongrassMusselPasta {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -10.0 incoming damage
        s.toughness += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Lemongrass Poultry Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct LemongrassPoultrySoup;
#[allow(unused_variables)]
impl Effect for LemongrassPoultrySoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -20.0 incoming condition duration
        s.vitality += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Lotus Stirfry
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct LotusStirfry;
#[allow(unused_variables)]
impl Effect for LotusStirfry {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '100% chance to gain might on kill'
        s.power += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Marjory's Experimental Chili
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MarjorysExperimentalChili;
#[allow(unused_variables)]
impl Effect for MarjorysExperimentalChili {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 50.0;
        s.condition_damage += 50.0;
        // unknown effect: 'gain might when using a heal skill'
        // +10.0 experience from kills
    }
}

/// Bowl of Mussel Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MusselSoup;
#[allow(unused_variables)]
impl Effect for MusselSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -10.0 incoming damage
        s.vitality += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Nopalitos Saut√©
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct NopalitosSaut;
#[allow(unused_variables)]
impl Effect for NopalitosSaut {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 100.0;
        s.toughness += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Orrian Truffle Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OrrianTruffleSoup;
#[allow(unused_variables)]
impl Effect for OrrianTruffleSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.vitality += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Orrian Truffle and Meat Stew
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OrrianTruffleAndMeatStew;
#[allow(unused_variables)]
impl Effect for OrrianTruffleAndMeatStew {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '100% chance to gain might on dodge'
        // unknown effect: '+40% to endurance regeneration'
        // +10.0 experience from kills
    }
}

/// Bowl of Passion Fruit Tapioca Pudding
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PassionFruitTapiocaPudding;
#[allow(unused_variables)]
impl Effect for PassionFruitTapiocaPudding {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.healing_power += 70.0;
        // +10.0 experience
    }
}

/// Bowl of Poultry Satay
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PoultrySatay;
#[allow(unused_variables)]
impl Effect for PoultrySatay {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.concentration += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Prickly Pear Sorbet
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PricklyPearSorbet;
#[allow(unused_variables)]
impl Effect for PricklyPearSorbet {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 100.0;
        // unknown effect: '33% chance to gain might on critical hit'
        // +10.0 experience from kills
    }
}

/// Bowl of Prickly Pear Tapioca Pudding
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PricklyPearTapiocaPudding;
#[allow(unused_variables)]
impl Effect for PricklyPearTapiocaPudding {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.healing_power += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Refugee's Beet Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct RefugeesBeetSoup;
#[allow(unused_variables)]
impl Effect for RefugeesBeetSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 100.0;
        // unknown effect: '20% magic find'
        // unknown effect: '+10 experience from kills'
    }
}

/// Bowl of Roasted Lotus Root
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct RoastedLotusRoot;
#[allow(unused_variables)]
impl Effect for RoastedLotusRoot {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -40.0 incoming stun duration
        s.toughness += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Saffron-Mango Ice Cream
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SaffronMangoIceCream;
#[allow(unused_variables)]
impl Effect for SaffronMangoIceCream {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.toughness += 70.0;
        // unknown effect: '+5% karma'
    }
}

/// Bowl of Saffron-scented Poultry Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SaffronscentedPoultrySoup;
#[allow(unused_variables)]
impl Effect for SaffronscentedPoultrySoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '100% chance to remove a condition on using a heal skill (cooldown: 10 seconds)'
        s.healing_power += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Seaweed Salad
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SeaweedSalad;
#[allow(unused_variables)]
impl Effect for SeaweedSalad {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '60% to gain swiftness on kill'
        // unknown effect: '+5% damage while moving'
        // +10.0 experience from kills
    }
}

/// Bowl of Sweet and Spicy Beans
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SweetAndSpicyBeans;
#[allow(unused_variables)]
impl Effect for SweetAndSpicyBeans {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.power += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Sweet and Spicy Butternut Squash Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SweetAndSpicyButternutSquashSoup;
#[allow(unused_variables)]
impl Effect for SweetAndSpicyButternutSquashSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.ferocity += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Tapioca Pudding
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TapiocaPudding;
#[allow(unused_variables)]
impl Effect for TapiocaPudding {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+200 healing power for 10 seconds on using a heal skill (cooldown: 20 seconds)'
        // unknown effect: '+10% healing to other allies'
        // +10.0 experience from kills
    }
}

/// Bowl of Tropical Fruit Salad
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TropicalFruitSalad;
#[allow(unused_variables)]
impl Effect for TropicalFruitSalad {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.condition_damage += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Tropical Mousse
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TropicalMousse;
#[allow(unused_variables)]
impl Effect for TropicalMousse {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 100.0;
        s.condition_damage += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Truffle Ravioli
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TruffleRavioli;
#[allow(unused_variables)]
impl Effect for TruffleRavioli {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 100.0;
        s.precision += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Truffle Risotto
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TruffleRisotto;
#[allow(unused_variables)]
impl Effect for TruffleRisotto {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.precision += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Truffle Sautee
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TruffleSautee;
#[allow(unused_variables)]
impl Effect for TruffleSautee {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '100% chance to gain might on kill'
        s.ferocity += 70.0;
        // +10.0 experience from kills
    }
}

/// Bowl of Winterberry Seaweed Salad
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct WinterberrySeaweedSalad;
#[allow(unused_variables)]
impl Effect for WinterberrySeaweedSalad {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '60% to gain swiftness on kill'
        // unknown effect: '+5% damage while moving'
        // +10.0 experience from kills
        // +30.0 magic find
    }
}

/// Bowl of Zesty Turnip Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ZestyTurnipSoup;
#[allow(unused_variables)]
impl Effect for ZestyTurnipSoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 100.0;
        // unknown effect: '20% magic find'
        // unknown effect: '+10 experience from kills'
    }
}

/// Carrot Souffl√©
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CarrotSouffl;
#[allow(unused_variables)]
impl Effect for CarrotSouffl {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+200 power for 30 seconds on kill'
        s.ferocity += 70.0;
        // +10.0 experience from kills
    }
}

/// Cheesy Cassava Roll
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CheesyCassavaRoll;
#[allow(unused_variables)]
impl Effect for CheesyCassavaRoll {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+200 toughness for 10 seconds on using a heal skill (cooldown: 20 seconds)'
        s.healing_power += 70.0;
        // +10.0 experience from kills
    }
}

/// Chocolate Omnomberry Cake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ChocolateOmnomberryCake;
#[allow(unused_variables)]
impl Effect for ChocolateOmnomberryCake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        //m.condition_duration.<chill> += 15.0;
        s.power += 70.0;
        // +10.0 experience from kills
    }
}

/// Chocolate Omnomberry Cream
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ChocolateOmnomberryCream;
#[allow(unused_variables)]
impl Effect for ChocolateOmnomberryCream {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 100.0;
        // unknown effect: '+40% magic find while under the effect of a boon'
        // +10.0 experience from kills
    }
}

/// Cup of Lotus Fries
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CupOfLotusFries;
#[allow(unused_variables)]
impl Effect for CupOfLotusFries {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '30% magic find'
        s.condition_damage += 70.0;
        // +10.0 experience from kills
    }
}

/// Delicious Rice Ball
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DeliciousRiceBall;
#[allow(unused_variables)]
impl Effect for DeliciousRiceBall {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        // unknown effect: '+10% outgoing healing'
        // unknown effect: '+25% magic find during lunar new year'
    }
}

/// Dragon's Breath Bun
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DragonsBreathBun;
#[allow(unused_variables)]
impl Effect for DragonsBreathBun {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+200 power for 30 seconds on kill'
        s.ferocity += 70.0;
        // +10.0 experience from kills
    }
}

/// Dragon's Revelry Starcake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DragonsRevelryStarcake;
#[allow(unused_variables)]
impl Effect for DragonsRevelryStarcake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        *s += 45.0;
        // +20.0 magic find
        // +10.0 experience from kills
    }
}

/// Dragonfish Candy
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DragonfishCandy;
#[allow(unused_variables)]
impl Effect for DragonfishCandy {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 100.0;
        // unknown effect: '+200 power when health below 50%'
        // +10.0 experience from kills
    }
}

/// Dragonfly Cupcake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct DragonflyCupcake;
#[allow(unused_variables)]
impl Effect for DragonflyCupcake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '30% magic find'
        s.power += 70.0;
        // +10.0 experience from kills
    }
}

/// Egg in a Cloud
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct EggInACloud;
#[allow(unused_variables)]
impl Effect for EggInACloud {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '100% chance to gain might on kill'
        s.ferocity += 70.0;
        // +10.0 experience from kills
    }
}

/// Experimental Remnant
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ExperimentalRemnant;
#[allow(unused_variables)]
impl Effect for ExperimentalRemnant {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '50% to gain swiftness on kill'
        // unknown effect: '+4% damage while moving'
        // +10.0 experience from kills
    }
}

/// Fancy Truffle Burger
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FancyTruffleBurger;
#[allow(unused_variables)]
impl Effect for FancyTruffleBurger {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        m.condition_duration.poison += 15.0;
        s.precision += 70.0;
        // +10.0 experience from kills
    }
}

/// Fishy Rice Bowl
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FishyRiceBowl;
#[allow(unused_variables)]
impl Effect for FishyRiceBowl {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+15% increased burning duration'
        s.condition_damage += 70.0;
        // +10.0 experience from kills
    }
}

/// Flatbread
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct Flatbread;
#[allow(unused_variables)]
impl Effect for Flatbread {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 150.0;
        // +10.0 experience from kills
    }
}

/// Fried Golden Dumpling
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FriedGoldenDumpling;
#[allow(unused_variables)]
impl Effect for FriedGoldenDumpling {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 100.0;
        // unknown effect: '+25% magic find during lunar new year'
        // unknown effect: '33% chance for might (5 seconds) on critical hit'
    }
}

/// Fried Oyster Sandwich
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FriedOysterSandwich;
#[allow(unused_variables)]
impl Effect for FriedOysterSandwich {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -10.0 incoming damage
        s.power += 70.0;
        // +10.0 experience from kills
    }
}

/// Fried Oysters
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FriedOysters;
#[allow(unused_variables)]
impl Effect for FriedOysters {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -10.0 incoming damage
        // +10.0 experience from kills
    }
}

/// Ghost Pepper Popper
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct GhostPepperPopper;
#[allow(unused_variables)]
impl Effect for GhostPepperPopper {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '40% chance to gain might on critical hit during the day'
        // unknown effect: '40% chance to inflict chill on critical hit during the night'
        // +10.0 experience from kills
    }
}

/// Holographic Super Cake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct HolographicSuperCake;
#[allow(unused_variables)]
impl Effect for HolographicSuperCake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain health every second'
        // unknown effect: '+30% to endurance regeneration'
        // +20.0 magic find
    }
}

/// Icy Fish Snack
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct IcyFishSnack;
#[allow(unused_variables)]
impl Effect for IcyFishSnack {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 80.0;
        // unknown effect: '+160 power while health is below 50%'
        // +10.0 experience from kills
    }
}

/// Indigo Mushroom Milkshake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct IndigoMushroomMilkshake;
#[allow(unused_variables)]
impl Effect for IndigoMushroomMilkshake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '66% chance to steal life on critical hit'
        s.precision += 70.0;
        // +10.0 experience from kills
    }
}

/// Jerk Poultry Flatbread Sandwich
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct JerkPoultryFlatbreadSandwich;
#[allow(unused_variables)]
impl Effect for JerkPoultryFlatbreadSandwich {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+150 power and vitality for 30 seconds on kill'
        // +10.0 experience from kills
    }
}

/// Jerk Poultry and Nopal Flatbread Sandwich
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct JerkPoultryAndNopalFlatbreadSandwich;
#[allow(unused_variables)]
impl Effect for JerkPoultryAndNopalFlatbreadSandwich {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+200 power for 10 seconds on using a heal skill (cooldown: 20 seconds)'
        s.precision += 70.0;
        // +10.0 experience from kills
    }
}

/// Koi Cake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct KoiCake;
#[allow(unused_variables)]
impl Effect for KoiCake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.condition_damage += 70.0;
        // +10.0 experience from kills
    }
}

/// Kralkachocolate Bar
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct KralkachocolateBar;
#[allow(unused_variables)]
impl Effect for KralkachocolateBar {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.toughness += 70.0;
        // unknown effect: '+5% karma'
    }
}

/// Lake Doric Mussels
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct LakeDoricMussels;
#[allow(unused_variables)]
impl Effect for LakeDoricMussels {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.precision += 100.0;
        s.healing_power += 70.0;
        // +10.0 experience from kills
    }
}

/// Loaf of Candy Cactus Cornbread
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct CandyCactusCornbread;
#[allow(unused_variables)]
impl Effect for CandyCactusCornbread {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 100.0;
        s.toughness += 70.0;
        // +10.0 experience from kills
    }
}

/// Loaf of Omnomberry Bread
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryBread;
#[allow(unused_variables)]
impl Effect for OmnomberryBread {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 100.0;
        s.toughness += 70.0;
        // +10.0 experience from kills
    }
}

/// Loaf of Saffron Bread
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SaffronBread;
#[allow(unused_variables)]
impl Effect for SaffronBread {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '-20% incoming damage while stunned, knocked down, or knocked back'
        // -20.0 incoming condition duration
        // +10.0 experience from kills
    }
}

/// Mango Pie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MangoPie;
#[allow(unused_variables)]
impl Effect for MangoPie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain health every second'
        s.vitality += 70.0;
        // +10.0 experience from kills
    }
}

/// Mashed Purple Potatoes
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MashedPurplePotatoes;
#[allow(unused_variables)]
impl Effect for MashedPurplePotatoes {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -40.0 incoming stun duration
        s.toughness += 70.0;
        // +10.0 experience from kills
    }
}

/// Meaty Asparagus Skewer
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MeatyAsparagusSkewer;
#[allow(unused_variables)]
impl Effect for MeatyAsparagusSkewer {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+15% increased torment duration'
        s.condition_damage += 70.0;
        // +10.0 experience from kills
    }
}

/// Meaty Rice Bowl
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MeatyRiceBowl;
#[allow(unused_variables)]
impl Effect for MeatyRiceBowl {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+15% increased confusion duration'
        s.condition_damage += 70.0;
        // +10.0 experience from kills
    }
}

/// Mushroom Loaf
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MushroomLoaf;
#[allow(unused_variables)]
impl Effect for MushroomLoaf {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 100.0;
        s.power += 70.0;
        // unknown effect: '+10 experience from kills'
    }
}

/// Omnomberry Bar
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryBar;
#[allow(unused_variables)]
impl Effect for OmnomberryBar {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '30% magic find'
        // unknown effect: '40% gold from monsters'
        // +10.0 experience from kills
    }
}

/// Omnomberry Compote
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryCompote;
#[allow(unused_variables)]
impl Effect for OmnomberryCompote {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '100% chance to gain health on kill'
        s.healing_power += 70.0;
        // +10.0 experience from kills
    }
}

/// Omnomberry Cookie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryCookie;
#[allow(unused_variables)]
impl Effect for OmnomberryCookie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.vitality += 70.0;
        // +10.0 experience from kills
    }
}

/// Omnomberry Ghost
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryGhost;
#[allow(unused_variables)]
impl Effect for OmnomberryGhost {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '66% chance to steal life on critical hit'
        s.precision += 70.0;
        // +15.0 experience from kills
    }
}

/// Omnomberry Pie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryPie;
#[allow(unused_variables)]
impl Effect for OmnomberryPie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '66% chance to steal life on critical hit'
        s.precision += 70.0;
        // +10.0 experience from kills
    }
}

/// Omnomberry Tart
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OmnomberryTart;
#[allow(unused_variables)]
impl Effect for OmnomberryTart {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '30% magic find'
        s.power += 70.0;
        // +10.0 experience from kills
    }
}

/// Oysters Gnashblade
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OystersGnashblade;
#[allow(unused_variables)]
impl Effect for OystersGnashblade {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -10.0 incoming damage
        s.expertise += 70.0;
        // +10.0 experience from kills
    }
}

/// Oysters with Cocktail Sauce
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OystersWithCocktailSauce;
#[allow(unused_variables)]
impl Effect for OystersWithCocktailSauce {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -10.0 incoming damage
        s.precision += 70.0;
        // +10.0 experience from kills
    }
}

/// Oysters with Pesto Sauce
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OystersWithPestoSauce;
#[allow(unused_variables)]
impl Effect for OystersWithPestoSauce {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -10.0 incoming damage
        s.healing_power += 70.0;
        // +10.0 experience from kills
    }
}

/// Oysters with Spicy Sauce
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OystersWithSpicySauce;
#[allow(unused_variables)]
impl Effect for OystersWithSpicySauce {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -10.0 incoming damage
        s.condition_damage += 70.0;
        // +10.0 experience from kills
    }
}

/// Oysters with Zesty Sauce
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OystersWithZestySauce;
#[allow(unused_variables)]
impl Effect for OystersWithZestySauce {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -10.0 incoming damage
        s.ferocity += 70.0;
        // +10.0 experience from kills
    }
}

/// Peppermint Omnomberry Bar
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PeppermintOmnomberryBar;
#[allow(unused_variables)]
impl Effect for PeppermintOmnomberryBar {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +30.0 magic find
        // unknown effect: '+40% gold from monsters'
        // +10.0 experience from kills
        // unknown effect: '+10% karma'
    }
}

/// Plate of Beef Rendang
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct BeefRendang;
#[allow(unused_variables)]
impl Effect for BeefRendang {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.expertise += 70.0;
        // +10.0 experience from kills
    }
}

/// Plate of Fire Flank Steak
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FireFlankSteak;
#[allow(unused_variables)]
impl Effect for FireFlankSteak {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.condition_damage += 70.0;
        // +10.0 experience from kills
    }
}

/// Plate of Frostgorge Clams
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct FrostgorgeClams;
#[allow(unused_variables)]
impl Effect for FrostgorgeClams {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 100.0;
        s.precision += 70.0;
        // +10.0 experience from kills
    }
}

/// Plate of Island Pudding
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct IslandPudding;
#[allow(unused_variables)]
impl Effect for IslandPudding {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +30.0 magic find
        // unknown effect: '+10% karma'
        // +15.0 experience from kills
    }
}

/// Plate of Jerk Poultry
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct JerkPoultry;
#[allow(unused_variables)]
impl Effect for JerkPoultry {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 150.0;
        // +10.0 experience from kills
    }
}

/// Plate of Kimchi Pancakes
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct KimchiPancakes;
#[allow(unused_variables)]
impl Effect for KimchiPancakes {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+15% increased bleeding duration'
        s.condition_damage += 70.0;
        // +10.0 experience from kills
    }
}

/// Plate of Lemongrass Poultry
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct LemongrassPoultry;
#[allow(unused_variables)]
impl Effect for LemongrassPoultry {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.vitality += 100.0;
        // unknown effect: '+200 power when health below 50%'
        // +10.0 experience from kills
    }
}

/// Plate of Mushrooms Yakkington
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MushroomsYakkington;
#[allow(unused_variables)]
impl Effect for MushroomsYakkington {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '100% chance to gain might on kill'
        s.power += 70.0;
        // +10.0 experience from kills
    }
}

/// Plate of Mussels Gnashblade
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct MusselsGnashblade;
#[allow(unused_variables)]
impl Effect for MusselsGnashblade {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -10.0 incoming damage
        s.concentration += 70.0;
        // +10.0 experience from kills
    }
}

/// Plate of Orrian Steak Frittes
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct OrrianSteakFrittes;
#[allow(unused_variables)]
impl Effect for OrrianSteakFrittes {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.vitality += 70.0;
        // +10.0 experience from kills
    }
}

/// Plate of Roasted Cactus
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct RoastedCactus;
#[allow(unused_variables)]
impl Effect for RoastedCactus {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 100.0;
        // unknown effect: '33% chance to gain might on critical hit'
        // +10.0 experience from kills
    }
}

/// Plate of Spicy Herbed Chicken
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SpicyHerbedChicken;
#[allow(unused_variables)]
impl Effect for SpicyHerbedChicken {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.toughness += 100.0;
        s.power += 70.0;
        // unknown effect: '+10 experience from kills'
    }
}

/// Plate of Sweet Curried Mussels
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SweetCurriedMussels;
#[allow(unused_variables)]
impl Effect for SweetCurriedMussels {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '100% chance to gain fury on kill'
        s.ferocity += 70.0;
        // +10.0 experience from kills
    }
}

/// Plate of Truffle Steak
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TruffleSteak;
#[allow(unused_variables)]
impl Effect for TruffleSteak {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.precision += 70.0;
        // +10.0 experience from kills
    }
}

/// Plate of Truffle Steak Dinner
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TruffleSteakDinner;
#[allow(unused_variables)]
impl Effect for TruffleSteakDinner {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+200 power for 30 seconds on kill'
        s.ferocity += 70.0;
        // +10.0 experience from kills
    }
}

/// Prickly Pear Pie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PricklyPearPie;
#[allow(unused_variables)]
impl Effect for PricklyPearPie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        // unknown effect: '33% chance to steal life on critical hit'
        // +10.0 experience from kills
    }
}

/// Prickly Pear Stuffed Nopal
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct PricklyPearStuffedNopal;
#[allow(unused_variables)]
impl Effect for PricklyPearStuffedNopal {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.power += 70.0;
        // +10.0 experience from kills
    }
}

/// Quiche of Darkness
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct QuicheOfDarkness;
#[allow(unused_variables)]
impl Effect for QuicheOfDarkness {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -20.0 incoming condition duration
        s.vitality += 70.0;
        // +10.0 experience from kills
    }
}

/// Rare Veggie Pizza
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct RareVeggiePizza;
#[allow(unused_variables)]
impl Effect for RareVeggiePizza {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.condition_damage += 70.0;
        // +10.0 experience from kills
    }
}

/// Red-Lentil Saobosa
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct RedLentilSaobosa;
#[allow(unused_variables)]
impl Effect for RedLentilSaobosa {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.condition_damage += 70.0;
        // +1.0 experience
    }
}

/// Redfish Sushi
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct RedfishSushi;
#[allow(unused_variables)]
impl Effect for RedfishSushi {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // +30.0 magic find
        // unknown effect: '+150 fishing power'
        // +10.0 experience from kills
    }
}

/// Saffron Mussels
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SaffronMussels;
#[allow(unused_variables)]
impl Effect for SaffronMussels {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.condition_damage += 100.0;
        s.healing_power += 70.0;
        // +10.0 experience from kills
    }
}

/// Saffron Stuffed Mushroom
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SaffronStuffedMushroom;
#[allow(unused_variables)]
impl Effect for SaffronStuffedMushroom {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+200 condition damage for 30 seconds on kill'
        s.precision += 70.0;
        // +10.0 experience from kills
    }
}

/// Saint Bones
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SaintBones;
#[allow(unused_variables)]
impl Effect for SaintBones {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.precision += 70.0;
        // +15.0 experience from kills
    }
}

/// Scoop of Mintberry Swirl Ice Cream
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct ScoopOfMintberrySwirlIceCream;
#[allow(unused_variables)]
impl Effect for ScoopOfMintberrySwirlIceCream {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '66% chance to steal life on critical hit'
        s.precision += 70.0;
        // +10.0 experience from kills
        // unknown effect: '+10% karma'
    }
}

/// Slice of Allspice Cake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SliceOfAllspiceCake;
#[allow(unused_variables)]
impl Effect for SliceOfAllspiceCake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '66% chance to steal life on critical hit'
        s.power += 70.0;
        // +10.0 experience from kills
    }
}

/// Slice of Allspice Cake with Ice Cream
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SliceOfAllspiceCakeWithIceCream;
#[allow(unused_variables)]
impl Effect for SliceOfAllspiceCakeWithIceCream {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '66% chance to steal life on critical hit'
        s.condition_damage += 70.0;
        // +10.0 experience from kills
    }
}

/// Slice of Candied Dragon Roll
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SliceOfCandiedDragonRoll;
#[allow(unused_variables)]
impl Effect for SliceOfCandiedDragonRoll {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '66% chance to steal life on critical hit'
        s.precision += 70.0;
        // +10.0 experience from kills
    }
}

/// Soul Cake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SoulCake;
#[allow(unused_variables)]
impl Effect for SoulCake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.expertise += 100.0;
        s.vitality += 70.0;
        // +15.0 experience from kills
    }
}

/// Soul Pastry
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SoulPastry;
#[allow(unused_variables)]
impl Effect for SoulPastry {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 100.0;
        s.power += 70.0;
        // +15.0 experience from kills
    }
}

/// Spicy Chocolate Cookie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SpicyChocolateCookie;
#[allow(unused_variables)]
impl Effect for SpicyChocolateCookie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.healing_power += 100.0;
        s.precision += 70.0;
        // +10.0 experience from kills
    }
}

/// Spicy Marinated Mushroom
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SpicyMarinatedMushroom;
#[allow(unused_variables)]
impl Effect for SpicyMarinatedMushroom {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.toughness += 70.0;
        // unknown effect: '+10 experience from kills'
    }
}

/// Spicy Pumpkin Cookie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SpicyPumpkinCookie;
#[allow(unused_variables)]
impl Effect for SpicyPumpkinCookie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '30% magic find'
        s.condition_damage += 70.0;
        // +15.0 experience from kills
    }
}

/// Spring Roll
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SpringRoll;
#[allow(unused_variables)]
impl Effect for SpringRoll {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.concentration += 100.0;
        // unknown effect: 'swiftness for 30 seconds on kill'
        // unknown effect: '+25% magic find during lunar new year'
    }
}

/// Steak with Winterberry Sauce
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SteakWithWinterberrySauce;
#[allow(unused_variables)]
impl Effect for SteakWithWinterberrySauce {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.power += 100.0;
        s.precision += 70.0;
        // +30.0 magic find
        // +10.0 experience from kills
    }
}

/// Steamed Red Dumpling
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SteamedRedDumpling;
#[allow(unused_variables)]
impl Effect for SteamedRedDumpling {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '+200 power for 30 seconds on kill'
        // unknown effect: '+140 condition damage for 30 seconds on kill'
        // unknown effect: '+25% magic find during lunar new year'
    }
}

/// Super-Hot Lemongrass Poultry Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SuperHotLemongrassPoultrySoup;
#[allow(unused_variables)]
impl Effect for SuperHotLemongrassPoultrySoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -20.0 incoming condition duration
        s.vitality += 70.0;
        // +10.0 experience from kills
    }
}

/// Super-Hot Saffron-Scented Poultry Soup
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SuperHotSaffronScentedPoultrySoup;
#[allow(unused_variables)]
impl Effect for SuperHotSaffronScentedPoultrySoup {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '100% chance to remove a condition on using a heal skill (cooldown: 10 seconds)'
        s.healing_power += 70.0;
        // +10.0 experience from kills
    }
}

/// Sweet Bean Bun
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SweetBeanBun;
#[allow(unused_variables)]
impl Effect for SweetBeanBun {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // -20.0 incoming condition duration
        s.expertise += 70.0;
        // unknown effect: '+25% magic find during lunar new year'
    }
}

/// Swiftly Scrambled Eggs
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct SwiftlyScrambledEggs;
#[allow(unused_variables)]
impl Effect for SwiftlyScrambledEggs {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '60% to gain swiftness on kill'
        // unknown effect: '+5% damage while moving'
        // +10.0 experience from kills
    }
}

/// Tropical Peppermint Cake
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct TropicalPeppermintCake;
#[allow(unused_variables)]
impl Effect for TropicalPeppermintCake {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: 'gain health every second'
        s.vitality += 70.0;
        // +10.0 experience from kills
        // unknown effect: '+10% karma'
    }
}

/// Winterberry Pie
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct WinterberryPie;
#[allow(unused_variables)]
impl Effect for WinterberryPie {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        // unknown effect: '66% chance to steal life on critical hit'
        s.precision += 70.0;
        // +30.0 magic find
        // +10.0 experience from kills
    }
}

/// Winterberry Sorbet
#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash, Default)]
pub struct WinterberrySorbet;
#[allow(unused_variables)]
impl Effect for WinterberrySorbet {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        s.ferocity += 100.0;
        // unknown effect: '28% chance to gain might on critical hit'
        // +10.0 experience from kills
        // +30.0 magic find
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]
pub enum Food {
    TropicalFruitSalad(TropicalFruitSalad),
    FireFlankSteak(FireFlankSteak),
    RefugeesBeetSoup(RefugeesBeetSoup),
    ScoopOfMintberrySwirlIceCream(ScoopOfMintberrySwirlIceCream),
    SeaweedSalad(SeaweedSalad),
    OrrianTruffleSoup(OrrianTruffleSoup),
    CheesyCassavaRoll(CheesyCassavaRoll),
    IcyFishSnack(IcyFishSnack),
    SpicyPumpkinCookie(SpicyPumpkinCookie),
    KoiCake(KoiCake),
    MusselsGnashblade(MusselsGnashblade),
    CactusSoup(CactusSoup),
    TropicalMousse(TropicalMousse),
    SuperHotLemongrassPoultrySoup(SuperHotLemongrassPoultrySoup),
    SteamedRedDumpling(SteamedRedDumpling),
    OmnomberryCompote(OmnomberryCompote),
    MarjorysExperimentalChili(MarjorysExperimentalChili),
    Flatbread(Flatbread),
    OmnomberryPie(OmnomberryPie),
    TapiocaPudding(TapiocaPudding),
    WinterberrySorbet(WinterberrySorbet),
    TruffleSteak(TruffleSteak),
    OystersWithZestySauce(OystersWithZestySauce),
    KimchiPancakes(KimchiPancakes),
    ExperimentalRemnant(ExperimentalRemnant),
    JerkPoultryAndNopalFlatbreadSandwich(JerkPoultryAndNopalFlatbreadSandwich),
    OystersWithSpicySauce(OystersWithSpicySauce),
    SaffronMangoIceCream(SaffronMangoIceCream),
    SoulPastry(SoulPastry),
    MushroomLoaf(MushroomLoaf),
    JerkPoultryFlatbreadSandwich(JerkPoultryFlatbreadSandwich),
    SliceOfCandiedDragonRoll(SliceOfCandiedDragonRoll),
    LemongrassMusselPasta(LemongrassMusselPasta),
    SaffronscentedPoultrySoup(SaffronscentedPoultrySoup),
    TropicalPeppermintCake(TropicalPeppermintCake),
    ZestyTurnipSoup(ZestyTurnipSoup),
    CandyCactusCornbread(CandyCactusCornbread),
    OmnomberryCookie(OmnomberryCookie),
    BlackPepperCactusSalad(BlackPepperCactusSalad),
    MeatyRiceBowl(MeatyRiceBowl),
    DragonflyCupcake(DragonflyCupcake),
    CurryButternutSquashSoup(CurryButternutSquashSoup),
    LemongrassPoultrySoup(LemongrassPoultrySoup),
    MeatyAsparagusSkewer(MeatyAsparagusSkewer),
    SliceOfAllspiceCake(SliceOfAllspiceCake),
    PeppermintOmnomberryBar(PeppermintOmnomberryBar),
    PricklyPearStuffedNopal(PricklyPearStuffedNopal),
    WinterberryPie(WinterberryPie),
    FriedOysters(FriedOysters),
    GhostPepperPopper(GhostPepperPopper),
    PoultrySatay(PoultrySatay),
    PassionFruitTapiocaPudding(PassionFruitTapiocaPudding),
    FancyPotatoAndLeekSoup(FancyPotatoAndLeekSoup),
    OmnomberryBar(OmnomberryBar),
    BeefRendang(BeefRendang),
    ChocolateTapiocaPudding(ChocolateTapiocaPudding),
    DragonfishCandy(DragonfishCandy),
    OrrianSteakFrittes(OrrianSteakFrittes),
    FishStew(FishStew),
    RedfishSushi(RedfishSushi),
    FriedGoldenDumpling(FriedGoldenDumpling),
    OmnomberryTart(OmnomberryTart),
    SpicyChocolateCookie(SpicyChocolateCookie),
    RoastedCactus(RoastedCactus),
    SweetAndSpicyBeans(SweetAndSpicyBeans),
    CupOfLotusFries(CupOfLotusFries),
    FriedOysterSandwich(FriedOysterSandwich),
    SaffronMussels(SaffronMussels),
    SliceOfAllspiceCakeWithIceCream(SliceOfAllspiceCakeWithIceCream),
    SpringRoll(SpringRoll),
    TruffleSautee(TruffleSautee),
    MushroomsYakkington(MushroomsYakkington),
    MangoPie(MangoPie),
    CarrotSouffl(CarrotSouffl),
    OrrianTruffleAndMeatStew(OrrianTruffleAndMeatStew),
    KimchiTofuStew(KimchiTofuStew),
    TruffleSteakDinner(TruffleSteakDinner),
    OystersWithCocktailSauce(OystersWithCocktailSauce),
    PricklyPearSorbet(PricklyPearSorbet),
    DragonsRevelryStarcake(DragonsRevelryStarcake),
    WinterberrySeaweedSalad(WinterberrySeaweedSalad),
    SteakWithWinterberrySauce(SteakWithWinterberrySauce),
    CurryMusselSoup(CurryMusselSoup),
    MusselSoup(MusselSoup),
    OystersWithPestoSauce(OystersWithPestoSauce),
    SwiftlyScrambledEggs(SwiftlyScrambledEggs),
    FireSalsa(FireSalsa),
    SaffronBread(SaffronBread),
    SpicyHerbedChicken(SpicyHerbedChicken),
    EggInACloud(EggInACloud),
    SuperHotSaffronScentedPoultrySoup(SuperHotSaffronScentedPoultrySoup),
    BlockOfTofu(BlockOfTofu),
    LemongrassPoultry(LemongrassPoultry),
    CurryPumpkinSoup(CurryPumpkinSoup),
    SweetAndSpicyButternutSquashSoup(SweetAndSpicyButternutSquashSoup),
    LakeDoricMussels(LakeDoricMussels),
    KralkachocolateBar(KralkachocolateBar),
    FrostgorgeClams(FrostgorgeClams),
    ChocolateOmnomberryCream(ChocolateOmnomberryCream),
    FireVeggieChili(FireVeggieChili),
    PricklyPearTapiocaPudding(PricklyPearTapiocaPudding),
    DeliciousRiceBall(DeliciousRiceBall),
    GarlicKaleSautee(GarlicKaleSautee),
    DragonsBreathBun(DragonsBreathBun),
    ChocolateOmnomberryCake(ChocolateOmnomberryCake),
    NopalitosSaut(NopalitosSaut),
    SweetCurriedMussels(SweetCurriedMussels),
    PricklyPearPie(PricklyPearPie),
    QuicheOfDarkness(QuicheOfDarkness),
    CactusFruitSalad(CactusFruitSalad),
    RareVeggiePizza(RareVeggiePizza),
    SaffronStuffedMushroom(SaffronStuffedMushroom),
    LotusStirfry(LotusStirfry),
    RoastedLotusRoot(RoastedLotusRoot),
    SaintBones(SaintBones),
    TruffleRisotto(TruffleRisotto),
    FishyRiceBowl(FishyRiceBowl),
    MashedPurplePotatoes(MashedPurplePotatoes),
    OmnomberryGhost(OmnomberryGhost),
    IndigoMushroomMilkshake(IndigoMushroomMilkshake),
    JerkPoultry(JerkPoultry),
    SpicyMarinatedMushroom(SpicyMarinatedMushroom),
    SweetBeanBun(SweetBeanBun),
    FancyTruffleBurger(FancyTruffleBurger),
    IslandPudding(IslandPudding),
    OystersGnashblade(OystersGnashblade),
    TruffleRavioli(TruffleRavioli),
    SoulCake(SoulCake),
    HolographicSuperCake(HolographicSuperCake),
    OmnomberryBread(OmnomberryBread),
    FireMeatChili(FireMeatChili),
    RedLentilSaobosa(RedLentilSaobosa),
}
impl Effect for Food {
    fn add_permanent(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Food::TropicalFruitSalad(x) => x.add_permanent(s, m),
            Food::FireFlankSteak(x) => x.add_permanent(s, m),
            Food::RefugeesBeetSoup(x) => x.add_permanent(s, m),
            Food::ScoopOfMintberrySwirlIceCream(x) => x.add_permanent(s, m),
            Food::SeaweedSalad(x) => x.add_permanent(s, m),
            Food::OrrianTruffleSoup(x) => x.add_permanent(s, m),
            Food::CheesyCassavaRoll(x) => x.add_permanent(s, m),
            Food::IcyFishSnack(x) => x.add_permanent(s, m),
            Food::SpicyPumpkinCookie(x) => x.add_permanent(s, m),
            Food::KoiCake(x) => x.add_permanent(s, m),
            Food::MusselsGnashblade(x) => x.add_permanent(s, m),
            Food::CactusSoup(x) => x.add_permanent(s, m),
            Food::TropicalMousse(x) => x.add_permanent(s, m),
            Food::SuperHotLemongrassPoultrySoup(x) => x.add_permanent(s, m),
            Food::SteamedRedDumpling(x) => x.add_permanent(s, m),
            Food::OmnomberryCompote(x) => x.add_permanent(s, m),
            Food::MarjorysExperimentalChili(x) => x.add_permanent(s, m),
            Food::Flatbread(x) => x.add_permanent(s, m),
            Food::OmnomberryPie(x) => x.add_permanent(s, m),
            Food::TapiocaPudding(x) => x.add_permanent(s, m),
            Food::WinterberrySorbet(x) => x.add_permanent(s, m),
            Food::TruffleSteak(x) => x.add_permanent(s, m),
            Food::OystersWithZestySauce(x) => x.add_permanent(s, m),
            Food::KimchiPancakes(x) => x.add_permanent(s, m),
            Food::ExperimentalRemnant(x) => x.add_permanent(s, m),
            Food::JerkPoultryAndNopalFlatbreadSandwich(x) => x.add_permanent(s, m),
            Food::OystersWithSpicySauce(x) => x.add_permanent(s, m),
            Food::SaffronMangoIceCream(x) => x.add_permanent(s, m),
            Food::SoulPastry(x) => x.add_permanent(s, m),
            Food::MushroomLoaf(x) => x.add_permanent(s, m),
            Food::JerkPoultryFlatbreadSandwich(x) => x.add_permanent(s, m),
            Food::SliceOfCandiedDragonRoll(x) => x.add_permanent(s, m),
            Food::LemongrassMusselPasta(x) => x.add_permanent(s, m),
            Food::SaffronscentedPoultrySoup(x) => x.add_permanent(s, m),
            Food::TropicalPeppermintCake(x) => x.add_permanent(s, m),
            Food::ZestyTurnipSoup(x) => x.add_permanent(s, m),
            Food::CandyCactusCornbread(x) => x.add_permanent(s, m),
            Food::OmnomberryCookie(x) => x.add_permanent(s, m),
            Food::BlackPepperCactusSalad(x) => x.add_permanent(s, m),
            Food::MeatyRiceBowl(x) => x.add_permanent(s, m),
            Food::DragonflyCupcake(x) => x.add_permanent(s, m),
            Food::CurryButternutSquashSoup(x) => x.add_permanent(s, m),
            Food::LemongrassPoultrySoup(x) => x.add_permanent(s, m),
            Food::MeatyAsparagusSkewer(x) => x.add_permanent(s, m),
            Food::SliceOfAllspiceCake(x) => x.add_permanent(s, m),
            Food::PeppermintOmnomberryBar(x) => x.add_permanent(s, m),
            Food::PricklyPearStuffedNopal(x) => x.add_permanent(s, m),
            Food::WinterberryPie(x) => x.add_permanent(s, m),
            Food::FriedOysters(x) => x.add_permanent(s, m),
            Food::GhostPepperPopper(x) => x.add_permanent(s, m),
            Food::PoultrySatay(x) => x.add_permanent(s, m),
            Food::PassionFruitTapiocaPudding(x) => x.add_permanent(s, m),
            Food::FancyPotatoAndLeekSoup(x) => x.add_permanent(s, m),
            Food::OmnomberryBar(x) => x.add_permanent(s, m),
            Food::BeefRendang(x) => x.add_permanent(s, m),
            Food::ChocolateTapiocaPudding(x) => x.add_permanent(s, m),
            Food::DragonfishCandy(x) => x.add_permanent(s, m),
            Food::OrrianSteakFrittes(x) => x.add_permanent(s, m),
            Food::FishStew(x) => x.add_permanent(s, m),
            Food::RedfishSushi(x) => x.add_permanent(s, m),
            Food::FriedGoldenDumpling(x) => x.add_permanent(s, m),
            Food::OmnomberryTart(x) => x.add_permanent(s, m),
            Food::SpicyChocolateCookie(x) => x.add_permanent(s, m),
            Food::RoastedCactus(x) => x.add_permanent(s, m),
            Food::SweetAndSpicyBeans(x) => x.add_permanent(s, m),
            Food::CupOfLotusFries(x) => x.add_permanent(s, m),
            Food::FriedOysterSandwich(x) => x.add_permanent(s, m),
            Food::SaffronMussels(x) => x.add_permanent(s, m),
            Food::SliceOfAllspiceCakeWithIceCream(x) => x.add_permanent(s, m),
            Food::SpringRoll(x) => x.add_permanent(s, m),
            Food::TruffleSautee(x) => x.add_permanent(s, m),
            Food::MushroomsYakkington(x) => x.add_permanent(s, m),
            Food::MangoPie(x) => x.add_permanent(s, m),
            Food::CarrotSouffl(x) => x.add_permanent(s, m),
            Food::OrrianTruffleAndMeatStew(x) => x.add_permanent(s, m),
            Food::KimchiTofuStew(x) => x.add_permanent(s, m),
            Food::TruffleSteakDinner(x) => x.add_permanent(s, m),
            Food::OystersWithCocktailSauce(x) => x.add_permanent(s, m),
            Food::PricklyPearSorbet(x) => x.add_permanent(s, m),
            Food::DragonsRevelryStarcake(x) => x.add_permanent(s, m),
            Food::WinterberrySeaweedSalad(x) => x.add_permanent(s, m),
            Food::SteakWithWinterberrySauce(x) => x.add_permanent(s, m),
            Food::CurryMusselSoup(x) => x.add_permanent(s, m),
            Food::MusselSoup(x) => x.add_permanent(s, m),
            Food::OystersWithPestoSauce(x) => x.add_permanent(s, m),
            Food::SwiftlyScrambledEggs(x) => x.add_permanent(s, m),
            Food::FireSalsa(x) => x.add_permanent(s, m),
            Food::SaffronBread(x) => x.add_permanent(s, m),
            Food::SpicyHerbedChicken(x) => x.add_permanent(s, m),
            Food::EggInACloud(x) => x.add_permanent(s, m),
            Food::SuperHotSaffronScentedPoultrySoup(x) => x.add_permanent(s, m),
            Food::BlockOfTofu(x) => x.add_permanent(s, m),
            Food::LemongrassPoultry(x) => x.add_permanent(s, m),
            Food::CurryPumpkinSoup(x) => x.add_permanent(s, m),
            Food::SweetAndSpicyButternutSquashSoup(x) => x.add_permanent(s, m),
            Food::LakeDoricMussels(x) => x.add_permanent(s, m),
            Food::KralkachocolateBar(x) => x.add_permanent(s, m),
            Food::FrostgorgeClams(x) => x.add_permanent(s, m),
            Food::ChocolateOmnomberryCream(x) => x.add_permanent(s, m),
            Food::FireVeggieChili(x) => x.add_permanent(s, m),
            Food::PricklyPearTapiocaPudding(x) => x.add_permanent(s, m),
            Food::DeliciousRiceBall(x) => x.add_permanent(s, m),
            Food::GarlicKaleSautee(x) => x.add_permanent(s, m),
            Food::DragonsBreathBun(x) => x.add_permanent(s, m),
            Food::ChocolateOmnomberryCake(x) => x.add_permanent(s, m),
            Food::NopalitosSaut(x) => x.add_permanent(s, m),
            Food::SweetCurriedMussels(x) => x.add_permanent(s, m),
            Food::PricklyPearPie(x) => x.add_permanent(s, m),
            Food::QuicheOfDarkness(x) => x.add_permanent(s, m),
            Food::CactusFruitSalad(x) => x.add_permanent(s, m),
            Food::RareVeggiePizza(x) => x.add_permanent(s, m),
            Food::SaffronStuffedMushroom(x) => x.add_permanent(s, m),
            Food::LotusStirfry(x) => x.add_permanent(s, m),
            Food::RoastedLotusRoot(x) => x.add_permanent(s, m),
            Food::SaintBones(x) => x.add_permanent(s, m),
            Food::TruffleRisotto(x) => x.add_permanent(s, m),
            Food::FishyRiceBowl(x) => x.add_permanent(s, m),
            Food::MashedPurplePotatoes(x) => x.add_permanent(s, m),
            Food::OmnomberryGhost(x) => x.add_permanent(s, m),
            Food::IndigoMushroomMilkshake(x) => x.add_permanent(s, m),
            Food::JerkPoultry(x) => x.add_permanent(s, m),
            Food::SpicyMarinatedMushroom(x) => x.add_permanent(s, m),
            Food::SweetBeanBun(x) => x.add_permanent(s, m),
            Food::FancyTruffleBurger(x) => x.add_permanent(s, m),
            Food::IslandPudding(x) => x.add_permanent(s, m),
            Food::OystersGnashblade(x) => x.add_permanent(s, m),
            Food::TruffleRavioli(x) => x.add_permanent(s, m),
            Food::SoulCake(x) => x.add_permanent(s, m),
            Food::HolographicSuperCake(x) => x.add_permanent(s, m),
            Food::OmnomberryBread(x) => x.add_permanent(s, m),
            Food::FireMeatChili(x) => x.add_permanent(s, m),
            Food::RedLentilSaobosa(x) => x.add_permanent(s, m),
        }
    }
    fn distribute(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Food::TropicalFruitSalad(x) => x.distribute(s, m),
            Food::FireFlankSteak(x) => x.distribute(s, m),
            Food::RefugeesBeetSoup(x) => x.distribute(s, m),
            Food::ScoopOfMintberrySwirlIceCream(x) => x.distribute(s, m),
            Food::SeaweedSalad(x) => x.distribute(s, m),
            Food::OrrianTruffleSoup(x) => x.distribute(s, m),
            Food::CheesyCassavaRoll(x) => x.distribute(s, m),
            Food::IcyFishSnack(x) => x.distribute(s, m),
            Food::SpicyPumpkinCookie(x) => x.distribute(s, m),
            Food::KoiCake(x) => x.distribute(s, m),
            Food::MusselsGnashblade(x) => x.distribute(s, m),
            Food::CactusSoup(x) => x.distribute(s, m),
            Food::TropicalMousse(x) => x.distribute(s, m),
            Food::SuperHotLemongrassPoultrySoup(x) => x.distribute(s, m),
            Food::SteamedRedDumpling(x) => x.distribute(s, m),
            Food::OmnomberryCompote(x) => x.distribute(s, m),
            Food::MarjorysExperimentalChili(x) => x.distribute(s, m),
            Food::Flatbread(x) => x.distribute(s, m),
            Food::OmnomberryPie(x) => x.distribute(s, m),
            Food::TapiocaPudding(x) => x.distribute(s, m),
            Food::WinterberrySorbet(x) => x.distribute(s, m),
            Food::TruffleSteak(x) => x.distribute(s, m),
            Food::OystersWithZestySauce(x) => x.distribute(s, m),
            Food::KimchiPancakes(x) => x.distribute(s, m),
            Food::ExperimentalRemnant(x) => x.distribute(s, m),
            Food::JerkPoultryAndNopalFlatbreadSandwich(x) => x.distribute(s, m),
            Food::OystersWithSpicySauce(x) => x.distribute(s, m),
            Food::SaffronMangoIceCream(x) => x.distribute(s, m),
            Food::SoulPastry(x) => x.distribute(s, m),
            Food::MushroomLoaf(x) => x.distribute(s, m),
            Food::JerkPoultryFlatbreadSandwich(x) => x.distribute(s, m),
            Food::SliceOfCandiedDragonRoll(x) => x.distribute(s, m),
            Food::LemongrassMusselPasta(x) => x.distribute(s, m),
            Food::SaffronscentedPoultrySoup(x) => x.distribute(s, m),
            Food::TropicalPeppermintCake(x) => x.distribute(s, m),
            Food::ZestyTurnipSoup(x) => x.distribute(s, m),
            Food::CandyCactusCornbread(x) => x.distribute(s, m),
            Food::OmnomberryCookie(x) => x.distribute(s, m),
            Food::BlackPepperCactusSalad(x) => x.distribute(s, m),
            Food::MeatyRiceBowl(x) => x.distribute(s, m),
            Food::DragonflyCupcake(x) => x.distribute(s, m),
            Food::CurryButternutSquashSoup(x) => x.distribute(s, m),
            Food::LemongrassPoultrySoup(x) => x.distribute(s, m),
            Food::MeatyAsparagusSkewer(x) => x.distribute(s, m),
            Food::SliceOfAllspiceCake(x) => x.distribute(s, m),
            Food::PeppermintOmnomberryBar(x) => x.distribute(s, m),
            Food::PricklyPearStuffedNopal(x) => x.distribute(s, m),
            Food::WinterberryPie(x) => x.distribute(s, m),
            Food::FriedOysters(x) => x.distribute(s, m),
            Food::GhostPepperPopper(x) => x.distribute(s, m),
            Food::PoultrySatay(x) => x.distribute(s, m),
            Food::PassionFruitTapiocaPudding(x) => x.distribute(s, m),
            Food::FancyPotatoAndLeekSoup(x) => x.distribute(s, m),
            Food::OmnomberryBar(x) => x.distribute(s, m),
            Food::BeefRendang(x) => x.distribute(s, m),
            Food::ChocolateTapiocaPudding(x) => x.distribute(s, m),
            Food::DragonfishCandy(x) => x.distribute(s, m),
            Food::OrrianSteakFrittes(x) => x.distribute(s, m),
            Food::FishStew(x) => x.distribute(s, m),
            Food::RedfishSushi(x) => x.distribute(s, m),
            Food::FriedGoldenDumpling(x) => x.distribute(s, m),
            Food::OmnomberryTart(x) => x.distribute(s, m),
            Food::SpicyChocolateCookie(x) => x.distribute(s, m),
            Food::RoastedCactus(x) => x.distribute(s, m),
            Food::SweetAndSpicyBeans(x) => x.distribute(s, m),
            Food::CupOfLotusFries(x) => x.distribute(s, m),
            Food::FriedOysterSandwich(x) => x.distribute(s, m),
            Food::SaffronMussels(x) => x.distribute(s, m),
            Food::SliceOfAllspiceCakeWithIceCream(x) => x.distribute(s, m),
            Food::SpringRoll(x) => x.distribute(s, m),
            Food::TruffleSautee(x) => x.distribute(s, m),
            Food::MushroomsYakkington(x) => x.distribute(s, m),
            Food::MangoPie(x) => x.distribute(s, m),
            Food::CarrotSouffl(x) => x.distribute(s, m),
            Food::OrrianTruffleAndMeatStew(x) => x.distribute(s, m),
            Food::KimchiTofuStew(x) => x.distribute(s, m),
            Food::TruffleSteakDinner(x) => x.distribute(s, m),
            Food::OystersWithCocktailSauce(x) => x.distribute(s, m),
            Food::PricklyPearSorbet(x) => x.distribute(s, m),
            Food::DragonsRevelryStarcake(x) => x.distribute(s, m),
            Food::WinterberrySeaweedSalad(x) => x.distribute(s, m),
            Food::SteakWithWinterberrySauce(x) => x.distribute(s, m),
            Food::CurryMusselSoup(x) => x.distribute(s, m),
            Food::MusselSoup(x) => x.distribute(s, m),
            Food::OystersWithPestoSauce(x) => x.distribute(s, m),
            Food::SwiftlyScrambledEggs(x) => x.distribute(s, m),
            Food::FireSalsa(x) => x.distribute(s, m),
            Food::SaffronBread(x) => x.distribute(s, m),
            Food::SpicyHerbedChicken(x) => x.distribute(s, m),
            Food::EggInACloud(x) => x.distribute(s, m),
            Food::SuperHotSaffronScentedPoultrySoup(x) => x.distribute(s, m),
            Food::BlockOfTofu(x) => x.distribute(s, m),
            Food::LemongrassPoultry(x) => x.distribute(s, m),
            Food::CurryPumpkinSoup(x) => x.distribute(s, m),
            Food::SweetAndSpicyButternutSquashSoup(x) => x.distribute(s, m),
            Food::LakeDoricMussels(x) => x.distribute(s, m),
            Food::KralkachocolateBar(x) => x.distribute(s, m),
            Food::FrostgorgeClams(x) => x.distribute(s, m),
            Food::ChocolateOmnomberryCream(x) => x.distribute(s, m),
            Food::FireVeggieChili(x) => x.distribute(s, m),
            Food::PricklyPearTapiocaPudding(x) => x.distribute(s, m),
            Food::DeliciousRiceBall(x) => x.distribute(s, m),
            Food::GarlicKaleSautee(x) => x.distribute(s, m),
            Food::DragonsBreathBun(x) => x.distribute(s, m),
            Food::ChocolateOmnomberryCake(x) => x.distribute(s, m),
            Food::NopalitosSaut(x) => x.distribute(s, m),
            Food::SweetCurriedMussels(x) => x.distribute(s, m),
            Food::PricklyPearPie(x) => x.distribute(s, m),
            Food::QuicheOfDarkness(x) => x.distribute(s, m),
            Food::CactusFruitSalad(x) => x.distribute(s, m),
            Food::RareVeggiePizza(x) => x.distribute(s, m),
            Food::SaffronStuffedMushroom(x) => x.distribute(s, m),
            Food::LotusStirfry(x) => x.distribute(s, m),
            Food::RoastedLotusRoot(x) => x.distribute(s, m),
            Food::SaintBones(x) => x.distribute(s, m),
            Food::TruffleRisotto(x) => x.distribute(s, m),
            Food::FishyRiceBowl(x) => x.distribute(s, m),
            Food::MashedPurplePotatoes(x) => x.distribute(s, m),
            Food::OmnomberryGhost(x) => x.distribute(s, m),
            Food::IndigoMushroomMilkshake(x) => x.distribute(s, m),
            Food::JerkPoultry(x) => x.distribute(s, m),
            Food::SpicyMarinatedMushroom(x) => x.distribute(s, m),
            Food::SweetBeanBun(x) => x.distribute(s, m),
            Food::FancyTruffleBurger(x) => x.distribute(s, m),
            Food::IslandPudding(x) => x.distribute(s, m),
            Food::OystersGnashblade(x) => x.distribute(s, m),
            Food::TruffleRavioli(x) => x.distribute(s, m),
            Food::SoulCake(x) => x.distribute(s, m),
            Food::HolographicSuperCake(x) => x.distribute(s, m),
            Food::OmnomberryBread(x) => x.distribute(s, m),
            Food::FireMeatChili(x) => x.distribute(s, m),
            Food::RedLentilSaobosa(x) => x.distribute(s, m),
        }
    }
    fn add_temporary(&self, s: &mut Stats, m: &mut Modifiers) {
        match *self {
            Food::TropicalFruitSalad(x) => x.add_temporary(s, m),
            Food::FireFlankSteak(x) => x.add_temporary(s, m),
            Food::RefugeesBeetSoup(x) => x.add_temporary(s, m),
            Food::ScoopOfMintberrySwirlIceCream(x) => x.add_temporary(s, m),
            Food::SeaweedSalad(x) => x.add_temporary(s, m),
            Food::OrrianTruffleSoup(x) => x.add_temporary(s, m),
            Food::CheesyCassavaRoll(x) => x.add_temporary(s, m),
            Food::IcyFishSnack(x) => x.add_temporary(s, m),
            Food::SpicyPumpkinCookie(x) => x.add_temporary(s, m),
            Food::KoiCake(x) => x.add_temporary(s, m),
            Food::MusselsGnashblade(x) => x.add_temporary(s, m),
            Food::CactusSoup(x) => x.add_temporary(s, m),
            Food::TropicalMousse(x) => x.add_temporary(s, m),
            Food::SuperHotLemongrassPoultrySoup(x) => x.add_temporary(s, m),
            Food::SteamedRedDumpling(x) => x.add_temporary(s, m),
            Food::OmnomberryCompote(x) => x.add_temporary(s, m),
            Food::MarjorysExperimentalChili(x) => x.add_temporary(s, m),
            Food::Flatbread(x) => x.add_temporary(s, m),
            Food::OmnomberryPie(x) => x.add_temporary(s, m),
            Food::TapiocaPudding(x) => x.add_temporary(s, m),
            Food::WinterberrySorbet(x) => x.add_temporary(s, m),
            Food::TruffleSteak(x) => x.add_temporary(s, m),
            Food::OystersWithZestySauce(x) => x.add_temporary(s, m),
            Food::KimchiPancakes(x) => x.add_temporary(s, m),
            Food::ExperimentalRemnant(x) => x.add_temporary(s, m),
            Food::JerkPoultryAndNopalFlatbreadSandwich(x) => x.add_temporary(s, m),
            Food::OystersWithSpicySauce(x) => x.add_temporary(s, m),
            Food::SaffronMangoIceCream(x) => x.add_temporary(s, m),
            Food::SoulPastry(x) => x.add_temporary(s, m),
            Food::MushroomLoaf(x) => x.add_temporary(s, m),
            Food::JerkPoultryFlatbreadSandwich(x) => x.add_temporary(s, m),
            Food::SliceOfCandiedDragonRoll(x) => x.add_temporary(s, m),
            Food::LemongrassMusselPasta(x) => x.add_temporary(s, m),
            Food::SaffronscentedPoultrySoup(x) => x.add_temporary(s, m),
            Food::TropicalPeppermintCake(x) => x.add_temporary(s, m),
            Food::ZestyTurnipSoup(x) => x.add_temporary(s, m),
            Food::CandyCactusCornbread(x) => x.add_temporary(s, m),
            Food::OmnomberryCookie(x) => x.add_temporary(s, m),
            Food::BlackPepperCactusSalad(x) => x.add_temporary(s, m),
            Food::MeatyRiceBowl(x) => x.add_temporary(s, m),
            Food::DragonflyCupcake(x) => x.add_temporary(s, m),
            Food::CurryButternutSquashSoup(x) => x.add_temporary(s, m),
            Food::LemongrassPoultrySoup(x) => x.add_temporary(s, m),
            Food::MeatyAsparagusSkewer(x) => x.add_temporary(s, m),
            Food::SliceOfAllspiceCake(x) => x.add_temporary(s, m),
            Food::PeppermintOmnomberryBar(x) => x.add_temporary(s, m),
            Food::PricklyPearStuffedNopal(x) => x.add_temporary(s, m),
            Food::WinterberryPie(x) => x.add_temporary(s, m),
            Food::FriedOysters(x) => x.add_temporary(s, m),
            Food::GhostPepperPopper(x) => x.add_temporary(s, m),
            Food::PoultrySatay(x) => x.add_temporary(s, m),
            Food::PassionFruitTapiocaPudding(x) => x.add_temporary(s, m),
            Food::FancyPotatoAndLeekSoup(x) => x.add_temporary(s, m),
            Food::OmnomberryBar(x) => x.add_temporary(s, m),
            Food::BeefRendang(x) => x.add_temporary(s, m),
            Food::ChocolateTapiocaPudding(x) => x.add_temporary(s, m),
            Food::DragonfishCandy(x) => x.add_temporary(s, m),
            Food::OrrianSteakFrittes(x) => x.add_temporary(s, m),
            Food::FishStew(x) => x.add_temporary(s, m),
            Food::RedfishSushi(x) => x.add_temporary(s, m),
            Food::FriedGoldenDumpling(x) => x.add_temporary(s, m),
            Food::OmnomberryTart(x) => x.add_temporary(s, m),
            Food::SpicyChocolateCookie(x) => x.add_temporary(s, m),
            Food::RoastedCactus(x) => x.add_temporary(s, m),
            Food::SweetAndSpicyBeans(x) => x.add_temporary(s, m),
            Food::CupOfLotusFries(x) => x.add_temporary(s, m),
            Food::FriedOysterSandwich(x) => x.add_temporary(s, m),
            Food::SaffronMussels(x) => x.add_temporary(s, m),
            Food::SliceOfAllspiceCakeWithIceCream(x) => x.add_temporary(s, m),
            Food::SpringRoll(x) => x.add_temporary(s, m),
            Food::TruffleSautee(x) => x.add_temporary(s, m),
            Food::MushroomsYakkington(x) => x.add_temporary(s, m),
            Food::MangoPie(x) => x.add_temporary(s, m),
            Food::CarrotSouffl(x) => x.add_temporary(s, m),
            Food::OrrianTruffleAndMeatStew(x) => x.add_temporary(s, m),
            Food::KimchiTofuStew(x) => x.add_temporary(s, m),
            Food::TruffleSteakDinner(x) => x.add_temporary(s, m),
            Food::OystersWithCocktailSauce(x) => x.add_temporary(s, m),
            Food::PricklyPearSorbet(x) => x.add_temporary(s, m),
            Food::DragonsRevelryStarcake(x) => x.add_temporary(s, m),
            Food::WinterberrySeaweedSalad(x) => x.add_temporary(s, m),
            Food::SteakWithWinterberrySauce(x) => x.add_temporary(s, m),
            Food::CurryMusselSoup(x) => x.add_temporary(s, m),
            Food::MusselSoup(x) => x.add_temporary(s, m),
            Food::OystersWithPestoSauce(x) => x.add_temporary(s, m),
            Food::SwiftlyScrambledEggs(x) => x.add_temporary(s, m),
            Food::FireSalsa(x) => x.add_temporary(s, m),
            Food::SaffronBread(x) => x.add_temporary(s, m),
            Food::SpicyHerbedChicken(x) => x.add_temporary(s, m),
            Food::EggInACloud(x) => x.add_temporary(s, m),
            Food::SuperHotSaffronScentedPoultrySoup(x) => x.add_temporary(s, m),
            Food::BlockOfTofu(x) => x.add_temporary(s, m),
            Food::LemongrassPoultry(x) => x.add_temporary(s, m),
            Food::CurryPumpkinSoup(x) => x.add_temporary(s, m),
            Food::SweetAndSpicyButternutSquashSoup(x) => x.add_temporary(s, m),
            Food::LakeDoricMussels(x) => x.add_temporary(s, m),
            Food::KralkachocolateBar(x) => x.add_temporary(s, m),
            Food::FrostgorgeClams(x) => x.add_temporary(s, m),
            Food::ChocolateOmnomberryCream(x) => x.add_temporary(s, m),
            Food::FireVeggieChili(x) => x.add_temporary(s, m),
            Food::PricklyPearTapiocaPudding(x) => x.add_temporary(s, m),
            Food::DeliciousRiceBall(x) => x.add_temporary(s, m),
            Food::GarlicKaleSautee(x) => x.add_temporary(s, m),
            Food::DragonsBreathBun(x) => x.add_temporary(s, m),
            Food::ChocolateOmnomberryCake(x) => x.add_temporary(s, m),
            Food::NopalitosSaut(x) => x.add_temporary(s, m),
            Food::SweetCurriedMussels(x) => x.add_temporary(s, m),
            Food::PricklyPearPie(x) => x.add_temporary(s, m),
            Food::QuicheOfDarkness(x) => x.add_temporary(s, m),
            Food::CactusFruitSalad(x) => x.add_temporary(s, m),
            Food::RareVeggiePizza(x) => x.add_temporary(s, m),
            Food::SaffronStuffedMushroom(x) => x.add_temporary(s, m),
            Food::LotusStirfry(x) => x.add_temporary(s, m),
            Food::RoastedLotusRoot(x) => x.add_temporary(s, m),
            Food::SaintBones(x) => x.add_temporary(s, m),
            Food::TruffleRisotto(x) => x.add_temporary(s, m),
            Food::FishyRiceBowl(x) => x.add_temporary(s, m),
            Food::MashedPurplePotatoes(x) => x.add_temporary(s, m),
            Food::OmnomberryGhost(x) => x.add_temporary(s, m),
            Food::IndigoMushroomMilkshake(x) => x.add_temporary(s, m),
            Food::JerkPoultry(x) => x.add_temporary(s, m),
            Food::SpicyMarinatedMushroom(x) => x.add_temporary(s, m),
            Food::SweetBeanBun(x) => x.add_temporary(s, m),
            Food::FancyTruffleBurger(x) => x.add_temporary(s, m),
            Food::IslandPudding(x) => x.add_temporary(s, m),
            Food::OystersGnashblade(x) => x.add_temporary(s, m),
            Food::TruffleRavioli(x) => x.add_temporary(s, m),
            Food::SoulCake(x) => x.add_temporary(s, m),
            Food::HolographicSuperCake(x) => x.add_temporary(s, m),
            Food::OmnomberryBread(x) => x.add_temporary(s, m),
            Food::FireMeatChili(x) => x.add_temporary(s, m),
            Food::RedLentilSaobosa(x) => x.add_temporary(s, m),
        }
    }
}
impl Food {
    pub const COUNT: usize = 132;
    pub fn from_index(i: usize) -> Food {
        match i {
            0 => Food::TropicalFruitSalad(TropicalFruitSalad),
            1 => Food::FireFlankSteak(FireFlankSteak),
            2 => Food::RefugeesBeetSoup(RefugeesBeetSoup),
            3 => Food::ScoopOfMintberrySwirlIceCream(ScoopOfMintberrySwirlIceCream),
            4 => Food::SeaweedSalad(SeaweedSalad),
            5 => Food::OrrianTruffleSoup(OrrianTruffleSoup),
            6 => Food::CheesyCassavaRoll(CheesyCassavaRoll),
            7 => Food::IcyFishSnack(IcyFishSnack),
            8 => Food::SpicyPumpkinCookie(SpicyPumpkinCookie),
            9 => Food::KoiCake(KoiCake),
            10 => Food::MusselsGnashblade(MusselsGnashblade),
            11 => Food::CactusSoup(CactusSoup),
            12 => Food::TropicalMousse(TropicalMousse),
            13 => Food::SuperHotLemongrassPoultrySoup(SuperHotLemongrassPoultrySoup),
            14 => Food::SteamedRedDumpling(SteamedRedDumpling),
            15 => Food::OmnomberryCompote(OmnomberryCompote),
            16 => Food::MarjorysExperimentalChili(MarjorysExperimentalChili),
            17 => Food::Flatbread(Flatbread),
            18 => Food::OmnomberryPie(OmnomberryPie),
            19 => Food::TapiocaPudding(TapiocaPudding),
            20 => Food::WinterberrySorbet(WinterberrySorbet),
            21 => Food::TruffleSteak(TruffleSteak),
            22 => Food::OystersWithZestySauce(OystersWithZestySauce),
            23 => Food::KimchiPancakes(KimchiPancakes),
            24 => Food::ExperimentalRemnant(ExperimentalRemnant),
            25 => Food::JerkPoultryAndNopalFlatbreadSandwich(JerkPoultryAndNopalFlatbreadSandwich),
            26 => Food::OystersWithSpicySauce(OystersWithSpicySauce),
            27 => Food::SaffronMangoIceCream(SaffronMangoIceCream),
            28 => Food::SoulPastry(SoulPastry),
            29 => Food::MushroomLoaf(MushroomLoaf),
            30 => Food::JerkPoultryFlatbreadSandwich(JerkPoultryFlatbreadSandwich),
            31 => Food::SliceOfCandiedDragonRoll(SliceOfCandiedDragonRoll),
            32 => Food::LemongrassMusselPasta(LemongrassMusselPasta),
            33 => Food::SaffronscentedPoultrySoup(SaffronscentedPoultrySoup),
            34 => Food::TropicalPeppermintCake(TropicalPeppermintCake),
            35 => Food::ZestyTurnipSoup(ZestyTurnipSoup),
            36 => Food::CandyCactusCornbread(CandyCactusCornbread),
            37 => Food::OmnomberryCookie(OmnomberryCookie),
            38 => Food::BlackPepperCactusSalad(BlackPepperCactusSalad),
            39 => Food::MeatyRiceBowl(MeatyRiceBowl),
            40 => Food::DragonflyCupcake(DragonflyCupcake),
            41 => Food::CurryButternutSquashSoup(CurryButternutSquashSoup),
            42 => Food::LemongrassPoultrySoup(LemongrassPoultrySoup),
            43 => Food::MeatyAsparagusSkewer(MeatyAsparagusSkewer),
            44 => Food::SliceOfAllspiceCake(SliceOfAllspiceCake),
            45 => Food::PeppermintOmnomberryBar(PeppermintOmnomberryBar),
            46 => Food::PricklyPearStuffedNopal(PricklyPearStuffedNopal),
            47 => Food::WinterberryPie(WinterberryPie),
            48 => Food::FriedOysters(FriedOysters),
            49 => Food::GhostPepperPopper(GhostPepperPopper),
            50 => Food::PoultrySatay(PoultrySatay),
            51 => Food::PassionFruitTapiocaPudding(PassionFruitTapiocaPudding),
            52 => Food::FancyPotatoAndLeekSoup(FancyPotatoAndLeekSoup),
            53 => Food::OmnomberryBar(OmnomberryBar),
            54 => Food::BeefRendang(BeefRendang),
            55 => Food::ChocolateTapiocaPudding(ChocolateTapiocaPudding),
            56 => Food::DragonfishCandy(DragonfishCandy),
            57 => Food::OrrianSteakFrittes(OrrianSteakFrittes),
            58 => Food::FishStew(FishStew),
            59 => Food::RedfishSushi(RedfishSushi),
            60 => Food::FriedGoldenDumpling(FriedGoldenDumpling),
            61 => Food::OmnomberryTart(OmnomberryTart),
            62 => Food::SpicyChocolateCookie(SpicyChocolateCookie),
            63 => Food::RoastedCactus(RoastedCactus),
            64 => Food::SweetAndSpicyBeans(SweetAndSpicyBeans),
            65 => Food::CupOfLotusFries(CupOfLotusFries),
            66 => Food::FriedOysterSandwich(FriedOysterSandwich),
            67 => Food::SaffronMussels(SaffronMussels),
            68 => Food::SliceOfAllspiceCakeWithIceCream(SliceOfAllspiceCakeWithIceCream),
            69 => Food::SpringRoll(SpringRoll),
            70 => Food::TruffleSautee(TruffleSautee),
            71 => Food::MushroomsYakkington(MushroomsYakkington),
            72 => Food::MangoPie(MangoPie),
            73 => Food::CarrotSouffl(CarrotSouffl),
            74 => Food::OrrianTruffleAndMeatStew(OrrianTruffleAndMeatStew),
            75 => Food::KimchiTofuStew(KimchiTofuStew),
            76 => Food::TruffleSteakDinner(TruffleSteakDinner),
            77 => Food::OystersWithCocktailSauce(OystersWithCocktailSauce),
            78 => Food::PricklyPearSorbet(PricklyPearSorbet),
            79 => Food::DragonsRevelryStarcake(DragonsRevelryStarcake),
            80 => Food::WinterberrySeaweedSalad(WinterberrySeaweedSalad),
            81 => Food::SteakWithWinterberrySauce(SteakWithWinterberrySauce),
            82 => Food::CurryMusselSoup(CurryMusselSoup),
            83 => Food::MusselSoup(MusselSoup),
            84 => Food::OystersWithPestoSauce(OystersWithPestoSauce),
            85 => Food::SwiftlyScrambledEggs(SwiftlyScrambledEggs),
            86 => Food::FireSalsa(FireSalsa),
            87 => Food::SaffronBread(SaffronBread),
            88 => Food::SpicyHerbedChicken(SpicyHerbedChicken),
            89 => Food::EggInACloud(EggInACloud),
            90 => Food::SuperHotSaffronScentedPoultrySoup(SuperHotSaffronScentedPoultrySoup),
            91 => Food::BlockOfTofu(BlockOfTofu),
            92 => Food::LemongrassPoultry(LemongrassPoultry),
            93 => Food::CurryPumpkinSoup(CurryPumpkinSoup),
            94 => Food::SweetAndSpicyButternutSquashSoup(SweetAndSpicyButternutSquashSoup),
            95 => Food::LakeDoricMussels(LakeDoricMussels),
            96 => Food::KralkachocolateBar(KralkachocolateBar),
            97 => Food::FrostgorgeClams(FrostgorgeClams),
            98 => Food::ChocolateOmnomberryCream(ChocolateOmnomberryCream),
            99 => Food::FireVeggieChili(FireVeggieChili),
            100 => Food::PricklyPearTapiocaPudding(PricklyPearTapiocaPudding),
            101 => Food::DeliciousRiceBall(DeliciousRiceBall),
            102 => Food::GarlicKaleSautee(GarlicKaleSautee),
            103 => Food::DragonsBreathBun(DragonsBreathBun),
            104 => Food::ChocolateOmnomberryCake(ChocolateOmnomberryCake),
            105 => Food::NopalitosSaut(NopalitosSaut),
            106 => Food::SweetCurriedMussels(SweetCurriedMussels),
            107 => Food::PricklyPearPie(PricklyPearPie),
            108 => Food::QuicheOfDarkness(QuicheOfDarkness),
            109 => Food::CactusFruitSalad(CactusFruitSalad),
            110 => Food::RareVeggiePizza(RareVeggiePizza),
            111 => Food::SaffronStuffedMushroom(SaffronStuffedMushroom),
            112 => Food::LotusStirfry(LotusStirfry),
            113 => Food::RoastedLotusRoot(RoastedLotusRoot),
            114 => Food::SaintBones(SaintBones),
            115 => Food::TruffleRisotto(TruffleRisotto),
            116 => Food::FishyRiceBowl(FishyRiceBowl),
            117 => Food::MashedPurplePotatoes(MashedPurplePotatoes),
            118 => Food::OmnomberryGhost(OmnomberryGhost),
            119 => Food::IndigoMushroomMilkshake(IndigoMushroomMilkshake),
            120 => Food::JerkPoultry(JerkPoultry),
            121 => Food::SpicyMarinatedMushroom(SpicyMarinatedMushroom),
            122 => Food::SweetBeanBun(SweetBeanBun),
            123 => Food::FancyTruffleBurger(FancyTruffleBurger),
            124 => Food::IslandPudding(IslandPudding),
            125 => Food::OystersGnashblade(OystersGnashblade),
            126 => Food::TruffleRavioli(TruffleRavioli),
            127 => Food::SoulCake(SoulCake),
            128 => Food::HolographicSuperCake(HolographicSuperCake),
            129 => Food::OmnomberryBread(OmnomberryBread),
            130 => Food::FireMeatChili(FireMeatChili),
            131 => Food::RedLentilSaobosa(RedLentilSaobosa),
            _ => panic!("index {} out of range for Food", i),
        }
    }
    pub fn iter() -> impl Iterator<Item = Food> {
        (0 .. Food::COUNT).map(Food::from_index)
    }
}
impl From<TropicalFruitSalad> for Food {
    fn from(x: TropicalFruitSalad) -> Food { Food::TropicalFruitSalad(x) }
}
impl From<FireFlankSteak> for Food {
    fn from(x: FireFlankSteak) -> Food { Food::FireFlankSteak(x) }
}
impl From<RefugeesBeetSoup> for Food {
    fn from(x: RefugeesBeetSoup) -> Food { Food::RefugeesBeetSoup(x) }
}
impl From<ScoopOfMintberrySwirlIceCream> for Food {
    fn from(x: ScoopOfMintberrySwirlIceCream) -> Food { Food::ScoopOfMintberrySwirlIceCream(x) }
}
impl From<SeaweedSalad> for Food {
    fn from(x: SeaweedSalad) -> Food { Food::SeaweedSalad(x) }
}
impl From<OrrianTruffleSoup> for Food {
    fn from(x: OrrianTruffleSoup) -> Food { Food::OrrianTruffleSoup(x) }
}
impl From<CheesyCassavaRoll> for Food {
    fn from(x: CheesyCassavaRoll) -> Food { Food::CheesyCassavaRoll(x) }
}
impl From<IcyFishSnack> for Food {
    fn from(x: IcyFishSnack) -> Food { Food::IcyFishSnack(x) }
}
impl From<SpicyPumpkinCookie> for Food {
    fn from(x: SpicyPumpkinCookie) -> Food { Food::SpicyPumpkinCookie(x) }
}
impl From<KoiCake> for Food {
    fn from(x: KoiCake) -> Food { Food::KoiCake(x) }
}
impl From<MusselsGnashblade> for Food {
    fn from(x: MusselsGnashblade) -> Food { Food::MusselsGnashblade(x) }
}
impl From<CactusSoup> for Food {
    fn from(x: CactusSoup) -> Food { Food::CactusSoup(x) }
}
impl From<TropicalMousse> for Food {
    fn from(x: TropicalMousse) -> Food { Food::TropicalMousse(x) }
}
impl From<SuperHotLemongrassPoultrySoup> for Food {
    fn from(x: SuperHotLemongrassPoultrySoup) -> Food { Food::SuperHotLemongrassPoultrySoup(x) }
}
impl From<SteamedRedDumpling> for Food {
    fn from(x: SteamedRedDumpling) -> Food { Food::SteamedRedDumpling(x) }
}
impl From<OmnomberryCompote> for Food {
    fn from(x: OmnomberryCompote) -> Food { Food::OmnomberryCompote(x) }
}
impl From<MarjorysExperimentalChili> for Food {
    fn from(x: MarjorysExperimentalChili) -> Food { Food::MarjorysExperimentalChili(x) }
}
impl From<Flatbread> for Food {
    fn from(x: Flatbread) -> Food { Food::Flatbread(x) }
}
impl From<OmnomberryPie> for Food {
    fn from(x: OmnomberryPie) -> Food { Food::OmnomberryPie(x) }
}
impl From<TapiocaPudding> for Food {
    fn from(x: TapiocaPudding) -> Food { Food::TapiocaPudding(x) }
}
impl From<WinterberrySorbet> for Food {
    fn from(x: WinterberrySorbet) -> Food { Food::WinterberrySorbet(x) }
}
impl From<TruffleSteak> for Food {
    fn from(x: TruffleSteak) -> Food { Food::TruffleSteak(x) }
}
impl From<OystersWithZestySauce> for Food {
    fn from(x: OystersWithZestySauce) -> Food { Food::OystersWithZestySauce(x) }
}
impl From<KimchiPancakes> for Food {
    fn from(x: KimchiPancakes) -> Food { Food::KimchiPancakes(x) }
}
impl From<ExperimentalRemnant> for Food {
    fn from(x: ExperimentalRemnant) -> Food { Food::ExperimentalRemnant(x) }
}
impl From<JerkPoultryAndNopalFlatbreadSandwich> for Food {
    fn from(x: JerkPoultryAndNopalFlatbreadSandwich) -> Food { Food::JerkPoultryAndNopalFlatbreadSandwich(x) }
}
impl From<OystersWithSpicySauce> for Food {
    fn from(x: OystersWithSpicySauce) -> Food { Food::OystersWithSpicySauce(x) }
}
impl From<SaffronMangoIceCream> for Food {
    fn from(x: SaffronMangoIceCream) -> Food { Food::SaffronMangoIceCream(x) }
}
impl From<SoulPastry> for Food {
    fn from(x: SoulPastry) -> Food { Food::SoulPastry(x) }
}
impl From<MushroomLoaf> for Food {
    fn from(x: MushroomLoaf) -> Food { Food::MushroomLoaf(x) }
}
impl From<JerkPoultryFlatbreadSandwich> for Food {
    fn from(x: JerkPoultryFlatbreadSandwich) -> Food { Food::JerkPoultryFlatbreadSandwich(x) }
}
impl From<SliceOfCandiedDragonRoll> for Food {
    fn from(x: SliceOfCandiedDragonRoll) -> Food { Food::SliceOfCandiedDragonRoll(x) }
}
impl From<LemongrassMusselPasta> for Food {
    fn from(x: LemongrassMusselPasta) -> Food { Food::LemongrassMusselPasta(x) }
}
impl From<SaffronscentedPoultrySoup> for Food {
    fn from(x: SaffronscentedPoultrySoup) -> Food { Food::SaffronscentedPoultrySoup(x) }
}
impl From<TropicalPeppermintCake> for Food {
    fn from(x: TropicalPeppermintCake) -> Food { Food::TropicalPeppermintCake(x) }
}
impl From<ZestyTurnipSoup> for Food {
    fn from(x: ZestyTurnipSoup) -> Food { Food::ZestyTurnipSoup(x) }
}
impl From<CandyCactusCornbread> for Food {
    fn from(x: CandyCactusCornbread) -> Food { Food::CandyCactusCornbread(x) }
}
impl From<OmnomberryCookie> for Food {
    fn from(x: OmnomberryCookie) -> Food { Food::OmnomberryCookie(x) }
}
impl From<BlackPepperCactusSalad> for Food {
    fn from(x: BlackPepperCactusSalad) -> Food { Food::BlackPepperCactusSalad(x) }
}
impl From<MeatyRiceBowl> for Food {
    fn from(x: MeatyRiceBowl) -> Food { Food::MeatyRiceBowl(x) }
}
impl From<DragonflyCupcake> for Food {
    fn from(x: DragonflyCupcake) -> Food { Food::DragonflyCupcake(x) }
}
impl From<CurryButternutSquashSoup> for Food {
    fn from(x: CurryButternutSquashSoup) -> Food { Food::CurryButternutSquashSoup(x) }
}
impl From<LemongrassPoultrySoup> for Food {
    fn from(x: LemongrassPoultrySoup) -> Food { Food::LemongrassPoultrySoup(x) }
}
impl From<MeatyAsparagusSkewer> for Food {
    fn from(x: MeatyAsparagusSkewer) -> Food { Food::MeatyAsparagusSkewer(x) }
}
impl From<SliceOfAllspiceCake> for Food {
    fn from(x: SliceOfAllspiceCake) -> Food { Food::SliceOfAllspiceCake(x) }
}
impl From<PeppermintOmnomberryBar> for Food {
    fn from(x: PeppermintOmnomberryBar) -> Food { Food::PeppermintOmnomberryBar(x) }
}
impl From<PricklyPearStuffedNopal> for Food {
    fn from(x: PricklyPearStuffedNopal) -> Food { Food::PricklyPearStuffedNopal(x) }
}
impl From<WinterberryPie> for Food {
    fn from(x: WinterberryPie) -> Food { Food::WinterberryPie(x) }
}
impl From<FriedOysters> for Food {
    fn from(x: FriedOysters) -> Food { Food::FriedOysters(x) }
}
impl From<GhostPepperPopper> for Food {
    fn from(x: GhostPepperPopper) -> Food { Food::GhostPepperPopper(x) }
}
impl From<PoultrySatay> for Food {
    fn from(x: PoultrySatay) -> Food { Food::PoultrySatay(x) }
}
impl From<PassionFruitTapiocaPudding> for Food {
    fn from(x: PassionFruitTapiocaPudding) -> Food { Food::PassionFruitTapiocaPudding(x) }
}
impl From<FancyPotatoAndLeekSoup> for Food {
    fn from(x: FancyPotatoAndLeekSoup) -> Food { Food::FancyPotatoAndLeekSoup(x) }
}
impl From<OmnomberryBar> for Food {
    fn from(x: OmnomberryBar) -> Food { Food::OmnomberryBar(x) }
}
impl From<BeefRendang> for Food {
    fn from(x: BeefRendang) -> Food { Food::BeefRendang(x) }
}
impl From<ChocolateTapiocaPudding> for Food {
    fn from(x: ChocolateTapiocaPudding) -> Food { Food::ChocolateTapiocaPudding(x) }
}
impl From<DragonfishCandy> for Food {
    fn from(x: DragonfishCandy) -> Food { Food::DragonfishCandy(x) }
}
impl From<OrrianSteakFrittes> for Food {
    fn from(x: OrrianSteakFrittes) -> Food { Food::OrrianSteakFrittes(x) }
}
impl From<FishStew> for Food {
    fn from(x: FishStew) -> Food { Food::FishStew(x) }
}
impl From<RedfishSushi> for Food {
    fn from(x: RedfishSushi) -> Food { Food::RedfishSushi(x) }
}
impl From<FriedGoldenDumpling> for Food {
    fn from(x: FriedGoldenDumpling) -> Food { Food::FriedGoldenDumpling(x) }
}
impl From<OmnomberryTart> for Food {
    fn from(x: OmnomberryTart) -> Food { Food::OmnomberryTart(x) }
}
impl From<SpicyChocolateCookie> for Food {
    fn from(x: SpicyChocolateCookie) -> Food { Food::SpicyChocolateCookie(x) }
}
impl From<RoastedCactus> for Food {
    fn from(x: RoastedCactus) -> Food { Food::RoastedCactus(x) }
}
impl From<SweetAndSpicyBeans> for Food {
    fn from(x: SweetAndSpicyBeans) -> Food { Food::SweetAndSpicyBeans(x) }
}
impl From<CupOfLotusFries> for Food {
    fn from(x: CupOfLotusFries) -> Food { Food::CupOfLotusFries(x) }
}
impl From<FriedOysterSandwich> for Food {
    fn from(x: FriedOysterSandwich) -> Food { Food::FriedOysterSandwich(x) }
}
impl From<SaffronMussels> for Food {
    fn from(x: SaffronMussels) -> Food { Food::SaffronMussels(x) }
}
impl From<SliceOfAllspiceCakeWithIceCream> for Food {
    fn from(x: SliceOfAllspiceCakeWithIceCream) -> Food { Food::SliceOfAllspiceCakeWithIceCream(x) }
}
impl From<SpringRoll> for Food {
    fn from(x: SpringRoll) -> Food { Food::SpringRoll(x) }
}
impl From<TruffleSautee> for Food {
    fn from(x: TruffleSautee) -> Food { Food::TruffleSautee(x) }
}
impl From<MushroomsYakkington> for Food {
    fn from(x: MushroomsYakkington) -> Food { Food::MushroomsYakkington(x) }
}
impl From<MangoPie> for Food {
    fn from(x: MangoPie) -> Food { Food::MangoPie(x) }
}
impl From<CarrotSouffl> for Food {
    fn from(x: CarrotSouffl) -> Food { Food::CarrotSouffl(x) }
}
impl From<OrrianTruffleAndMeatStew> for Food {
    fn from(x: OrrianTruffleAndMeatStew) -> Food { Food::OrrianTruffleAndMeatStew(x) }
}
impl From<KimchiTofuStew> for Food {
    fn from(x: KimchiTofuStew) -> Food { Food::KimchiTofuStew(x) }
}
impl From<TruffleSteakDinner> for Food {
    fn from(x: TruffleSteakDinner) -> Food { Food::TruffleSteakDinner(x) }
}
impl From<OystersWithCocktailSauce> for Food {
    fn from(x: OystersWithCocktailSauce) -> Food { Food::OystersWithCocktailSauce(x) }
}
impl From<PricklyPearSorbet> for Food {
    fn from(x: PricklyPearSorbet) -> Food { Food::PricklyPearSorbet(x) }
}
impl From<DragonsRevelryStarcake> for Food {
    fn from(x: DragonsRevelryStarcake) -> Food { Food::DragonsRevelryStarcake(x) }
}
impl From<WinterberrySeaweedSalad> for Food {
    fn from(x: WinterberrySeaweedSalad) -> Food { Food::WinterberrySeaweedSalad(x) }
}
impl From<SteakWithWinterberrySauce> for Food {
    fn from(x: SteakWithWinterberrySauce) -> Food { Food::SteakWithWinterberrySauce(x) }
}
impl From<CurryMusselSoup> for Food {
    fn from(x: CurryMusselSoup) -> Food { Food::CurryMusselSoup(x) }
}
impl From<MusselSoup> for Food {
    fn from(x: MusselSoup) -> Food { Food::MusselSoup(x) }
}
impl From<OystersWithPestoSauce> for Food {
    fn from(x: OystersWithPestoSauce) -> Food { Food::OystersWithPestoSauce(x) }
}
impl From<SwiftlyScrambledEggs> for Food {
    fn from(x: SwiftlyScrambledEggs) -> Food { Food::SwiftlyScrambledEggs(x) }
}
impl From<FireSalsa> for Food {
    fn from(x: FireSalsa) -> Food { Food::FireSalsa(x) }
}
impl From<SaffronBread> for Food {
    fn from(x: SaffronBread) -> Food { Food::SaffronBread(x) }
}
impl From<SpicyHerbedChicken> for Food {
    fn from(x: SpicyHerbedChicken) -> Food { Food::SpicyHerbedChicken(x) }
}
impl From<EggInACloud> for Food {
    fn from(x: EggInACloud) -> Food { Food::EggInACloud(x) }
}
impl From<SuperHotSaffronScentedPoultrySoup> for Food {
    fn from(x: SuperHotSaffronScentedPoultrySoup) -> Food { Food::SuperHotSaffronScentedPoultrySoup(x) }
}
impl From<BlockOfTofu> for Food {
    fn from(x: BlockOfTofu) -> Food { Food::BlockOfTofu(x) }
}
impl From<LemongrassPoultry> for Food {
    fn from(x: LemongrassPoultry) -> Food { Food::LemongrassPoultry(x) }
}
impl From<CurryPumpkinSoup> for Food {
    fn from(x: CurryPumpkinSoup) -> Food { Food::CurryPumpkinSoup(x) }
}
impl From<SweetAndSpicyButternutSquashSoup> for Food {
    fn from(x: SweetAndSpicyButternutSquashSoup) -> Food { Food::SweetAndSpicyButternutSquashSoup(x) }
}
impl From<LakeDoricMussels> for Food {
    fn from(x: LakeDoricMussels) -> Food { Food::LakeDoricMussels(x) }
}
impl From<KralkachocolateBar> for Food {
    fn from(x: KralkachocolateBar) -> Food { Food::KralkachocolateBar(x) }
}
impl From<FrostgorgeClams> for Food {
    fn from(x: FrostgorgeClams) -> Food { Food::FrostgorgeClams(x) }
}
impl From<ChocolateOmnomberryCream> for Food {
    fn from(x: ChocolateOmnomberryCream) -> Food { Food::ChocolateOmnomberryCream(x) }
}
impl From<FireVeggieChili> for Food {
    fn from(x: FireVeggieChili) -> Food { Food::FireVeggieChili(x) }
}
impl From<PricklyPearTapiocaPudding> for Food {
    fn from(x: PricklyPearTapiocaPudding) -> Food { Food::PricklyPearTapiocaPudding(x) }
}
impl From<DeliciousRiceBall> for Food {
    fn from(x: DeliciousRiceBall) -> Food { Food::DeliciousRiceBall(x) }
}
impl From<GarlicKaleSautee> for Food {
    fn from(x: GarlicKaleSautee) -> Food { Food::GarlicKaleSautee(x) }
}
impl From<DragonsBreathBun> for Food {
    fn from(x: DragonsBreathBun) -> Food { Food::DragonsBreathBun(x) }
}
impl From<ChocolateOmnomberryCake> for Food {
    fn from(x: ChocolateOmnomberryCake) -> Food { Food::ChocolateOmnomberryCake(x) }
}
impl From<NopalitosSaut> for Food {
    fn from(x: NopalitosSaut) -> Food { Food::NopalitosSaut(x) }
}
impl From<SweetCurriedMussels> for Food {
    fn from(x: SweetCurriedMussels) -> Food { Food::SweetCurriedMussels(x) }
}
impl From<PricklyPearPie> for Food {
    fn from(x: PricklyPearPie) -> Food { Food::PricklyPearPie(x) }
}
impl From<QuicheOfDarkness> for Food {
    fn from(x: QuicheOfDarkness) -> Food { Food::QuicheOfDarkness(x) }
}
impl From<CactusFruitSalad> for Food {
    fn from(x: CactusFruitSalad) -> Food { Food::CactusFruitSalad(x) }
}
impl From<RareVeggiePizza> for Food {
    fn from(x: RareVeggiePizza) -> Food { Food::RareVeggiePizza(x) }
}
impl From<SaffronStuffedMushroom> for Food {
    fn from(x: SaffronStuffedMushroom) -> Food { Food::SaffronStuffedMushroom(x) }
}
impl From<LotusStirfry> for Food {
    fn from(x: LotusStirfry) -> Food { Food::LotusStirfry(x) }
}
impl From<RoastedLotusRoot> for Food {
    fn from(x: RoastedLotusRoot) -> Food { Food::RoastedLotusRoot(x) }
}
impl From<SaintBones> for Food {
    fn from(x: SaintBones) -> Food { Food::SaintBones(x) }
}
impl From<TruffleRisotto> for Food {
    fn from(x: TruffleRisotto) -> Food { Food::TruffleRisotto(x) }
}
impl From<FishyRiceBowl> for Food {
    fn from(x: FishyRiceBowl) -> Food { Food::FishyRiceBowl(x) }
}
impl From<MashedPurplePotatoes> for Food {
    fn from(x: MashedPurplePotatoes) -> Food { Food::MashedPurplePotatoes(x) }
}
impl From<OmnomberryGhost> for Food {
    fn from(x: OmnomberryGhost) -> Food { Food::OmnomberryGhost(x) }
}
impl From<IndigoMushroomMilkshake> for Food {
    fn from(x: IndigoMushroomMilkshake) -> Food { Food::IndigoMushroomMilkshake(x) }
}
impl From<JerkPoultry> for Food {
    fn from(x: JerkPoultry) -> Food { Food::JerkPoultry(x) }
}
impl From<SpicyMarinatedMushroom> for Food {
    fn from(x: SpicyMarinatedMushroom) -> Food { Food::SpicyMarinatedMushroom(x) }
}
impl From<SweetBeanBun> for Food {
    fn from(x: SweetBeanBun) -> Food { Food::SweetBeanBun(x) }
}
impl From<FancyTruffleBurger> for Food {
    fn from(x: FancyTruffleBurger) -> Food { Food::FancyTruffleBurger(x) }
}
impl From<IslandPudding> for Food {
    fn from(x: IslandPudding) -> Food { Food::IslandPudding(x) }
}
impl From<OystersGnashblade> for Food {
    fn from(x: OystersGnashblade) -> Food { Food::OystersGnashblade(x) }
}
impl From<TruffleRavioli> for Food {
    fn from(x: TruffleRavioli) -> Food { Food::TruffleRavioli(x) }
}
impl From<SoulCake> for Food {
    fn from(x: SoulCake) -> Food { Food::SoulCake(x) }
}
impl From<HolographicSuperCake> for Food {
    fn from(x: HolographicSuperCake) -> Food { Food::HolographicSuperCake(x) }
}
impl From<OmnomberryBread> for Food {
    fn from(x: OmnomberryBread) -> Food { Food::OmnomberryBread(x) }
}
impl From<FireMeatChili> for Food {
    fn from(x: FireMeatChili) -> Food { Food::FireMeatChili(x) }
}
impl From<RedLentilSaobosa> for Food {
    fn from(x: RedLentilSaobosa) -> Food { Food::RedLentilSaobosa(x) }
}

// END GENERATED CODE
